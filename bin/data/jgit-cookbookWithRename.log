§§--§§
commit 256d3387cbb318f91e50a33f83d3b96102947370 
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon May 27 00:28:23 2013 -0700 
Message: Initial commit
---§

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..0f182a0
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,6 @@
+*.class
+
+# Package Files #
+*.jar
+*.war
+*.ear
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..66cf9a4
--- /dev/null
+++ b/README.md
@@ -0,0 +1,4 @@
+jgit-cookbook
+=============
+
+Provides examples and code snippets for jgit Java Git implementation

§§--§§
commit 6b43245453423e52b541af69ba37804aef0393b2 256d3387cbb318f91e50a33f83d3b96102947370
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon May 27 14:56:38 2013 +0200 
Message: set up maven project
---§

diff --git a/.gitignore b/.gitignore
index 0f182a0..d9f145c 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,4 +1,7 @@
 *.class
+target
+.classpath
+.project
 
 # Package Files #
 *.jar
diff --git a/pom.xml b/pom.xml
new file mode 100755
index 0000000..4126c2d
--- /dev/null
+++ b/pom.xml
@@ -0,0 +1,32 @@
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>org.dstadler.jgit</groupId>
+  <artifactId>jgit-cookbook</artifactId>
+  <packaging>jar</packaging>
+  <version>1.0-SNAPSHOT</version>
+  <name>jgit-cookbook</name>
+  <url>http://maven.apache.org</url>
+  <repositories>
+    <repository>
+      <id>jgit-repository</id>
+      <url>http://download.eclipse.org/jgit/maven</url>
+    </repository>
+  </repositories>
+
+  <!-- Core Library -->
+  <dependencies>
+    <dependency>
+      <groupId>org.eclipse.jgit</groupId>
+      <artifactId>org.eclipse.jgit</artifactId>
+      <version>2.3.1.201302201838-r</version>
+    </dependency>
+
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <version>4.8.2</version>
+      <scope>test</scope>
+    </dependency>
+  </dependencies>
+</project>
diff --git a/src/main/java/org/dstadler/jgit/App.java b/src/main/java/org/dstadler/jgit/App.java
new file mode 100755
index 0000000..947c9ef
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/App.java
@@ -0,0 +1,13 @@
+package org.dstadler.jgit;
+
+/**
+ * Hello world!
+ *
+ */
+public class App 
+{
+    public static void main( String[] args )
+    {
+        System.out.println( "Hello World!" );
+    }
+}
diff --git a/src/test/java/org/dstadler/jgit/AppTest.java b/src/test/java/org/dstadler/jgit/AppTest.java
new file mode 100755
index 0000000..c4c0e66
--- /dev/null
+++ b/src/test/java/org/dstadler/jgit/AppTest.java
@@ -0,0 +1,38 @@
+package org.dstadler.jgit;
+
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * Unit test for simple App.
+ */
+public class AppTest 
+    extends TestCase
+{
+    /**
+     * Create the test case
+     *
+     * @param testName name of the test case
+     */
+    public AppTest( String testName )
+    {
+        super( testName );
+    }
+
+    /**
+     * @return the suite of tests being tested
+     */
+    public static Test suite()
+    {
+        return new TestSuite( AppTest.class );
+    }
+
+    /**
+     * Rigourous Test :-)
+     */
+    public void testApp()
+    {
+        assertTrue( true );
+    }
+}

§§--§§
commit 9d0b854958a15de19797cc968e0ebfdf2ae3e294 6b43245453423e52b541af69ba37804aef0393b2
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon May 27 15:22:49 2013 +0200 
Message: Some initial snippets
---§

diff --git a/src/main/java/org/dstadler/jgit/App.java b/src/main/java/org/dstadler/jgit/App.java
deleted file mode 100755
index 947c9ef..0000000
--- a/src/main/java/org/dstadler/jgit/App.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package org.dstadler.jgit;
-
-/**
- * Hello world!
- *
- */
-public class App 
-{
-    public static void main( String[] args )
-    {
-        System.out.println( "Hello World!" );
-    }
-}
diff --git a/src/main/java/org/dstadler/jgit/GetRef.java b/src/main/java/org/dstadler/jgit/GetRef.java
new file mode 100755
index 0000000..905f352
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/GetRef.java
@@ -0,0 +1,31 @@
+package org.dstadler.jgit;
+
+import java.io.IOException;
+
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to retrieve a Ref for some reference string.
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class GetRef {
+	public static void main(String[] args) throws IOException {
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		Ref head = repository.getRef("refs/heads/master");
+		System.out.println("Ref of refs/heads/master: " + head);
+
+
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/RepositoryOpen.java b/src/main/java/org/dstadler/jgit/RepositoryOpen.java
new file mode 100755
index 0000000..f97ce2f
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/RepositoryOpen.java
@@ -0,0 +1,28 @@
+package org.dstadler.jgit;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to open an existing repository
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class RepositoryOpen {
+	public static void main(String[] args) throws IOException {
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder.setGitDir(new File("/my/git/directory"))
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		System.out.println("Having repository: " + repository.getDirectory());
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/ResolveRef.java b/src/main/java/org/dstadler/jgit/ResolveRef.java
new file mode 100755
index 0000000..e801d7e
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/ResolveRef.java
@@ -0,0 +1,28 @@
+package org.dstadler.jgit;
+
+import java.io.IOException;
+
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to retrieve an ObjectId for some name.
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ResolveRef {
+	public static void main(String[] args) throws IOException {
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		ObjectId head = repository.resolve("HEAD");
+		System.out.println("ObjectId of HEAD: " + head);
+		repository.close();
+	}
+}
diff --git a/src/test/java/org/dstadler/jgit/AppTest.java b/src/test/java/org/dstadler/jgit/AppTest.java
deleted file mode 100755
index c4c0e66..0000000
--- a/src/test/java/org/dstadler/jgit/AppTest.java
+++ /dev/null
@@ -1,38 +0,0 @@
-package org.dstadler.jgit;
-
-import junit.framework.Test;
-import junit.framework.TestCase;
-import junit.framework.TestSuite;
-
-/**
- * Unit test for simple App.
- */
-public class AppTest 
-    extends TestCase
-{
-    /**
-     * Create the test case
-     *
-     * @param testName name of the test case
-     */
-    public AppTest( String testName )
-    {
-        super( testName );
-    }
-
-    /**
-     * @return the suite of tests being tested
-     */
-    public static Test suite()
-    {
-        return new TestSuite( AppTest.class );
-    }
-
-    /**
-     * Rigourous Test :-)
-     */
-    public void testApp()
-    {
-        assertTrue( true );
-    }
-}

§§--§§
commit a3033aec313556ba4e1ef55a66167a35432a4bc1 9d0b854958a15de19797cc968e0ebfdf2ae3e294
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon May 27 15:23:03 2013 +0200 
Message: Use junit 4.11
---§

diff --git a/pom.xml b/pom.xml
index 4126c2d..a171bf4 100755
--- a/pom.xml
+++ b/pom.xml
@@ -25,7 +25,7 @@
     <dependency>
       <groupId>junit</groupId>
       <artifactId>junit</artifactId>
-      <version>4.8.2</version>
+      <version>4.11</version>
       <scope>test</scope>
     </dependency>
   </dependencies>

§§--§§
commit 12f09b3075c30ee14508076fdd3aa979e1a19947 a3033aec313556ba4e1ef55a66167a35432a4bc1
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon May 27 17:34:52 2013 +0200 
Message: Some new snippets
---§

diff --git a/src/main/java/org/dstadler/jgit/GetRef.java b/src/main/java/org/dstadler/jgit/GetRef.java
index 905f352..c8abf02 100755
--- a/src/main/java/org/dstadler/jgit/GetRef.java
+++ b/src/main/java/org/dstadler/jgit/GetRef.java
@@ -21,11 +21,10 @@ public class GetRef {
 		  .findGitDir() // scan up the file system tree
 		  .build();
 
+		// the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
 		Ref head = repository.getRef("refs/heads/master");
 		System.out.println("Ref of refs/heads/master: " + head);
 
-
-
 		repository.close();
 	}
 }
diff --git a/src/main/java/org/dstadler/jgit/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/GetRevCommitFromObjectId.java
new file mode 100755
index 0000000..41b3036
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/GetRevCommitFromObjectId.java
@@ -0,0 +1,35 @@
+package org.dstadler.jgit;
+
+import java.io.IOException;
+
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over objects
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class GetRevCommitFromObjectId {
+	public static void main(String[] args) throws IOException {
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		Ref head = repository.getRef("refs/heads/master");
+
+		// a RevWalk allows to walk over commits based on some filtering that is defined
+		RevWalk walk = new RevWalk(repository);
+		RevCommit commit = walk.parseCommit(head.getObjectId());
+		System.out.println("Found Commit: " + commit);
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/GetRevTreeFromObjectId.java
new file mode 100755
index 0000000..cf6d4da
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/GetRevTreeFromObjectId.java
@@ -0,0 +1,43 @@
+package org.dstadler.jgit;
+
+import java.io.IOException;
+
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over objects
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class GetRevTreeFromObjectId {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		Ref head = repository.getRef("HEAD");
+
+		// a RevWalk allows to walk over commits based on some filtering that is defined
+		RevWalk walk = new RevWalk(repository);
+
+		RevCommit commit = walk.parseCommit(head.getObjectId());
+		System.out.println("Commit: " + commit);
+
+		// a commit points to a tree
+		RevTree tree = walk.parseTree(commit.getTree().getId());
+		System.out.println("Found Tree: " + tree);
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/WalkRev.java b/src/main/java/org/dstadler/jgit/WalkRev.java
new file mode 100755
index 0000000..d3eb0b7
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/WalkRev.java
@@ -0,0 +1,42 @@
+package org.dstadler.jgit;
+
+import java.io.IOException;
+
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over objects
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class WalkRev {
+	public static void main(String[] args) throws IOException {
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		Ref head = repository.getRef("refs/heads/master");
+
+		// a RevWalk allows to walk over commits based on some filtering that is defined
+		RevWalk walk = new RevWalk(repository);
+
+		RevCommit commit = walk.parseCommit(head.getObjectId());
+		System.out.println("Commit: " + commit);
+
+		System.out.println("Walking all commits starting at HEAD");
+		walk.markStart(commit);
+		for(RevCommit rev : walk) {
+			System.out.println("Commit: " + rev);
+		}
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java b/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java
new file mode 100755
index 0000000..e3e56d9
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java
@@ -0,0 +1,49 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevObject;
+import org.eclipse.jgit.revwalk.RevTag;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over objects
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class GetRevTagFromObjectId {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		List<Ref> call = new Git(repository).tagList().call();
+		for(Ref rev : call) {
+			System.out.println("Tag: " + rev);
+		}
+
+		//Ref head = repository.getRef("refs/tags/initialtag");
+
+		// a RevWalk allows to walk over commits based on some filtering that is defined
+		RevWalk walk = new RevWalk(repository);
+
+		RevObject any = walk.parseAny(call.get(0).getObjectId());
+		System.out.println("Any: " + any);
+
+		RevTag tag = walk.parseTag(call.get(0).getObjectId());
+		System.out.println("Found Tag: " + tag);
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
new file mode 100755
index 0000000..7480e1e
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
@@ -0,0 +1,42 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.IOException;
+
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over objects
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class WalkTree {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		Ref head = repository.getRef("HEAD");
+
+		// a RevWalk allows to walk over commits based on some filtering that is defined
+		RevWalk walk = new RevWalk(repository);
+
+		RevCommit commit = walk.parseCommit(head.getObjectId());
+		RevTree tree = commit.getTree();
+		System.out.println("Having tree: " + tree);
+
+		// TODO: how to look at all files/sub-trees of this Tree now?
+
+		repository.close();
+	}
+}

§§--§§
commit d52a1031cd359a5941d0e047aa7ab82053f7f7c3 12f09b3075c30ee14508076fdd3aa979e1a19947
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon May 27 17:37:36 2013 +0200 
Message: rearrange files
---§

diff --git a/pom.xml b/pom.xml
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/RepositoryOpen.java b/src/main/java/org/dstadler/jgit/RepositoryOpen.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/GetRef.java b/src/main/java/org/dstadler/jgit/api/GetRef.java
old mode 100755
new mode 100644
similarity index 93%
rename from src/main/java/org/dstadler/jgit/GetRef.java
rename to src/main/java/org/dstadler/jgit/api/GetRef.java
index c8abf02..b52addb
--- a/src/main/java/org/dstadler/jgit/GetRef.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRef.java
@@ -1,4 +1,4 @@
-package org.dstadler.jgit;
+package org.dstadler.jgit.api;
 
 import java.io.IOException;
 
diff --git a/src/main/java/org/dstadler/jgit/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
old mode 100755
new mode 100644
similarity index 93%
rename from src/main/java/org/dstadler/jgit/GetRevCommitFromObjectId.java
rename to src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
index 41b3036..b8fc07b
--- a/src/main/java/org/dstadler/jgit/GetRevCommitFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
@@ -1,4 +1,4 @@
-package org.dstadler.jgit;
+package org.dstadler.jgit.api;
 
 import java.io.IOException;
 
diff --git a/src/main/java/org/dstadler/jgit/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
old mode 100755
new mode 100644
similarity index 94%
rename from src/main/java/org/dstadler/jgit/GetRevTreeFromObjectId.java
rename to src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
index cf6d4da..d8b3e3d
--- a/src/main/java/org/dstadler/jgit/GetRevTreeFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
@@ -1,4 +1,4 @@
-package org.dstadler.jgit;
+package org.dstadler.jgit.api;
 
 import java.io.IOException;
 
diff --git a/src/main/java/org/dstadler/jgit/ResolveRef.java b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
old mode 100755
new mode 100644
similarity index 92%
rename from src/main/java/org/dstadler/jgit/ResolveRef.java
rename to src/main/java/org/dstadler/jgit/api/ResolveRef.java
index e801d7e..36089f7
--- a/src/main/java/org/dstadler/jgit/ResolveRef.java
+++ b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
@@ -1,4 +1,4 @@
-package org.dstadler.jgit;
+package org.dstadler.jgit.api;
 
 import java.io.IOException;
 
diff --git a/src/main/java/org/dstadler/jgit/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
old mode 100755
new mode 100644
similarity index 94%
rename from src/main/java/org/dstadler/jgit/WalkRev.java
rename to src/main/java/org/dstadler/jgit/api/WalkRev.java
index d3eb0b7..3c57a5f
--- a/src/main/java/org/dstadler/jgit/WalkRev.java
+++ b/src/main/java/org/dstadler/jgit/api/WalkRev.java
@@ -1,4 +1,4 @@
-package org.dstadler.jgit;
+package org.dstadler.jgit.api;
 
 import java.io.IOException;
 
diff --git a/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java b/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
old mode 100755
new mode 100644

§§--§§
commit b86eb54c7f09f907a0c897761a91507e029821d2 d52a1031cd359a5941d0e047aa7ab82053f7f7c3
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon May 27 17:38:25 2013 +0200 
Message: rearrange files
---§

diff --git a/pom.xml b/pom.xml
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/RepositoryOpen.java b/src/main/java/org/dstadler/jgit/RepositoryOpen.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/api/GetRef.java b/src/main/java/org/dstadler/jgit/api/GetRef.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/api/ResolveRef.java b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java b/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
old mode 100644
new mode 100755

§§--§§
commit 084582b985d889be334f0f6a806e1a7d7b6eafb6 b86eb54c7f09f907a0c897761a91507e029821d2
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Tue May 28 09:42:03 2013 +0200 
Message: new snippet about reading blob content
---§

diff --git a/pom.xml b/pom.xml
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/RepositoryOpen.java b/src/main/java/org/dstadler/jgit/RepositoryOpen.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/api/GetRef.java b/src/main/java/org/dstadler/jgit/api/GetRef.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
new file mode 100644
index 0000000..a221cb6
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
@@ -0,0 +1,35 @@
+package org.dstadler.jgit.api;
+
+import java.io.IOException;
+
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to retrieve a Ref for some reference string.
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ReadBlobContents {
+	public static void main(String[] args) throws IOException {
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		// the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
+		Ref head = repository.getRef("refs/heads/master");
+		System.out.println("Ref of refs/heads/master: " + head);
+
+		System.out.println("Print contents of head of master branch, i.e. the latest commit information");
+		ObjectLoader loader = repository.open(head.getObjectId());
+		loader.copyTo(System.out);
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/api/ResolveRef.java b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java b/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
old mode 100755
new mode 100644

§§--§§
commit c899b99408c682ce66f228cb3ae0850d1e926573 084582b985d889be334f0f6a806e1a7d7b6eafb6
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Tue May 28 09:43:34 2013 +0200 
Message: Update file mode
---§

diff --git a/pom.xml b/pom.xml
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/RepositoryOpen.java b/src/main/java/org/dstadler/jgit/RepositoryOpen.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/api/GetRef.java b/src/main/java/org/dstadler/jgit/api/GetRef.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/api/ResolveRef.java b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java b/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
old mode 100644
new mode 100755

§§--§§
commit 65e0ed3a55c7a2295e7340c1f503e22de36f3081 c899b99408c682ce66f228cb3ae0850d1e926573
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Tue May 28 15:23:55 2013 +0200 
Message: Review snippets, add CookbookHelper, adjust description, move, ...
---§

diff --git a/pom.xml b/pom.xml
index a171bf4..f3f7a93 100755
--- a/pom.xml
+++ b/pom.xml
@@ -22,11 +22,10 @@
       <version>2.3.1.201302201838-r</version>
     </dependency>
 
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <version>4.11</version>
-      <scope>test</scope>
-    </dependency>
+	<dependency>
+		<groupId>commons-io</groupId>
+		<artifactId>commons-io</artifactId>
+		<version>2.4</version>
+	</dependency>
   </dependencies>
 </project>
diff --git a/src/main/java/org/dstadler/jgit/CreateNewRepository.java b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
new file mode 100755
index 0000000..55136aa
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
@@ -0,0 +1,31 @@
+package org.dstadler.jgit;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.apache.commons.io.FileUtils;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepository;
+
+/**
+ * Simple snippet which shows how to create a new repository
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class CreateNewRepository {
+	public static void main(String[] args) throws IOException {
+		// prepare a new folder
+		File localPath = File.createTempFile("TestGitRepository", "");
+		localPath.delete();
+
+		// create the directory
+        Repository repository = new FileRepository(localPath + ".git");
+        repository.create();
+
+		System.out.println("Having repository: " + repository.getDirectory());
+
+		repository.close();
+
+		FileUtils.deleteDirectory(localPath);
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/RepositoryOpen.java b/src/main/java/org/dstadler/jgit/OpenRepository.java
similarity index 92%
rename from src/main/java/org/dstadler/jgit/RepositoryOpen.java
rename to src/main/java/org/dstadler/jgit/OpenRepository.java
index f97ce2f..86bb967 100755
--- a/src/main/java/org/dstadler/jgit/RepositoryOpen.java
+++ b/src/main/java/org/dstadler/jgit/OpenRepository.java
@@ -13,7 +13,7 @@ import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
  *
  * @author dominik.stadler@gmx.at
  */
-public class RepositoryOpen {
+public class OpenRepository {
 	public static void main(String[] args) throws IOException {
 		FileRepositoryBuilder builder = new FileRepositoryBuilder();
 		Repository repository = builder.setGitDir(new File("/my/git/directory"))
diff --git a/src/main/java/org/dstadler/jgit/api/GetRef.java b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
similarity index 57%
rename from src/main/java/org/dstadler/jgit/api/GetRef.java
rename to src/main/java/org/dstadler/jgit/api/GetRefFromName.java
index b52addb..9361eb2 100755
--- a/src/main/java/org/dstadler/jgit/api/GetRef.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
@@ -2,24 +2,16 @@ package org.dstadler.jgit.api;
 
 import java.io.IOException;
 
+import org.dstadler.jgit.helper.CookbookHelper;
 import org.eclipse.jgit.lib.Ref;
 import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
 
 /**
  * Simple snippet which shows how to retrieve a Ref for some reference string.
- *
- * @author dominik.stadler@gmx.at
  */
-public class GetRef {
+public class GetRefFromName {
 	public static void main(String[] args) throws IOException {
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
 
 		// the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
 		Ref head = repository.getRef("refs/heads/master");
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
index b8fc07b..7e959e7 100755
--- a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
@@ -2,26 +2,18 @@ package org.dstadler.jgit.api;
 
 import java.io.IOException;
 
+import org.dstadler.jgit.helper.CookbookHelper;
 import org.eclipse.jgit.lib.Ref;
 import org.eclipse.jgit.lib.Repository;
 import org.eclipse.jgit.revwalk.RevCommit;
 import org.eclipse.jgit.revwalk.RevWalk;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
 
 /**
  * Simple snippet which shows how to use RevWalk to iterate over objects
- *
- * @author dominik.stadler@gmx.at
  */
 public class GetRevCommitFromObjectId {
 	public static void main(String[] args) throws IOException {
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
 
 		Ref head = repository.getRef("refs/heads/master");
 
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
index d8b3e3d..84759b8 100755
--- a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
@@ -2,29 +2,21 @@ package org.dstadler.jgit.api;
 
 import java.io.IOException;
 
+import org.dstadler.jgit.helper.CookbookHelper;
 import org.eclipse.jgit.api.errors.GitAPIException;
 import org.eclipse.jgit.lib.Ref;
 import org.eclipse.jgit.lib.Repository;
 import org.eclipse.jgit.revwalk.RevCommit;
 import org.eclipse.jgit.revwalk.RevTree;
 import org.eclipse.jgit.revwalk.RevWalk;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
 
 /**
  * Simple snippet which shows how to use RevWalk to iterate over objects
- *
- * @author dominik.stadler@gmx.at
  */
 public class GetRevTreeFromObjectId {
 
 	public static void main(String[] args) throws IOException, GitAPIException {
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
 
 		Ref head = repository.getRef("HEAD");
 
diff --git a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
index a221cb6..181d0f8 100755
--- a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
@@ -2,25 +2,20 @@ package org.dstadler.jgit.api;
 
 import java.io.IOException;
 
+import org.dstadler.jgit.helper.CookbookHelper;
 import org.eclipse.jgit.lib.ObjectLoader;
 import org.eclipse.jgit.lib.Ref;
 import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
 
 /**
  * Simple snippet which shows how to retrieve a Ref for some reference string.
- *
- * @author dominik.stadler@gmx.at
  */
 public class ReadBlobContents {
 	public static void main(String[] args) throws IOException {
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
 
 		// the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
 		Ref head = repository.getRef("refs/heads/master");
@@ -30,6 +25,16 @@ public class ReadBlobContents {
 		ObjectLoader loader = repository.open(head.getObjectId());
 		loader.copyTo(System.out);
 
+		System.out.println("Print contents of tree of head of master branch, i.e. the latest binary tree information");
+
+		// a commit points to a tree
+		RevWalk walk = new RevWalk(repository);
+		RevCommit commit = walk.parseCommit(head.getObjectId());
+		RevTree tree = walk.parseTree(commit.getTree().getId());
+		System.out.println("Found Tree: " + tree);
+		loader = repository.open(tree.getId());
+		loader.copyTo(System.out);
+
 		repository.close();
 	}
 }
diff --git a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
new file mode 100755
index 0000000..38f3023
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
@@ -0,0 +1,41 @@
+package org.dstadler.jgit.api;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevObject;
+import org.eclipse.jgit.revwalk.RevWalk;
+
+/**
+ * Simple snippet which shows how to use RevWalk to read tags
+ */
+public class ReadTagFromName {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		// a RevWalk allows to retrieve information from the repository
+		RevWalk walk = new RevWalk(repository);
+
+		// a simple tag that is not annotated
+		Ref simpleTag = repository.getRef("initialtag");
+		RevObject any = walk.parseAny(simpleTag.getObjectId());
+		System.out.println("Commit: " + any);
+
+		// an annotated tag
+		Ref annotatedTag = repository.getRef("secondtag");
+		any = walk.parseAny(annotatedTag.getObjectId());
+		System.out.println("Tag: " + any);
+
+		// finally try to print out the tag-content
+		System.out.println("\nTag-Content: \n");
+		ObjectLoader loader = repository.open(annotatedTag.getObjectId());
+		loader.copyTo(System.out);
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/api/ResolveRef.java b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
index 36089f7..f2c74c8 100755
--- a/src/main/java/org/dstadler/jgit/api/ResolveRef.java
+++ b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
@@ -2,27 +2,27 @@ package org.dstadler.jgit.api;
 
 import java.io.IOException;
 
+import org.dstadler.jgit.helper.CookbookHelper;
 import org.eclipse.jgit.lib.ObjectId;
 import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 
 
 
 /**
  * Simple snippet which shows how to retrieve an ObjectId for some name.
- *
- * @author dominik.stadler@gmx.at
  */
 public class ResolveRef {
 	public static void main(String[] args) throws IOException {
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
-
-		ObjectId head = repository.resolve("HEAD");
-		System.out.println("ObjectId of HEAD: " + head);
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		// basic syntax is similar to getRef()
+		ObjectId id = repository.resolve("HEAD");
+		System.out.println("ObjectId of HEAD: " + id);
+
+		// however resolve() supports almost all of the git-syntax, where getRef() only works on names
+		id = repository.resolve("HEAD^1");
+		System.out.println("ObjectId of HEAD: " + id);
+
 		repository.close();
 	}
 }
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
index 3c57a5f..e89be16 100755
--- a/src/main/java/org/dstadler/jgit/api/WalkRev.java
+++ b/src/main/java/org/dstadler/jgit/api/WalkRev.java
@@ -2,26 +2,20 @@ package org.dstadler.jgit.api;
 
 import java.io.IOException;
 
+import org.dstadler.jgit.helper.CookbookHelper;
 import org.eclipse.jgit.lib.Ref;
 import org.eclipse.jgit.lib.Repository;
 import org.eclipse.jgit.revwalk.RevCommit;
 import org.eclipse.jgit.revwalk.RevWalk;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 
 
 
 /**
  * Simple snippet which shows how to use RevWalk to iterate over objects
- *
- * @author dominik.stadler@gmx.at
  */
 public class WalkRev {
 	public static void main(String[] args) throws IOException {
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
 
 		Ref head = repository.getRef("refs/heads/master");
 
diff --git a/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
new file mode 100755
index 0000000..b2cf947
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
@@ -0,0 +1,19 @@
+package org.dstadler.jgit.helper;
+
+import java.io.IOException;
+
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+public class CookbookHelper {
+
+	public static Repository openJGitCookbookRepository() throws IOException {
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+		return repository;
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRepository.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRepository.java
new file mode 100755
index 0000000..b312cdd
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/CloneRepository.java
@@ -0,0 +1,44 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to clone a repository from a remote source
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class CloneRepository {
+	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+		// prepare a new folder for the cloned repository
+		File localPath = File.createTempFile("TestGitRepository", "");
+		localPath.delete();
+
+		// then clone
+		System.out.println("Cloning directory");
+        Git.cloneRepository()
+        .setURI("https://github.com/github/testrepo.git")
+        .setDirectory(localPath)
+        .call();
+
+        // now open the created repository
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder.setGitDir(localPath)
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		System.out.println("Having repository: " + repository.getDirectory());
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
new file mode 100755
index 0000000..cb05d7b
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
@@ -0,0 +1,31 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to list all Tags
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ListTags {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		List<Ref> call = new Git(repository).tagList().call();
+		for(Ref rev : call) {
+			System.out.println("Tag: " + rev);
+		}
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java b/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java
deleted file mode 100755
index e3e56d9..0000000
--- a/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package org.dstadler.jgit.unfinished;
-
-import java.io.IOException;
-import java.util.List;
-
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevObject;
-import org.eclipse.jgit.revwalk.RevTag;
-import org.eclipse.jgit.revwalk.RevWalk;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
-
-/**
- * Simple snippet which shows how to use RevWalk to iterate over objects
- *
- * @author dominik.stadler@gmx.at
- */
-public class GetRevTagFromObjectId {
-
-	public static void main(String[] args) throws IOException, GitAPIException {
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
-
-		List<Ref> call = new Git(repository).tagList().call();
-		for(Ref rev : call) {
-			System.out.println("Tag: " + rev);
-		}
-
-		//Ref head = repository.getRef("refs/tags/initialtag");
-
-		// a RevWalk allows to walk over commits based on some filtering that is defined
-		RevWalk walk = new RevWalk(repository);
-
-		RevObject any = walk.parseAny(call.get(0).getObjectId());
-		System.out.println("Any: " + any);
-
-		RevTag tag = walk.parseTag(call.get(0).getObjectId());
-		System.out.println("Found Tag: " + tag);
-
-		repository.close();
-	}
-}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
index 7480e1e..732f804 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
@@ -2,15 +2,13 @@ package org.dstadler.jgit.unfinished;
 
 import java.io.IOException;
 
+import org.dstadler.jgit.helper.CookbookHelper;
 import org.eclipse.jgit.api.errors.GitAPIException;
 import org.eclipse.jgit.lib.Ref;
 import org.eclipse.jgit.lib.Repository;
 import org.eclipse.jgit.revwalk.RevCommit;
 import org.eclipse.jgit.revwalk.RevTree;
 import org.eclipse.jgit.revwalk.RevWalk;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
 
 /**
  * Simple snippet which shows how to use RevWalk to iterate over objects
@@ -20,11 +18,7 @@ import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 public class WalkTree {
 
 	public static void main(String[] args) throws IOException, GitAPIException {
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
 
 		Ref head = repository.getRef("HEAD");
 

§§--§§
commit 1983de8af824b7813ff61ac9cd67139b398399af 65e0ed3a55c7a2295e7340c1f503e22de36f3081
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Tue May 28 20:48:25 2013 +0200 
Message: More snippets, adjust output in some
---§

diff --git a/src/main/java/org/dstadler/jgit/CreateNewRepository.java b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
index 55136aa..b808199 100755
--- a/src/main/java/org/dstadler/jgit/CreateNewRepository.java
+++ b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
@@ -19,7 +19,7 @@ public class CreateNewRepository {
 		localPath.delete();
 
 		// create the directory
-        Repository repository = new FileRepository(localPath + ".git");
+        Repository repository = new FileRepository(new File(localPath, ".git"));
         repository.create();
 
 		System.out.println("Having repository: " + repository.getDirectory());
diff --git a/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
index b2cf947..951c93b 100755
--- a/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
+++ b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
@@ -1,8 +1,10 @@
 package org.dstadler.jgit.helper;
 
+import java.io.File;
 import java.io.IOException;
 
 import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepository;
 import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 
 
@@ -16,4 +18,16 @@ public class CookbookHelper {
 		  .build();
 		return repository;
 	}
+
+	public static Repository createNewRepository() throws IOException {
+		// prepare a new folder
+		File localPath = File.createTempFile("TestGitRepository", "");
+		localPath.delete();
+
+		// create the directory
+        Repository repository = new FileRepository(localPath + "/.git");
+        repository.create();
+
+        return repository;
+	}
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
new file mode 100755
index 0000000..7e766d1
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
@@ -0,0 +1,38 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to list all Tags
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class AddFile {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		// prepare a new test-repository
+		Repository repository = CookbookHelper.createNewRepository();
+		Git git = new Git(repository);
+
+		// create the file
+        File myfile = new File(repository.getDirectory().getParent(), "testfile");
+        myfile.createNewFile();
+
+        // run the add-call
+        git.add()
+           .addFilepattern("testfile")
+           .call();
+
+        System.out.println("Added file " + myfile + " to repository at " + repository.getDirectory());
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRepository.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
similarity index 82%
rename from src/main/java/org/dstadler/jgit/porcelain/CloneRepository.java
rename to src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
index b312cdd..ade11ba 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CloneRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
@@ -17,16 +17,18 @@ import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
  *
  * @author dominik.stadler@gmx.at
  */
-public class CloneRepository {
+public class CloneRemoteRepository {
+	private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
 	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
 		// prepare a new folder for the cloned repository
 		File localPath = File.createTempFile("TestGitRepository", "");
 		localPath.delete();
 
 		// then clone
-		System.out.println("Cloning directory");
+		System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
         Git.cloneRepository()
-        .setURI("https://github.com/github/testrepo.git")
+        .setURI(REMOTE_URL)
         .setDirectory(localPath)
         .call();
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
new file mode 100755
index 0000000..6a9c09d
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
@@ -0,0 +1,43 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to list all Tags
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class CommitFile {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		// prepare a new test-repository
+		Repository repository = CookbookHelper.createNewRepository();
+		Git git = new Git(repository);
+
+		// create the file
+        File myfile = new File(repository.getDirectory().getParent(), "testfile");
+        myfile.createNewFile();
+
+        // run the add
+        git.add()
+           .addFilepattern("testfile")
+           .call();
+
+        // and then commit the changes
+        git.commit()
+	        .setMessage("Added testfile")
+	        .call();
+
+        System.out.println("Committed file " + myfile + " to repository at " + repository.getDirectory());
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
new file mode 100755
index 0000000..be91bf0
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
@@ -0,0 +1,50 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to clone a repository from a remote source
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class PullFromRemoteRepository {
+	private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
+	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+		// prepare a new folder for the cloned repository
+		File localPath = File.createTempFile("TestGitRepository", "");
+		localPath.delete();
+
+		// then clone
+		System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+        Git.cloneRepository()
+        .setURI(REMOTE_URL)
+        .setDirectory(localPath)
+        .call();
+
+        // now open the created repository
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder.setGitDir(localPath)
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		Git git = new Git(repository);
+        git.pull()
+        .call();
+
+        System.out.println("Pulled from remote repository to local repository at " + repository.getDirectory());
+
+        repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
new file mode 100755
index 0000000..4ad4c8e
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
@@ -0,0 +1,61 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to clone a repository from a remote source
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class PushToRemoteRepository {
+	private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
+	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+		// prepare a new folder for the cloned repository
+		File localPath = File.createTempFile("TestGitRepository", "");
+		localPath.delete();
+
+		// then clone
+		System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+        Git.cloneRepository()
+        .setURI(REMOTE_URL)
+        .setDirectory(localPath)
+        .call();
+
+		// prepare a second folder for the 2nd clone
+		File localPath2 = File.createTempFile("TestGitRepository", "");
+		localPath2.delete();
+
+		// then clone again
+		System.out.println("Cloning from file://" + localPath + " to " + localPath2);
+        Git.cloneRepository()
+        .setURI("file://" + localPath)
+        .setDirectory(localPath2)
+        .call();
+
+        // now open the created repository
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder.setGitDir(localPath2)
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		Git git = new Git(repository);
+		git.push()
+        	.call();
+
+		System.out.println("Pushed from repository: " + repository.getDirectory() + " to remote repository at " + REMOTE_URL);
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
new file mode 100755
index 0000000..696047e
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
@@ -0,0 +1,55 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to clone a repository from a remote source
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class TrackMaster {
+	private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
+	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+		// prepare a new folder for the cloned repository
+		File localPath = File.createTempFile("TestGitRepository", "");
+		localPath.delete();
+
+		// then clone
+		System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+        Git.cloneRepository()
+        .setURI(REMOTE_URL)
+        .setDirectory(localPath)
+        .call();
+
+        // now open the created repository
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder.setGitDir(localPath)
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		Git git = new Git(repository);
+
+		git.branchCreate()
+	        .setName("master")
+	        // ?!? .setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM)
+	        .setStartPoint("origin/master")
+	        .setForce(true)
+	        .call();
+
+        System.out.println("Now tracking master in repository at " + repository.getDirectory() + " from origin/master at " + REMOTE_URL);
+
+        repository.close();
+	}
+}

§§--§§
commit 779e5dd0757c3521f055b8c10fbfcc708d4fce12 1983de8af824b7813ff61ac9cd67139b398399af
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Wed May 29 14:23:30 2013 +0300 
Message: point to snippets from README, add some general information
---§

diff --git a/README.md b/README.md
index 66cf9a4..6d4a80d 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,44 @@
 jgit-cookbook
 =============
 
-Provides examples and code snippets for jgit Java Git implementation
+Provides examples and code snippets for the [JGit](http://wiki.eclipse.org/JGit/) Java Git implementation. 
+
+The JGit framework is rich and diverse, it has two layers, a low-level _api_ and a higher-level set of _porcelain_ commands. 
+
+This project tries to provide a collection of ready-to-run snippets which try to augment the existing [JavaDoc](http://download.eclipse.org/jgit/docs/latest/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide)
+
+#### Currently the following snippets are available
+
+##### General Repository handling
+* [Open an existing repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/OpenRepository.java)
+* [Create a new repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/CreateNewRepository.java)
+
+##### Porcelain commands
+
+* [Add a new file to the index](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/AddFile.java)
+* [Commit a file to an existing repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java)
+* [List all tags in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListTags.java)
+
+* [Clone a remote reppository into a new local directory](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java)
+
+##### Low-level API
+
+* [Get the SHA-1 ref from a name, e.g. refs/heads/master](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetRefFromName.java)
+* [Get the commit-object from a name or a SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java)
+* [Get the tree-object from a commit-object, name or SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java)
+* [Read the contents of a file/blob](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java)
+* [Get the tag-object from a name or a SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java)
+* [Resolve complex references, e.g. HEAD^^ to a SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ResolveRef.java)
+* [Iterate over the commits on a branch](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/WalkRev.java)
+
+#### Sources
+
+The following sources were used to 
+
+* [JGit JavaDoc](http://download.eclipse.org/jgit/docs/latest/apidocs/)
+* [JGit User Guide](http://wiki.eclipse.org/JGit/User_Guide)
+* [JGit related questions on Stackoverflow](http://stackoverflow.com/questions/tagged/jgit)
+
+#### Contribute
+
+Please note that the list of snippets is not yet complete, probably never will. If you are missing things or have suggestions how to improve or add snippets, please either send pull requests or create [issues](https://github.com/centic9/jgit-cookbook/issues).

§§--§§
commit b139e6c5553e18ed1f015b7c3535a55c44bc0444 779e5dd0757c3521f055b8c10fbfcc708d4fce12
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Fri Jun 7 07:40:29 2013 +0200 
Message: add list of snippets that are still missing
---§

diff --git a/README.md b/README.md
index 6d4a80d..73d4497 100644
--- a/README.md
+++ b/README.md
@@ -31,9 +31,14 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [Resolve complex references, e.g. HEAD^^ to a SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ResolveRef.java)
 * [Iterate over the commits on a branch](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/WalkRev.java)
 
+#### Missing snippets
+
+* Iterate all commits of a repository
+* Read file attributes, e.g. executeable state
+
 #### Sources
 
-The following sources were used to 
+The following sources were used to build the snippets
 
 * [JGit JavaDoc](http://download.eclipse.org/jgit/docs/latest/apidocs/)
 * [JGit User Guide](http://wiki.eclipse.org/JGit/User_Guide)

§§--§§
commit 8ec1d15d938d2b7520385b95b9422d6a292f4831 b139e6c5553e18ed1f015b7c3535a55c44bc0444
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Fri Jun 7 14:48:49 2013 +0300 
Message: add build status
---§

diff --git a/README.md b/README.md
index 73d4497..175b06c 100644
--- a/README.md
+++ b/README.md
@@ -1,5 +1,6 @@
 jgit-cookbook
 =============
+[![Build Status](https://buildhive.cloudbees.com/job/centic9/job/jgit-cookbook/badge/icon)](https://buildhive.cloudbees.com/job/centic9/job/jgit-cookbook/)
 
 Provides examples and code snippets for the [JGit](http://wiki.eclipse.org/JGit/) Java Git implementation. 
 

§§--§§
commit dea9b88e46f58f00b26fee7a3a16964cfc1cfac2 8ec1d15d938d2b7520385b95b9422d6a292f4831
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Fri Jun 7 20:56:16 2013 +0300 
Message: add link to sample code
---§

diff --git a/README.md b/README.md
index 175b06c..15975f2 100644
--- a/README.md
+++ b/README.md
@@ -34,7 +34,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 
 #### Missing snippets
 
-* Iterate all commits of a repository
+* Iterate all commits of a repository - https://gerrit.googlesource.com/plugins/branch-network/+log/refs/heads/master/src/main/java/com/googlesource/gerrit/plugins/branchnetwork/data/JGitFacade.java
 * Read file attributes, e.g. executeable state
 
 #### Sources

§§--§§
commit 01101d26e25c295d73f7fbf8eb51890dbe1de6f1 dea9b88e46f58f00b26fee7a3a16964cfc1cfac2
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Sun Jun 16 23:46:40 2013 +0200 
Message: Set source/target to 1.5 to allow generics and for-loop, ignore .settings from Eclipse as well
---§

diff --git a/.gitignore b/.gitignore
index d9f145c..3f7c223 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2,6 +2,7 @@
 target
 .classpath
 .project
+.settings
 
 # Package Files #
 *.jar
diff --git a/pom.xml b/pom.xml
index f3f7a93..1ac360b 100755
--- a/pom.xml
+++ b/pom.xml
@@ -28,4 +28,18 @@
 		<version>2.4</version>
 	</dependency>
   </dependencies>
+
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <version>3.1</version>
+        <configuration>
+          <source>1.5</source>
+          <target>1.5</target>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
 </project>

§§--§§
commit 3fb7a1887b2fe9b17358a3e89f034a062cfba605 01101d26e25c295d73f7fbf8eb51890dbe1de6f1
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon Jun 17 19:04:45 2013 +0200 
Message: Add ListBranches
---§

diff --git a/README.md b/README.md
index 15975f2..b254f72 100644
--- a/README.md
+++ b/README.md
@@ -19,6 +19,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [Add a new file to the index](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/AddFile.java)
 * [Commit a file to an existing repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java)
 * [List all tags in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListTags.java)
+* [List all branches in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java)
 
 * [Clone a remote reppository into a new local directory](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java)
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
new file mode 100644
index 0000000..3dfe805
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
@@ -0,0 +1,31 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to list all Branches in a Git repository
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ListBranches {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		List<Ref> call = new Git(repository).branchList().call();
+		for(Ref rev : call) {
+			System.out.println("Branch: " + rev + " " + rev.getName() + " " + rev.getObjectId().getName());
+		}
+
+		repository.close();
+	}
+}

§§--§§
commit ada52b53122eef6545f5fd225d46f697cde91867 3fb7a1887b2fe9b17358a3e89f034a062cfba605
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon Jun 17 23:36:54 2013 +0200 
Message: Add WalkAllCommits, adjust comments and output^
---§

diff --git a/README.md b/README.md
index b254f72..072e369 100644
--- a/README.md
+++ b/README.md
@@ -20,6 +20,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [Commit a file to an existing repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java)
 * [List all tags in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListTags.java)
 * [List all branches in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java)
+* [List all commits in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java)
 
 * [Clone a remote reppository into a new local directory](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java)
 
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
index e89be16..eabb491 100755
--- a/src/main/java/org/dstadler/jgit/api/WalkRev.java
+++ b/src/main/java/org/dstadler/jgit/api/WalkRev.java
@@ -23,13 +23,16 @@ public class WalkRev {
 		RevWalk walk = new RevWalk(repository);
 
 		RevCommit commit = walk.parseCommit(head.getObjectId());
-		System.out.println("Commit: " + commit);
+		System.out.println("Start-Commit: " + commit);
 
 		System.out.println("Walking all commits starting at HEAD");
 		walk.markStart(commit);
+		int count = 0;
 		for(RevCommit rev : walk) {
 			System.out.println("Commit: " + rev);
+			count++;
 		}
+		System.out.println(count);
 
 		repository.close();
 	}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java b/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
new file mode 100644
index 0000000..d28febb
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
@@ -0,0 +1,33 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRefNameException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+
+
+
+/**
+ * Simple snippet which shows how to use RevWalk to quickly iterate over all available commits, 
+ * not just the ones on the current branch 
+ */
+public class WalkAllCommits {
+	public static void main(String[] args) throws IOException, InvalidRefNameException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		Git git = new Git(repository);
+		Iterable<RevCommit> commits = git.log().all().call();
+		int count = 0;
+		for (RevCommit commit : commits) {
+			System.out.println("LogCommit: " + commit);
+			count++;
+		}
+		System.out.println(count);
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
index 732f804..8a2f9aa 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
@@ -11,7 +11,7 @@ import org.eclipse.jgit.revwalk.RevTree;
 import org.eclipse.jgit.revwalk.RevWalk;
 
 /**
- * Simple snippet which shows how to use RevWalk to iterate over objects
+ * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
  *
  * @author dominik.stadler@gmx.at
  */

§§--§§
commit 95b243037e90117c1a5718edd2cb5057f99ab09b ada52b53122eef6545f5fd225d46f697cde91867
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Tue Jun 18 02:14:21 2013 +0200 
Message: New snippets, updated some existing ones, worked on some unfinshied ones
---§

diff --git a/README.md b/README.md
index 072e369..6402614 100644
--- a/README.md
+++ b/README.md
@@ -33,6 +33,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [Get the tag-object from a name or a SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java)
 * [Resolve complex references, e.g. HEAD^^ to a SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ResolveRef.java)
 * [Iterate over the commits on a branch](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/WalkRev.java)
+* [Read contents of a specific file from a specific commit](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java)
 
 #### Missing snippets
 
diff --git a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
new file mode 100644
index 0000000..8f39bb3
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
@@ -0,0 +1,55 @@
+package org.dstadler.jgit.api;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Constants;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.TreeWalk;
+import org.eclipse.jgit.treewalk.filter.PathFilter;
+
+/**
+ * Snippet which shows how to use RevWalk and TreeWalk to read the contents 
+ * of a specific file from a specific commit.
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ReadFileFromCommit {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		// find the HEAD
+		ObjectId lastCommitId = repository.resolve(Constants.HEAD);
+
+		// a RevWalk allows to walk over commits based on some filtering that is defined
+		RevWalk revWalk = new RevWalk(repository);
+		RevCommit commit = revWalk.parseCommit(lastCommitId);
+		// and using commit's tree find the path
+		RevTree tree = commit.getTree();
+		System.out.println("Having tree: " + tree);
+
+		// now try to find a specific file
+		TreeWalk treeWalk = new TreeWalk(repository);
+		treeWalk.addTree(tree);
+		treeWalk.setRecursive(true);
+		treeWalk.setFilter(PathFilter.create("README.md"));
+		if (!treeWalk.next()) {
+		  throw new IllegalStateException("Did not find expected file 'README.md'");
+		}
+
+		ObjectId objectId = treeWalk.getObjectId(0);
+		ObjectLoader loader = repository.open(objectId);
+
+		// and then one can the loader to read the file
+		loader.copyTo(System.out);
+		
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
index cb05d7b..e7c694c 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
@@ -23,7 +23,7 @@ public class ListTags {
 
 		List<Ref> call = new Git(repository).tagList().call();
 		for(Ref rev : call) {
-			System.out.println("Tag: " + rev);
+			System.out.println("Tag: " + rev + " " + rev.getName() + " " + rev.getObjectId().getName());
 		}
 
 		repository.close();
diff --git a/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java b/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
new file mode 100644
index 0000000..d87bafb
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
@@ -0,0 +1,44 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Constants;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.TreeWalk;
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class BrowseTree {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		ObjectId revId = repository.resolve(Constants.HEAD);
+		TreeWalk treeWalk = new TreeWalk(repository);
+
+		treeWalk.addTree(new RevWalk(repository).parseTree(revId));
+
+		while (treeWalk.next())
+		{
+			System.out.println("---------------------------");
+			System.out.append("name: ").println(treeWalk.getNameString());
+			System.out.append("path: ").println(treeWalk.getPathString());
+
+			ObjectLoader loader = repository.open(treeWalk.getObjectId(0));
+
+			System.out.append("directory: ").println(loader.getType()
+					== Constants.OBJ_TREE);
+			System.out.append("size: ").println(loader.getSize());
+		}
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
new file mode 100644
index 0000000..a24fc34
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
@@ -0,0 +1,46 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.TreeWalk;
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class WalkTreeNonRecursive {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		Ref head = repository.getRef("HEAD");
+
+		// a RevWalk allows to walk over commits based on some filtering that is defined
+		RevWalk walk = new RevWalk(repository);
+
+		RevCommit commit = walk.parseCommit(head.getObjectId());
+		RevTree tree = commit.getTree();
+		System.out.println("Having tree: " + tree);
+
+		// now use a TreeWalk to iterate over all files in the Tree recursively
+		// you can set Filters to narrow down the results if needed
+		TreeWalk treeWalk = new TreeWalk(repository);
+		treeWalk.addTree(tree);
+		treeWalk.setRecursive(false);
+		while(treeWalk.next()) {
+			System.out.println("found: " + treeWalk.getPathString());
+		}
+		
+		
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
similarity index 68%
rename from src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
rename to src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
index 8a2f9aa..b37157b 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
@@ -9,13 +9,14 @@ import org.eclipse.jgit.lib.Repository;
 import org.eclipse.jgit.revwalk.RevCommit;
 import org.eclipse.jgit.revwalk.RevTree;
 import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.TreeWalk;
 
 /**
  * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
  *
  * @author dominik.stadler@gmx.at
  */
-public class WalkTree {
+public class WalkTreeRecursive {
 
 	public static void main(String[] args) throws IOException, GitAPIException {
 		Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -29,7 +30,14 @@ public class WalkTree {
 		RevTree tree = commit.getTree();
 		System.out.println("Having tree: " + tree);
 
-		// TODO: how to look at all files/sub-trees of this Tree now?
+		// now use a TreeWalk to iterate over all files in the Tree recursively
+		// you can set Filters to narrow down the results if needed
+		TreeWalk treeWalk = new TreeWalk(repository);
+		treeWalk.addTree(tree);
+		treeWalk.setRecursive(true);
+		while(treeWalk.next()) {
+			System.out.println("found: " + treeWalk.getPathString());
+		}
 
 		repository.close();
 	}

§§--§§
commit 6bd0faf290078b3e43dd6c6ee46fc4284430d634 95b243037e90117c1a5718edd2cb5057f99ab09b
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Thu Jun 20 15:56:16 2013 +0200 
Message: try to convert to Unix file format and UTF-8 character encoding
---§

diff --git a/pom.xml b/pom.xml
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/CreateNewRepository.java b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/OpenRepository.java b/src/main/java/org/dstadler/jgit/OpenRepository.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
index 8f39bb3..4991745 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
@@ -1,55 +1,55 @@
-package org.dstadler.jgit.api;
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Constants;
-import org.eclipse.jgit.lib.ObjectId;
-import org.eclipse.jgit.lib.ObjectLoader;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevTree;
-import org.eclipse.jgit.revwalk.RevWalk;
-import org.eclipse.jgit.treewalk.TreeWalk;
-import org.eclipse.jgit.treewalk.filter.PathFilter;
-
-/**
- * Snippet which shows how to use RevWalk and TreeWalk to read the contents 
- * of a specific file from a specific commit.
- *
- * @author dominik.stadler@gmx.at
- */
-public class ReadFileFromCommit {
-
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-		// find the HEAD
-		ObjectId lastCommitId = repository.resolve(Constants.HEAD);
-
-		// a RevWalk allows to walk over commits based on some filtering that is defined
-		RevWalk revWalk = new RevWalk(repository);
-		RevCommit commit = revWalk.parseCommit(lastCommitId);
-		// and using commit's tree find the path
-		RevTree tree = commit.getTree();
-		System.out.println("Having tree: " + tree);
-
-		// now try to find a specific file
-		TreeWalk treeWalk = new TreeWalk(repository);
-		treeWalk.addTree(tree);
-		treeWalk.setRecursive(true);
-		treeWalk.setFilter(PathFilter.create("README.md"));
-		if (!treeWalk.next()) {
-		  throw new IllegalStateException("Did not find expected file 'README.md'");
-		}
-
-		ObjectId objectId = treeWalk.getObjectId(0);
-		ObjectLoader loader = repository.open(objectId);
-
-		// and then one can the loader to read the file
-		loader.copyTo(System.out);
-		
-		repository.close();
-	}
-}
+package org.dstadler.jgit.api;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Constants;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.TreeWalk;
+import org.eclipse.jgit.treewalk.filter.PathFilter;
+
+/**
+ * Snippet which shows how to use RevWalk and TreeWalk to read the contents 
+ * of a specific file from a specific commit.
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ReadFileFromCommit {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		// find the HEAD
+		ObjectId lastCommitId = repository.resolve(Constants.HEAD);
+
+		// a RevWalk allows to walk over commits based on some filtering that is defined
+		RevWalk revWalk = new RevWalk(repository);
+		RevCommit commit = revWalk.parseCommit(lastCommitId);
+		// and using commit's tree find the path
+		RevTree tree = commit.getTree();
+		System.out.println("Having tree: " + tree);
+
+		// now try to find a specific file
+		TreeWalk treeWalk = new TreeWalk(repository);
+		treeWalk.addTree(tree);
+		treeWalk.setRecursive(true);
+		treeWalk.setFilter(PathFilter.create("README.md"));
+		if (!treeWalk.next()) {
+		  throw new IllegalStateException("Did not find expected file 'README.md'");
+		}
+
+		ObjectId objectId = treeWalk.getObjectId(0);
+		ObjectLoader loader = repository.open(objectId);
+
+		// and then one can the loader to read the file
+		loader.copyTo(System.out);
+		
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/api/ResolveRef.java b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
index 3dfe805..e847ebd 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
@@ -1,31 +1,31 @@
-package org.dstadler.jgit.porcelain;
-
-import java.io.IOException;
-import java.util.List;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-
-
-
-/**
- * Simple snippet which shows how to list all Branches in a Git repository
- *
- * @author dominik.stadler@gmx.at
- */
-public class ListBranches {
-
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-		List<Ref> call = new Git(repository).branchList().call();
-		for(Ref rev : call) {
-			System.out.println("Branch: " + rev + " " + rev.getName() + " " + rev.getObjectId().getName());
-		}
-
-		repository.close();
-	}
-}
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to list all Branches in a Git repository
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ListBranches {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		List<Ref> call = new Git(repository).branchList().call();
+		for(Ref rev : call) {
+			System.out.println("Branch: " + rev + " " + rev.getName() + " " + rev.getObjectId().getName());
+		}
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java b/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
index d28febb..b703f00 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
@@ -1,33 +1,33 @@
-package org.dstadler.jgit.porcelain;
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.api.errors.InvalidRefNameException;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-
-
-
-/**
- * Simple snippet which shows how to use RevWalk to quickly iterate over all available commits, 
- * not just the ones on the current branch 
- */
-public class WalkAllCommits {
-	public static void main(String[] args) throws IOException, InvalidRefNameException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-		Git git = new Git(repository);
-		Iterable<RevCommit> commits = git.log().all().call();
-		int count = 0;
-		for (RevCommit commit : commits) {
-			System.out.println("LogCommit: " + commit);
-			count++;
-		}
-		System.out.println(count);
-
-		repository.close();
-	}
-}
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRefNameException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+
+
+
+/**
+ * Simple snippet which shows how to use RevWalk to quickly iterate over all available commits, 
+ * not just the ones on the current branch 
+ */
+public class WalkAllCommits {
+	public static void main(String[] args) throws IOException, InvalidRefNameException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		Git git = new Git(repository);
+		Iterable<RevCommit> commits = git.log().all().call();
+		int count = 0;
+		for (RevCommit commit : commits) {
+			System.out.println("LogCommit: " + commit);
+			count++;
+		}
+		System.out.println(count);
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java b/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
index d87bafb..ba70921 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
@@ -1,44 +1,44 @@
-package org.dstadler.jgit.unfinished;
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Constants;
-import org.eclipse.jgit.lib.ObjectId;
-import org.eclipse.jgit.lib.ObjectLoader;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevWalk;
-import org.eclipse.jgit.treewalk.TreeWalk;
-
-/**
- * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
- *
- * @author dominik.stadler@gmx.at
- */
-public class BrowseTree {
-
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-		ObjectId revId = repository.resolve(Constants.HEAD);
-		TreeWalk treeWalk = new TreeWalk(repository);
-
-		treeWalk.addTree(new RevWalk(repository).parseTree(revId));
-
-		while (treeWalk.next())
-		{
-			System.out.println("---------------------------");
-			System.out.append("name: ").println(treeWalk.getNameString());
-			System.out.append("path: ").println(treeWalk.getPathString());
-
-			ObjectLoader loader = repository.open(treeWalk.getObjectId(0));
-
-			System.out.append("directory: ").println(loader.getType()
-					== Constants.OBJ_TREE);
-			System.out.append("size: ").println(loader.getSize());
-		}
-
-		repository.close();
-	}
-}
+package org.dstadler.jgit.unfinished;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Constants;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.TreeWalk;
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class BrowseTree {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		ObjectId revId = repository.resolve(Constants.HEAD);
+		TreeWalk treeWalk = new TreeWalk(repository);
+
+		treeWalk.addTree(new RevWalk(repository).parseTree(revId));
+
+		while (treeWalk.next())
+		{
+			System.out.println("---------------------------");
+			System.out.append("name: ").println(treeWalk.getNameString());
+			System.out.append("path: ").println(treeWalk.getPathString());
+
+			ObjectLoader loader = repository.open(treeWalk.getObjectId(0));
+
+			System.out.append("directory: ").println(loader.getType()
+					== Constants.OBJ_TREE);
+			System.out.append("size: ").println(loader.getSize());
+		}
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
index a24fc34..7a65ea7 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
@@ -1,46 +1,46 @@
-package org.dstadler.jgit.unfinished;
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevTree;
-import org.eclipse.jgit.revwalk.RevWalk;
-import org.eclipse.jgit.treewalk.TreeWalk;
-
-/**
- * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
- *
- * @author dominik.stadler@gmx.at
- */
-public class WalkTreeNonRecursive {
-
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-		Ref head = repository.getRef("HEAD");
-
-		// a RevWalk allows to walk over commits based on some filtering that is defined
-		RevWalk walk = new RevWalk(repository);
-
-		RevCommit commit = walk.parseCommit(head.getObjectId());
-		RevTree tree = commit.getTree();
-		System.out.println("Having tree: " + tree);
-
-		// now use a TreeWalk to iterate over all files in the Tree recursively
-		// you can set Filters to narrow down the results if needed
-		TreeWalk treeWalk = new TreeWalk(repository);
-		treeWalk.addTree(tree);
-		treeWalk.setRecursive(false);
-		while(treeWalk.next()) {
-			System.out.println("found: " + treeWalk.getPathString());
-		}
-		
-		
-
-		repository.close();
-	}
-}
+package org.dstadler.jgit.unfinished;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.TreeWalk;
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class WalkTreeNonRecursive {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		Ref head = repository.getRef("HEAD");
+
+		// a RevWalk allows to walk over commits based on some filtering that is defined
+		RevWalk walk = new RevWalk(repository);
+
+		RevCommit commit = walk.parseCommit(head.getObjectId());
+		RevTree tree = commit.getTree();
+		System.out.println("Having tree: " + tree);
+
+		// now use a TreeWalk to iterate over all files in the Tree recursively
+		// you can set Filters to narrow down the results if needed
+		TreeWalk treeWalk = new TreeWalk(repository);
+		treeWalk.addTree(tree);
+		treeWalk.setRecursive(false);
+		while(treeWalk.next()) {
+			System.out.println("found: " + treeWalk.getPathString());
+		}
+		
+		
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
old mode 100755
new mode 100644

§§--§§
commit 4f05e893cf583dc9e837470ecf65ce89b6258c6b 6bd0faf290078b3e43dd6c6ee46fc4284430d634
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Tue Jun 25 08:29:01 2013 +0200 
Message: Add some new snippets, update some comments
---§

diff --git a/README.md b/README.md
index 6402614..5a89699 100644
--- a/README.md
+++ b/README.md
@@ -16,11 +16,13 @@ This project tries to provide a collection of ready-to-run snippets which try to
 
 ##### Porcelain commands
 
+* [Initialize a new repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java)
 * [Add a new file to the index](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/AddFile.java)
 * [Commit a file to an existing repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java)
 * [List all tags in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListTags.java)
 * [List all branches in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java)
 * [List all commits in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java)
+* [Create and delete branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java)
 
 * [Clone a remote reppository into a new local directory](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java)
 
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
index 7e959e7..f76380a 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
@@ -16,6 +16,7 @@ public class GetRevCommitFromObjectId {
 		Repository repository = CookbookHelper.openJGitCookbookRepository();
 
 		Ref head = repository.getRef("refs/heads/master");
+		System.out.println("Found head: " + head);
 
 		// a RevWalk allows to walk over commits based on some filtering that is defined
 		RevWalk walk = new RevWalk(repository);
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
index 7e766d1..8484fcf 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
@@ -11,7 +11,7 @@ import org.eclipse.jgit.lib.Repository;
 
 
 /**
- * Simple snippet which shows how to list all Tags
+ * Simple snippet which shows how to add a file to the index
  *
  * @author dominik.stadler@gmx.at
  */
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
new file mode 100755
index 0000000..49d5424
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
@@ -0,0 +1,53 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to create and delete branches
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class CreateAndDeleteBranch {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		// prepare a new test-repository
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+		Git git = new Git(repository);
+
+		List<Ref> call = new Git(repository).branchList().call();
+		for(Ref ref : call) {
+			System.out.println("Branch-Before: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+		}
+
+        // run the add-call
+        git.branchCreate()
+			.setName("testbranch")
+			.call();
+
+		call = new Git(repository).branchList().call();
+		for(Ref ref : call) {
+			System.out.println("Branch-Created: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+		}
+
+		// run the delete-call
+		git.branchDelete()
+			.setBranchNames("testbranch")
+			.call();
+
+		call = new Git(repository).branchList().call();
+		for(Ref ref : call) {
+			System.out.println("Branch-After: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+		}
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
new file mode 100755
index 0000000..5f4eaf8
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
@@ -0,0 +1,35 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepository;
+
+
+
+/**
+ * Simple snippet which shows how to initialize a new repository
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class InitRepository {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+        // run the init-call
+        File dir = File.createTempFile("gitinit", ".test");
+        dir.delete();
+
+		Git.init()
+			.setDirectory(dir)
+           .call();
+
+		Repository repository = new FileRepository(dir.getAbsolutePath() + "/.git");
+
+        System.out.println("Created a new repository at " + repository.getDirectory());
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
index e847ebd..eb4d7a6 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
@@ -22,8 +22,8 @@ public class ListBranches {
 		Repository repository = CookbookHelper.openJGitCookbookRepository();
 
 		List<Ref> call = new Git(repository).branchList().call();
-		for(Ref rev : call) {
-			System.out.println("Branch: " + rev + " " + rev.getName() + " " + rev.getObjectId().getName());
+		for(Ref ref : call) {
+			System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
 		}
 
 		repository.close();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
index e7c694c..c3de7ab 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
@@ -22,8 +22,8 @@ public class ListTags {
 		Repository repository = CookbookHelper.openJGitCookbookRepository();
 
 		List<Ref> call = new Git(repository).tagList().call();
-		for(Ref rev : call) {
-			System.out.println("Tag: " + rev + " " + rev.getName() + " " + rev.getObjectId().getName());
+		for(Ref ref : call) {
+			System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
 		}
 
 		repository.close();
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
new file mode 100755
index 0000000..25775b4
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
@@ -0,0 +1,57 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRefNameException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.ReflogEntry;
+
+
+
+/**
+ * Simple snippet which shows how to list all Tags
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ListRefLog {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		List<Ref> refs = new Git(repository).branchList().call();
+		for(Ref ref : refs) {
+			System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+
+			listReflog(repository, ref);
+		}
+
+		List<Ref> call = new Git(repository).tagList().call();
+		for(Ref ref : call) {
+			System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+
+			listReflog(repository, ref);
+		}
+
+		repository.close();
+	}
+
+	private static void listReflog(Repository repository, Ref ref) throws GitAPIException, InvalidRefNameException, IOException {
+		/*Ref head = repository.getRef(ref.getName());
+		RevWalk walk = new RevWalk(repository);
+		RevCommit commit = walk.parseCommit(head.getObjectId());*/
+
+		Collection<ReflogEntry> call = new Git(repository).reflog().setRef(ref.getName()).call();
+		Iterator<ReflogEntry> it = call.iterator();
+		while(it.hasNext()) {
+			ReflogEntry reflog = it.next();
+			System.out.println("Reflog: " + reflog);
+		}
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ShowLog.java b/src/main/java/org/dstadler/jgit/unfinished/ShowLog.java
new file mode 100755
index 0000000..da1dd09
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/ShowLog.java
@@ -0,0 +1,32 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+
+
+
+/**
+ * Simple snippet which shows how to list log entries
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ShowLog {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		Iterable<RevCommit> logs = new Git(repository).log()
+			.all()
+			.call();
+		for(RevCommit rev : logs) {
+			System.out.println("Commit: " + rev + " " + rev.getName() + " " + rev.getId().getName());
+		}
+
+		repository.close();
+	}
+}

§§--§§
commit bddaec0dbda5a617dcff7f9acb290bbf19319420 4f05e893cf583dc9e837470ecf65ce89b6258c6b
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Thu Jul 11 08:56:24 2013 +0200 
Message: Upgrade samples to jgit-3.0.0 from Eclipse Kepler release
---§

diff --git a/pom.xml b/pom.xml
index 1ac360b..6a0539b 100644
--- a/pom.xml
+++ b/pom.xml
@@ -19,7 +19,7 @@
     <dependency>
       <groupId>org.eclipse.jgit</groupId>
       <artifactId>org.eclipse.jgit</artifactId>
-      <version>2.3.1.201302201838-r</version>
+      <version>3.0.0.201306101825-r</version>
     </dependency>
 
 	<dependency>
diff --git a/src/main/java/org/dstadler/jgit/CreateNewRepository.java b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
index b808199..5f00b7c 100644
--- a/src/main/java/org/dstadler/jgit/CreateNewRepository.java
+++ b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
@@ -5,7 +5,7 @@ import java.io.IOException;
 
 import org.apache.commons.io.FileUtils;
 import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 
 /**
  * Simple snippet which shows how to create a new repository
@@ -19,7 +19,7 @@ public class CreateNewRepository {
 		localPath.delete();
 
 		// create the directory
-        Repository repository = new FileRepository(new File(localPath, ".git"));
+        Repository repository = FileRepositoryBuilder.create(new File(localPath, ".git"));
         repository.create();
 
 		System.out.println("Having repository: " + repository.getDirectory());
diff --git a/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
index 951c93b..f8926e0 100644
--- a/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
+++ b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
@@ -4,7 +4,6 @@ import java.io.File;
 import java.io.IOException;
 
 import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepository;
 import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 
 
@@ -25,7 +24,7 @@ public class CookbookHelper {
 		localPath.delete();
 
 		// create the directory
-        Repository repository = new FileRepository(localPath + "/.git");
+        Repository repository = FileRepositoryBuilder.create(new File(localPath, ".git"));
         repository.create();
 
         return repository;
diff --git a/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
index 5f4eaf8..efe214d 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
@@ -6,7 +6,7 @@ import java.io.IOException;
 import org.eclipse.jgit.api.Git;
 import org.eclipse.jgit.api.errors.GitAPIException;
 import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 
 
 
@@ -26,7 +26,7 @@ public class InitRepository {
 			.setDirectory(dir)
            .call();
 
-		Repository repository = new FileRepository(dir.getAbsolutePath() + "/.git");
+		Repository repository = FileRepositoryBuilder.create(new File(dir.getAbsolutePath(), ".git"));
 
         System.out.println("Created a new repository at " + repository.getDirectory());
 
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
index 25775b4..5304d2e 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
@@ -10,8 +10,8 @@ import org.eclipse.jgit.api.Git;
 import org.eclipse.jgit.api.errors.GitAPIException;
 import org.eclipse.jgit.api.errors.InvalidRefNameException;
 import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.ReflogEntry;
 import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.ReflogEntry;
 
 
 

§§--§§
commit ca6072823d770027a2a24fe83ad3b01069348d97 bddaec0dbda5a617dcff7f9acb290bbf19319420
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Thu Jul 11 09:01:24 2013 +0200 
Message: Describe how to build/run the snippets
---§

diff --git a/README.md b/README.md
index 5a89699..80d5a52 100644
--- a/README.md
+++ b/README.md
@@ -8,6 +8,20 @@ The JGit framework is rich and diverse, it has two layers, a low-level _api_ and
 
 This project tries to provide a collection of ready-to-run snippets which try to augment the existing [JavaDoc](http://download.eclipse.org/jgit/docs/latest/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide)
 
+#### Getting started
+
+##### Grab it
+
+    git clone git://github.com/centic9/jgit-cookbook
+
+##### Build it and create Eclipse project files
+
+	mvn dependency:sources eclipse:eclipse package
+
+#### Run it
+
+    Import the project into an Eclipse workspace and execute the snippets there.
+
 #### Currently the following snippets are available
 
 ##### General Repository handling

§§--§§
commit 7ad52f0f27e76548fb107a68bf8948e4fa54401c ca6072823d770027a2a24fe83ad3b01069348d97
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon Jul 15 11:45:59 2013 +0200 
Message: Add snippet for listing remotes
---§

diff --git a/README.md b/README.md
index 80d5a52..b817fb1 100644
--- a/README.md
+++ b/README.md
@@ -50,6 +50,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [Resolve complex references, e.g. HEAD^^ to a SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ResolveRef.java)
 * [Iterate over the commits on a branch](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/WalkRev.java)
 * [Read contents of a specific file from a specific commit](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java)
+* [List remotes configured for the current repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/PrintRemotes.java)
 
 #### Missing snippets
 
diff --git a/src/main/java/org/dstadler/jgit/api/PrintRemotes.java b/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
new file mode 100755
index 0000000..1752bd5
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
@@ -0,0 +1,28 @@
+package org.dstadler.jgit.api;
+
+import java.io.IOException;
+import java.util.Set;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.Config;
+import org.eclipse.jgit.lib.Repository;
+
+/**
+ * Simple snippet which shows how to retrieve the list of remotes from the configuration
+ */
+public class PrintRemotes {
+
+	public static void main(String[] args) throws IOException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		Config storedConfig = repository.getConfig();
+		Set<String> remotes = storedConfig.getSubsections("remote");
+
+		for (String remoteName : remotes) {
+			String url = storedConfig.getString("remote", remoteName, "url");
+			System.out.println(remoteName + " " + url);
+		}
+
+		repository.close();
+	}
+}

§§--§§
commit 936b91c339a6754be573f072897f627d26f75b66 7ad52f0f27e76548fb107a68bf8948e4fa54401c
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon Jul 15 11:49:03 2013 +0200 
Message: Add snippet to access the user config settings
---§

diff --git a/README.md b/README.md
index b817fb1..d54f926 100644
--- a/README.md
+++ b/README.md
@@ -51,6 +51,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [Iterate over the commits on a branch](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/WalkRev.java)
 * [Read contents of a specific file from a specific commit](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java)
 * [List remotes configured for the current repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/PrintRemotes.java)
+* [Print out user information from Git](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java)
 
 #### Missing snippets
 
diff --git a/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java b/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
new file mode 100755
index 0000000..4a33411
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
@@ -0,0 +1,27 @@
+package org.dstadler.jgit.api;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.Config;
+import org.eclipse.jgit.lib.Repository;
+
+/**
+ * Simple snippet which shows how to retrieve the user name and email that is configured in Git.
+ */
+public class ReadUserConfig {
+
+	public static void main(String[] args) throws IOException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		Config config = repository.getConfig();
+		String name = config.getString("user", null, "name");
+		String email = config.getString("user", null, "email");
+		if (name == null || email == null) {
+		        System.out.println("User identity is unknown!");
+		} else {
+		        System.out.println("User identity is " + name + " <" + email + ">");
+		}
+		repository.close();
+	}
+}

§§--§§
commit 99df5aad97ac66e59ece97cede6213643d1349dc 936b91c339a6754be573f072897f627d26f75b66
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Tue Jul 16 12:01:35 2013 +0200 
Message: Add note of unit tests which contain useful snippets
---§

diff --git a/README.md b/README.md
index d54f926..a86264e 100644
--- a/README.md
+++ b/README.md
@@ -57,6 +57,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 
 * Iterate all commits of a repository - https://gerrit.googlesource.com/plugins/branch-network/+log/refs/heads/master/src/main/java/com/googlesource/gerrit/plugins/branchnetwork/data/JGitFacade.java
 * Read file attributes, e.g. executeable state
+* Take some of the unit tests as example: https://github.com/eclipse/jgit/tree/master/org.eclipse.jgit.test/tst/org/eclipse/jgit/api
 
 #### Sources
 

§§--§§
commit ff47f2d901d827ead60f4817f83380c6841e677f 99df5aad97ac66e59ece97cede6213643d1349dc
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Fri Aug 2 10:01:46 2013 +0200 
Message: new unfinished snippet
---§

diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
new file mode 100755
index 0000000..c1540a6
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
@@ -0,0 +1,43 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revplot.PlotCommitList;
+import org.eclipse.jgit.revplot.PlotLane;
+import org.eclipse.jgit.revplot.PlotWalk;
+import org.eclipse.jgit.revwalk.RevCommit;
+
+/**
+ * Snippet which shows how to use RevWalk and TreeWalk to read the contents
+ * of a specific file from a specific commit.
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ListChildrenOfCommit {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		PlotWalk revWalk = new PlotWalk(repository);
+		ObjectId rootId = repository.resolve("refs/heads/master");
+		RevCommit root = revWalk.parseCommit(rootId);
+		revWalk.markStart(root);
+		PlotCommitList<PlotLane> plotCommitList = new PlotCommitList<PlotLane>();
+		plotCommitList.source(revWalk);
+		plotCommitList.fillTo(Integer.MAX_VALUE);
+
+		System.out.println("Printing children of commit " + root);
+		for(RevCommit com : revWalk) {
+			System.out.println("Child: " + com);
+		}
+
+		System.out.println("Printing with next()");
+		System.out.println("next: " + revWalk.next());
+
+		repository.close();
+	}
+}

§§--§§
commit 3d0f9ccab8e2b92c4e19486e9306c6f32d19bcf2 ff47f2d901d827ead60f4817f83380c6841e677f
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Fri Aug 2 10:15:46 2013 +0200 
Message: Add unfinished sample to show how to work with the Index
---§

diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
index c1540a6..287d4a3 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
@@ -12,8 +12,7 @@ import org.eclipse.jgit.revplot.PlotWalk;
 import org.eclipse.jgit.revwalk.RevCommit;
 
 /**
- * Snippet which shows how to use RevWalk and TreeWalk to read the contents
- * of a specific file from a specific commit.
+ * Snippet which shows how to use PlotWalk to read from a specific commit.
  *
  * @author dominik.stadler@gmx.at
  */
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java b/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
new file mode 100755
index 0000000..cf4ebbc
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
@@ -0,0 +1,40 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.dircache.DirCache;
+import org.eclipse.jgit.dircache.DirCacheEntry;
+import org.eclipse.jgit.lib.Repository;
+
+/**
+ * Snippet which shows how to work with the Index
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ListIndex {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		// DirCache contains all files of the repository
+		DirCache index = DirCache.read(repository);
+		System.out.println("DirCache has " + index.getEntryCount() + " items");
+		for(int i = 0; i < index.getEntryCount();i++) {
+			// the number after the AnyObjectId is the "stage", see the constants in DirCacheEntry
+			System.out.println("Item " + i + ": " + index.getEntry(i));
+		}
+
+		//
+		System.out.println("Now printing staged items...");
+		for(int i = 0; i < index.getEntryCount();i++) {
+			DirCacheEntry entry = index.getEntry(i);
+			if(entry.getStage() != DirCacheEntry.STAGE_0) {
+				System.out.println("Item " + i + ": " + entry);
+			}
+		}
+
+		repository.close();
+	}
+}

§§--§§
commit 4d69157a25ad89cdfa51dc1e5dc2ef50b8548145 3d0f9ccab8e2b92c4e19486e9306c6f32d19bcf2
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Fri Aug 2 10:28:30 2013 +0200 
Message: Add snippet for working with Tags
---§

diff --git a/README.md b/README.md
index a86264e..55bb56d 100644
--- a/README.md
+++ b/README.md
@@ -37,6 +37,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [List all branches in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java)
 * [List all commits in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java)
 * [Create and delete branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java)
+* [Create and delete tags](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java)
 
 * [Clone a remote reppository into a new local directory](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java)
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
index 49d5424..155a22f 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
@@ -19,7 +19,7 @@ import org.eclipse.jgit.lib.Repository;
 public class CreateAndDeleteBranch {
 
 	public static void main(String[] args) throws IOException, GitAPIException {
-		// prepare a new test-repository
+		// prepare test-repository
 		Repository repository = CookbookHelper.openJGitCookbookRepository();
 		Git git = new Git(repository);
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
new file mode 100755
index 0000000..7a913ef
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
@@ -0,0 +1,57 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevWalk;
+
+
+
+/**
+ * Simple snippet which shows how to create a tag
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class CreateAndDeleteTag {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		// prepare test-repository
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+		Git git = new Git(repository);
+
+        // remove the tag before creating it
+        git.tagDelete().setTags("tag_for_testing").call();
+
+		// set it on the current HEAD
+		Ref tag = git.tag().setName("tag_for_testing").call();
+        System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
+
+        // remove the tag again
+        git.tagDelete().setTags("tag_for_testing").call();
+
+        // read some other commit and set the tag on it
+        ObjectId id = repository.resolve("HEAD^");
+		RevWalk walk = new RevWalk(repository);
+		RevCommit commit = walk.parseCommit(id);
+		tag = git.tag().setObjectId(commit).setName("tag_for_testing").call();
+        System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
+
+        // remove the tag again
+        git.tagDelete().setTags("tag_for_testing").call();
+
+        // create an annotated tag
+        tag = git.tag().setName("tag_for_testing").setAnnotated(true).call();
+        System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
+
+        // remove the tag again
+        git.tagDelete().setTags("tag_for_testing").call();
+
+        repository.close();
+	}
+}

§§--§§
commit bdc1121a9cb79e17a4fb5cf431301c65d6fb8ed6 4d69157a25ad89cdfa51dc1e5dc2ef50b8548145
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Fri Aug 2 14:43:56 2013 +0200 
Message: Tried to add a Pull-snippet, but failed, see also http://stackoverflow.com/questions/17979660/jgit-pull-noheadexception
---§

diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
new file mode 100755
index 0000000..89a1501
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
@@ -0,0 +1,60 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.PullResult;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.lib.Constants;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to poull from a remote repository from a remote source
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class PullRemoteRepository {
+	private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
+	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+		Repository repository = cloneRepository();
+
+		System.out.println("Having repository: " + repository.getDirectory() + " with head: " +
+				repository.getRef(Constants.HEAD) + "/" + repository.resolve("HEAD") + "/" + repository.resolve("refs/heads/master"));
+
+		// TODO: why do we get null here for HEAD?!? See also http://stackoverflow.com/questions/17979660/jgit-pull-noheadexception
+
+		PullResult call = new Git(repository).pull().call();
+
+		System.out.println("Pulled from the remote repository: " + call);
+
+		repository.close();
+	}
+
+	private static Repository cloneRepository() throws IOException, GitAPIException, InvalidRemoteException, TransportException {
+		// prepare a new folder for the cloned repository
+		File localPath = File.createTempFile("TestGitRepository", "");
+		localPath.delete();
+
+		// then clone
+		System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+        Git.cloneRepository()
+        .setURI(REMOTE_URL)
+        .setDirectory(localPath)
+        .call();
+
+        // now open the created repository
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder.setGitDir(localPath)
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+		return repository;
+	}
+}

§§--§§
commit 54a9901d27162a867e3fdff9d58b0d553ef51aee bdc1121a9cb79e17a4fb5cf431301c65d6fb8ed6
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Fri Aug 2 15:02:33 2013 +0200 
Message: Add snippet for 'git ls-remote'
---§

diff --git a/README.md b/README.md
index 55bb56d..b0321e5 100644
--- a/README.md
+++ b/README.md
@@ -40,6 +40,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [Create and delete tags](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java)
 
 * [Clone a remote reppository into a new local directory](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java)
+* [Iterate remote references like heads and tags](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemoteReferences.java)
 
 ##### Low-level API
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteReferences.java b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteReferences.java
new file mode 100755
index 0000000..890b20c
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteReferences.java
@@ -0,0 +1,42 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+import java.util.Collection;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+
+/**
+ * Snippet which shows how to iterate remotes, i.e. "git ls-remote"
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ListRemoteReferences {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		// all refs
+		Collection<Ref> refs = new Git(repository).lsRemote().call();
+		for(Ref ref : refs) {
+			System.out.println("Ref: " + ref);
+		}
+
+		// heads only
+		refs = new Git(repository).lsRemote().setHeads(true).call();
+		for(Ref ref : refs) {
+			System.out.println("Head: " + ref);
+		}
+
+		// tags only
+		refs = new Git(repository).lsRemote().setTags(true).call();
+		for(Ref ref : refs) {
+			System.out.println("Remote tag: " + ref);
+		}
+
+		repository.close();
+	}
+}

§§--§§
commit 9703d65ac6986eb79811032cf13d35d9da9734cf 54a9901d27162a867e3fdff9d58b0d553ef51aee
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Wed Aug 21 16:25:10 2013 +0200 
Message: Add snippet for reading file attributes
---§

diff --git a/README.md b/README.md
index b0321e5..16da2b3 100644
--- a/README.md
+++ b/README.md
@@ -54,11 +54,11 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [Read contents of a specific file from a specific commit](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java)
 * [List remotes configured for the current repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/PrintRemotes.java)
 * [Print out user information from Git](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java)
+* [Read file attributes, e.g. executeable state, file or directory, size, ...](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java)
 
 #### Missing snippets
 
 * Iterate all commits of a repository - https://gerrit.googlesource.com/plugins/branch-network/+log/refs/heads/master/src/main/java/com/googlesource/gerrit/plugins/branchnetwork/data/JGitFacade.java
-* Read file attributes, e.g. executeable state
 * Take some of the unit tests as example: https://github.com/eclipse/jgit/tree/master/org.eclipse.jgit.test/tst/org/eclipse/jgit/api
 
 #### Sources
diff --git a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
new file mode 100755
index 0000000..ad504b2
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
@@ -0,0 +1,108 @@
+package org.dstadler.jgit.api;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.errors.AmbiguousObjectException;
+import org.eclipse.jgit.errors.CorruptObjectException;
+import org.eclipse.jgit.errors.IncorrectObjectTypeException;
+import org.eclipse.jgit.errors.MissingObjectException;
+import org.eclipse.jgit.lib.Constants;
+import org.eclipse.jgit.lib.FileMode;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.TreeWalk;
+import org.eclipse.jgit.treewalk.filter.PathFilter;
+
+/**
+ * Snippet which shows how to use RevWalk and TreeWalk to read the file
+ * attributes like execution-bit and type of file/directory/...
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class GetFileAttributes {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		// find the Tree for current HEAD
+		RevTree tree = getTree(repository);
+
+		printFile(repository, tree);
+
+		printDirectory(repository, tree);
+
+		// there is also FileMode.SYMLINK for symbolic links, but this is not handled here yet
+
+		repository.close();
+	}
+
+	private static RevTree getTree(Repository repository) throws AmbiguousObjectException, IncorrectObjectTypeException,
+			IOException, MissingObjectException {
+		ObjectId lastCommitId = repository.resolve(Constants.HEAD);
+
+		// a RevWalk allows to walk over commits based on some filtering
+		RevWalk revWalk = new RevWalk(repository);
+		RevCommit commit = revWalk.parseCommit(lastCommitId);
+
+		System.out.println("Time of commit (seconds since epoch): " + commit.getCommitTime());
+
+		// and using commit's tree find the path
+		RevTree tree = commit.getTree();
+		System.out.println("Having tree: " + tree);
+		return tree;
+	}
+
+	private static void printFile(Repository repository, RevTree tree) throws MissingObjectException,
+			IncorrectObjectTypeException, CorruptObjectException, IOException {
+		// now try to find a specific file
+		TreeWalk treeWalk = new TreeWalk(repository);
+		treeWalk.addTree(tree);
+		treeWalk.setRecursive(false);
+		treeWalk.setFilter(PathFilter.create("README.md"));
+		if (!treeWalk.next()) {
+		  throw new IllegalStateException("Did not find expected file 'README.md'");
+		}
+
+		// FileMode specifies the type of file, FileMode.REGULAR_FILE for normal file, FileMode.EXECUTABLE_FILE for executable bit set
+		FileMode fileMode = treeWalk.getFileMode(0);
+		ObjectLoader loader = repository.open(treeWalk.getObjectId(0));
+		System.out.println("README.md: " + getFileMode(fileMode) + ", type: " + fileMode.getObjectType() + ", mode: " + fileMode + " size: " + loader.getSize());
+	}
+
+	private static void printDirectory(Repository repository, RevTree tree) throws MissingObjectException,
+			IncorrectObjectTypeException, CorruptObjectException, IOException {
+		// look at directory, this has FileMode.TREE
+		TreeWalk treeWalk = new TreeWalk(repository);
+		treeWalk.addTree(tree);
+		treeWalk.setRecursive(false);
+		treeWalk.setFilter(PathFilter.create("src"));
+		if (!treeWalk.next()) {
+			  throw new IllegalStateException("Did not find expected file 'README.md'");
+		}
+
+		//  FileMode now indicates that this is a directory, i.e. FileMode.TREE.equals(fileMode) holds true
+		FileMode fileMode = treeWalk.getFileMode(0);
+		System.out.println("src: " + getFileMode(fileMode) + ", type: " + fileMode.getObjectType() + ", mode: " + fileMode);
+	}
+
+	private static String getFileMode(FileMode fileMode) {
+		if(fileMode.equals(FileMode.EXECUTABLE_FILE)) {
+			return "Executable File";
+		} else if(fileMode.equals(FileMode.REGULAR_FILE)) {
+			return "Normal File";
+		} else if(fileMode.equals(FileMode.TREE)) {
+			return "Directory";
+		} else if(fileMode.equals(FileMode.SYMLINK)) {
+			return "Symlink";
+		} else {
+			// there are a few others, see FileMode javadoc for details
+			throw new IllegalArgumentException("Unknown type of file encountered: " + fileMode);
+		}
+	}
+}

§§--§§
commit 09c65401f3730eb3e619c33bf31e2376fb393727 9703d65ac6986eb79811032cf13d35d9da9734cf
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Thu Aug 22 12:31:04 2013 +0200 
Message: Add a snippet that shows how to use DiffCommand
---§

diff --git a/README.md b/README.md
index 16da2b3..b23f1c7 100644
--- a/README.md
+++ b/README.md
@@ -38,6 +38,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [List all commits in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java)
 * [Create and delete branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java)
 * [Create and delete tags](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java)
+* [Return diff between two branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java)
 
 * [Clone a remote reppository into a new local directory](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java)
 * [Iterate remote references like heads and tags](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemoteReferences.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
new file mode 100755
index 0000000..def0c19
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
@@ -0,0 +1,63 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.diff.DiffEntry;
+import org.eclipse.jgit.errors.IncorrectObjectTypeException;
+import org.eclipse.jgit.errors.MissingObjectException;
+import org.eclipse.jgit.lib.ObjectReader;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.AbstractTreeIterator;
+import org.eclipse.jgit.treewalk.CanonicalTreeParser;
+
+
+
+/**
+ * Simple snippet which shows how to show diffs between branches
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ShowBranchDiff {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		// the diff works on TreeIterators, we prepare two for the two branches
+		AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "refs/heads/oldbranch");
+		AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "refs/heads/master");
+
+		// then the procelain diff-command returns a list of diff entries
+		List<DiffEntry> diff = new Git(repository).diff().setOldTree(oldTreeParser).setNewTree(newTreeParser).call();
+		for(DiffEntry entry : diff) {
+			System.out.println("Entry: " + entry);
+		}
+
+		repository.close();
+	}
+
+	private static AbstractTreeIterator prepareTreeParser(Repository repository, String ref) throws IOException, MissingObjectException,
+			IncorrectObjectTypeException {
+		// from the commit we can build the tree which allows us to construct the TreeParser
+		Ref head = repository.getRef(ref);
+		RevWalk walk = new RevWalk(repository);
+		RevCommit commit = walk.parseCommit(head.getObjectId());
+		RevTree tree = walk.parseTree(commit.getTree().getId());
+
+		CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
+		ObjectReader oldReader = repository.newObjectReader();
+		try {
+			oldTreeParser.reset(oldReader, tree.getId());
+		} finally {
+			oldReader.release();
+		}
+		return oldTreeParser;
+	}
+}

§§--§§
commit 8d39bdf523254c2f86c14035c75c1c51d715c9d9 09c65401f3730eb3e619c33bf31e2376fb393727
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Sun Sep 15 20:40:13 2013 +0200 
Message: Add a snippet for listing available Notes
---§

diff --git a/README.md b/README.md
index b23f1c7..374e95a 100644
--- a/README.md
+++ b/README.md
@@ -43,6 +43,8 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [Clone a remote reppository into a new local directory](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java)
 * [Iterate remote references like heads and tags](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemoteReferences.java)
 
+* [List available Notes|](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java)
+
 ##### Low-level API
 
 * [Get the SHA-1 ref from a name, e.g. refs/heads/master](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetRefFromName.java)
@@ -61,6 +63,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 
 * Iterate all commits of a repository - https://gerrit.googlesource.com/plugins/branch-network/+log/refs/heads/master/src/main/java/com/googlesource/gerrit/plugins/branchnetwork/data/JGitFacade.java
 * Take some of the unit tests as example: https://github.com/eclipse/jgit/tree/master/org.eclipse.jgit.test/tst/org/eclipse/jgit/api
+* Add/Remove/Read Notes
 
 #### Sources
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java b/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
new file mode 100644
index 0000000..ffdc2f3
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
@@ -0,0 +1,32 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.notes.Note;
+
+
+
+/**
+ * Simple snippet which shows how to load Notes in a Git repository
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ListNotes {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		List<Note> call = new Git(repository).notesList().call();
+		System.out.println("Listing " + call.size() + " notes");
+		for(Note note : call) {
+			System.out.println("Note: " + note + " " + note.getName() + " " + note.getData().getName());
+		}
+
+		repository.close();
+	}
+}

§§--§§
commit ddd7561cb532f5d9808740f475cbb1aab0a3356d 8d39bdf523254c2f86c14035c75c1c51d715c9d9
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Sun Sep 15 20:42:50 2013 +0200 
Message: fix markup for ListNotes
---§

diff --git a/README.md b/README.md
index 374e95a..e6cc362 100644
--- a/README.md
+++ b/README.md
@@ -43,7 +43,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [Clone a remote reppository into a new local directory](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java)
 * [Iterate remote references like heads and tags](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemoteReferences.java)
 
-* [List available Notes|](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java)
+* [List available Notes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java)
 
 ##### Low-level API
 

§§--§§
commit 14f530427b18b2c64dd5aa95cb3f810f3496a540 ddd7561cb532f5d9808740f475cbb1aab0a3356d
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon Sep 16 08:26:32 2013 +0200 
Message: Add some Todos
---§

diff --git a/README.md b/README.md
index e6cc362..28e71d3 100644
--- a/README.md
+++ b/README.md
@@ -64,6 +64,12 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * Iterate all commits of a repository - https://gerrit.googlesource.com/plugins/branch-network/+log/refs/heads/master/src/main/java/com/googlesource/gerrit/plugins/branchnetwork/data/JGitFacade.java
 * Take some of the unit tests as example: https://github.com/eclipse/jgit/tree/master/org.eclipse.jgit.test/tst/org/eclipse/jgit/api
 * Add/Remove/Read Notes
+* SubModules: http://stackoverflow.com/questions/13426798/jgit-read-gitmodules
+* Diffing: http://stackoverflow.com/questions/12987364/how-to-diff-with-two-files-by-jgit-without-creating-repo
+* Ammend a previous commit: http://stackoverflow.com/questions/4772142/jgit-unstaging-files-removing-files-from-the-index-and-ammending-a-commit
+* Remove a file from the index: http://stackoverflow.com/questions/4803462/jgit-java-git-library-unstaging-files
+* Git repo on Amazon S3: http://stackoverflow.com/questions/8744611/git-repository-on-s3-as-origin-not-as-backup http://stackoverflow.com/questions/7031729/publish-to-s3-using-git http://www.fancybeans.com/blog/2012/08/24/how-to-use-s3-as-a-private-git-repository/
+* Doing stuff without local storage: Using org.eclipse.jgit.storage.dfs.InMemoryRepository to clone a Git repo in-memory and work from there
 
 #### Sources
 

§§--§§
commit 2312c14b71f9b3869993f25c87c0d8e1522a6989 14f530427b18b2c64dd5aa95cb3f810f3496a540
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon Sep 16 09:10:23 2013 +0200 
Message: ListNotes: show how the contents can be read via a blob-read
---§

diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java b/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
index ffdc2f3..13de51a 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
@@ -6,6 +6,7 @@ import java.util.List;
 import org.dstadler.jgit.helper.CookbookHelper;
 import org.eclipse.jgit.api.Git;
 import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.ObjectLoader;
 import org.eclipse.jgit.lib.Repository;
 import org.eclipse.jgit.notes.Note;
 
@@ -24,7 +25,11 @@ public class ListNotes {
 		List<Note> call = new Git(repository).notesList().call();
 		System.out.println("Listing " + call.size() + " notes");
 		for(Note note : call) {
-			System.out.println("Note: " + note + " " + note.getName() + " " + note.getData().getName());
+			System.out.println("Note: " + note + " " + note.getName() + " " + note.getData().getName() + "\nContent: ");
+
+			// displaying the contents of the note is done via a simple blob-read
+			ObjectLoader loader = repository.open(note.getData());
+			loader.copyTo(System.out);
 		}
 
 		repository.close();

§§--§§
commit 97be4ab881639c81deda4cbc07baf0a47903eb4b 2312c14b71f9b3869993f25c87c0d8e1522a6989
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon Sep 30 21:01:11 2013 +0200 
Message: Update to latest JGit 3.0.3 and update README slightly
---§

diff --git a/README.md b/README.md
index 28e71d3..575e651 100644
--- a/README.md
+++ b/README.md
@@ -70,6 +70,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * Remove a file from the index: http://stackoverflow.com/questions/4803462/jgit-java-git-library-unstaging-files
 * Git repo on Amazon S3: http://stackoverflow.com/questions/8744611/git-repository-on-s3-as-origin-not-as-backup http://stackoverflow.com/questions/7031729/publish-to-s3-using-git http://www.fancybeans.com/blog/2012/08/24/how-to-use-s3-as-a-private-git-repository/
 * Doing stuff without local storage: Using org.eclipse.jgit.storage.dfs.InMemoryRepository to clone a Git repo in-memory and work from there
+* Stashes, see http://wiki.eclipse.org/JGit/New_and_Noteworthy/2.0#StashApplyCommand
 
 #### Sources
 
diff --git a/pom.xml b/pom.xml
index 6a0539b..611fd6c 100644
--- a/pom.xml
+++ b/pom.xml
@@ -7,10 +7,11 @@
   <version>1.0-SNAPSHOT</version>
   <name>jgit-cookbook</name>
   <url>http://maven.apache.org</url>
+
   <repositories>
     <repository>
       <id>jgit-repository</id>
-      <url>http://download.eclipse.org/jgit/maven</url>
+      <url>https://repo.eclipse.org/content/groups/releases/</url>
     </repository>
   </repositories>
 
@@ -19,7 +20,7 @@
     <dependency>
       <groupId>org.eclipse.jgit</groupId>
       <artifactId>org.eclipse.jgit</artifactId>
-      <version>3.0.0.201306101825-r</version>
+      <version>3.0.3.201309161630-r</version>
     </dependency>
 
 	<dependency>

§§--§§
commit 1ad10d8e952e5dc9e95eb2974d607a3af821a4a9 97be4ab881639c81deda4cbc07baf0a47903eb4b
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon Oct 28 08:41:14 2013 +0100 
Message: Add ShowLog
---§

diff --git a/README.md b/README.md
index 575e651..b079620 100644
--- a/README.md
+++ b/README.md
@@ -33,6 +33,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [Initialize a new repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java)
 * [Add a new file to the index](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/AddFile.java)
 * [Commit a file to an existing repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java)
+* [List commits (i.e. Log)](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java)
 * [List all tags in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListTags.java)
 * [List all branches in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java)
 * [List all commits in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
new file mode 100755
index 0000000..edd6f17
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
@@ -0,0 +1,57 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+
+
+
+/**
+ * Simple snippet which shows how to get the commit-ids for a file to provide log information.
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ShowLog {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		Iterable<RevCommit> logs = new Git(repository).log()
+				.all()
+				.call();
+		int count = 0;
+		for(RevCommit rev : logs) {
+			System.out.println("Commit: " + rev /*+ ", name: " + rev.getName() + ", id: " + rev.getId().getName()*/);
+			count++;
+		}
+		System.out.println("Had " + count + " commits overall on current branch");
+
+		logs = new Git(repository).log()
+				// for all log.all()
+				.addPath("README.md")
+				.call();
+		count = 0;
+		for(RevCommit rev : logs) {
+			System.out.println("Commit: " + rev /*+ ", name: " + rev.getName() + ", id: " + rev.getId().getName()*/);
+			count++;
+		}
+		System.out.println("Had " + count + " commits on README.md");
+
+		logs = new Git(repository).log()
+			// for all log.all()
+			.addPath("pom.xml")
+			.call();
+		count = 0;
+		for(RevCommit rev : logs) {
+			System.out.println("Commit: " + rev /*+ ", name: " + rev.getName() + ", id: " + rev.getId().getName()*/);
+			count++;
+		}
+		System.out.println("Had " + count + " commits on pom.xml");
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ShowLog.java b/src/main/java/org/dstadler/jgit/unfinished/ShowLog.java
deleted file mode 100755
index da1dd09..0000000
--- a/src/main/java/org/dstadler/jgit/unfinished/ShowLog.java
+++ /dev/null
@@ -1,32 +0,0 @@
-package org.dstadler.jgit.unfinished;
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-
-
-
-/**
- * Simple snippet which shows how to list log entries
- *
- * @author dominik.stadler@gmx.at
- */
-public class ShowLog {
-
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-		Iterable<RevCommit> logs = new Git(repository).log()
-			.all()
-			.call();
-		for(RevCommit rev : logs) {
-			System.out.println("Commit: " + rev + " " + rev.getName() + " " + rev.getId().getName());
-		}
-
-		repository.close();
-	}
-}

§§--§§
commit 2f9eb53592d42003164443567a11d028f0530f52 1ad10d8e952e5dc9e95eb2974d607a3af821a4a9
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Sat Nov 9 11:49:36 2013 +0100 
Message: Update to latest JGit to be able to add snippets for new functionality
---§

diff --git a/pom.xml b/pom.xml
index 611fd6c..331444f 100644
--- a/pom.xml
+++ b/pom.xml
@@ -20,7 +20,7 @@
     <dependency>
       <groupId>org.eclipse.jgit</groupId>
       <artifactId>org.eclipse.jgit</artifactId>
-      <version>3.0.3.201309161630-r</version>
+      <version>3.1.0.201310021548-r</version>
     </dependency>
 
 	<dependency>

§§--§§
commit 62b318658265ec602f3173bbff350f1361d8c8ae 2f9eb53592d42003164443567a11d028f0530f52
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Sat Nov 9 11:49:36 2013 +0100 
Message: Add CreateArchive, ListRemoteRepository, ShowStatus
---§

diff --git a/README.md b/README.md
index b079620..c8c4da0 100644
--- a/README.md
+++ b/README.md
@@ -40,9 +40,12 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [Create and delete branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java)
 * [Create and delete tags](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java)
 * [Return diff between two branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java)
+* [Show Status](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java)
+* [Write contents of branch into an compressed file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java)
 
 * [Clone a remote reppository into a new local directory](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java)
-* [Iterate remote references like heads and tags](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemoteReferences.java)
+* [Iterate remote references in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java)
+* [List remote heads/tags without a local clone](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java)
 
 * [List available Notes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java)
 
@@ -72,6 +75,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * Git repo on Amazon S3: http://stackoverflow.com/questions/8744611/git-repository-on-s3-as-origin-not-as-backup http://stackoverflow.com/questions/7031729/publish-to-s3-using-git http://www.fancybeans.com/blog/2012/08/24/how-to-use-s3-as-a-private-git-repository/
 * Doing stuff without local storage: Using org.eclipse.jgit.storage.dfs.InMemoryRepository to clone a Git repo in-memory and work from there
 * Stashes, see http://wiki.eclipse.org/JGit/New_and_Noteworthy/2.0#StashApplyCommand
+* CherryPick
 
 #### Sources
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
new file mode 100644
index 0000000..6e60a22
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
@@ -0,0 +1,83 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.util.Collections;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipOutputStream;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.ArchiveCommand;
+import org.eclipse.jgit.api.ArchiveCommand.Format;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.FileMode;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to package the contents of a branch into an archive file.
+ * 
+ * @author dominik.stadler@gmx.at
+ */
+public class CreateArchive {
+
+    /**
+     * A custom format for Zip-files, unfortunately JGit does not come with any pre-defined ones
+     */
+    private static final class ZipArchiveFormat implements Format<ZipOutputStream> {
+
+        public ZipOutputStream createArchiveOutputStream(OutputStream s) throws IOException {
+            return new ZipOutputStream(s);
+        }
+
+        public void putEntry(ZipOutputStream out, String path, FileMode mode, ObjectLoader loader) throws IOException {
+            ZipEntry entry = new ZipEntry(path);
+            out.putNextEntry(entry);
+            out.write(loader.getBytes());
+            out.closeEntry();
+        }
+
+        public Iterable<String> suffixes() {
+            return Collections.singleton(".zip");
+        }
+    }
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+
+        File file = File.createTempFile("test", ".zip");
+        try {
+
+            // make the archive format known
+            ArchiveCommand.registerFormat("zip", new ZipArchiveFormat());
+            try {
+                // this is the file that we write the archive to
+                OutputStream out = new FileOutputStream(file);
+                try {
+                    // finally call the ArchiveCommand to write out using the given format
+                    new Git(repository).archive()
+                            .setTree(repository.resolve("master"))
+                            .setFormat("zip")
+                            .setOutputStream(out)
+                            .call();
+                } finally {
+                    out.close();
+                }
+            } finally {
+                ArchiveCommand.unregisterFormat("zip");
+            }
+
+            System.out.println("Wrote " + file.length() + " bytes to " + file);
+        } finally {
+            file.delete();
+        }
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
new file mode 100644
index 0000000..875b761
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
@@ -0,0 +1,36 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+import java.util.Collection;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.lib.Ref;
+
+
+
+/**
+ * Simple snippet which shows how to list heads/tags of remote repositories without 
+ * a local repository
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ListRemoteRepository {
+	private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
+	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+		// then clone
+		System.out.println("Listing remote repository " + REMOTE_URL);
+        Collection<Ref> refs = Git.lsRemoteRepository()
+            .setHeads(true)
+            .setTags(true)
+            .setRemote(REMOTE_URL)
+            .call();
+        
+        for(Ref ref : refs) {
+            System.out.println("Ref: " + ref);
+        }
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteReferences.java b/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java
similarity index 96%
rename from src/main/java/org/dstadler/jgit/porcelain/ListRemoteReferences.java
rename to src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java
index 890b20c..f50b0fa 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteReferences.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java
@@ -14,7 +14,7 @@ import org.eclipse.jgit.lib.Repository;
  *
  * @author dominik.stadler@gmx.at
  */
-public class ListRemoteReferences {
+public class ListRemotes {
 
 	public static void main(String[] args) throws IOException, GitAPIException {
 		Repository repository = CookbookHelper.openJGitCookbookRepository();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java b/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
new file mode 100644
index 0000000..00dccc7
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
@@ -0,0 +1,38 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.Status;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which prints the Status of a git repository, i.e. modified/added/
+ * removed/ignored files, similar to "git status"
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ShowStatus {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		Status status = new Git(repository).status().call();
+		System.out.println("Added: " + status.getAdded());
+        System.out.println("Changed: " + status.getChanged());
+        System.out.println("Conflicting: " + status.getConflicting());
+        System.out.println("ConflictingStageState: " + status.getConflictingStageState());
+        System.out.println("IgnoredNotInIndex: " + status.getIgnoredNotInIndex());
+        System.out.println("Missing: " + status.getMissing());
+        System.out.println("Modified: " + status.getModified());
+        System.out.println("Removed: " + status.getRemoved());
+        System.out.println("Untracked: " + status.getUntracked());
+        System.out.println("UntrackedFolders: " + status.getUntrackedFolders());
+		
+		repository.close();
+	}
+}

§§--§§
commit 685ea854b74e59acd1a1e18cd0ea1e5868fc8723 62b318658265ec602f3173bbff350f1361d8c8ae
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Tue Nov 19 20:57:12 2013 +0100 
Message: Add snippet which shows the BlameCommand
---§

diff --git a/README.md b/README.md
index c8c4da0..d87b551 100644
--- a/README.md
+++ b/README.md
@@ -42,6 +42,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [Return diff between two branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java)
 * [Show Status](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java)
 * [Write contents of branch into an compressed file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java)
+* [Blame, i.e. find out which commit changed specific lines in a file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java)
 
 * [Clone a remote reppository into a new local directory](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java)
 * [Iterate remote references in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
new file mode 100644
index 0000000..17689d1
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
@@ -0,0 +1,78 @@
+package org.dstadler.jgit.porcelain;
+
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+
+import org.apache.commons.io.IOUtils;
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.BlameCommand;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.blame.BlameResult;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.TreeWalk;
+import org.eclipse.jgit.treewalk.filter.PathFilter;
+
+
+
+/**
+ * Simple snippet which shows how to get a diff showing who 
+ * changed which line in a file 
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ShowBlame {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		// prepare a new test-repository
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		BlameCommand blamer = new BlameCommand(repository);
+		ObjectId commitID = repository.resolve("HEAD");
+		blamer.setStartCommit(commitID);
+		blamer.setFilePath("README.md");
+		BlameResult blame = blamer.call();
+		
+		// read the number of lines from the commit to not look at changes in the working copy
+		int lines = countFiles(repository, commitID, "README.md");
+		for(int i = 0 ; i < lines; i++) {
+		    RevCommit commit = blame.getSourceCommit(i);
+		    System.out.println("Line: " + i + ": " + commit);
+		}
+
+        System.out.println("Displayed commits responsible for " + lines + " lines of README.md");
+
+		repository.close();
+	}
+	
+	private static int countFiles(Repository repository, ObjectId commitID, String name) throws IOException {
+        RevWalk revWalk = new RevWalk(repository);
+        RevCommit commit = revWalk.parseCommit(commitID);
+        RevTree tree = commit.getTree();
+        System.out.println("Having tree: " + tree);
+
+        // now try to find a specific file
+        TreeWalk treeWalk = new TreeWalk(repository);
+        treeWalk.addTree(tree);
+        treeWalk.setRecursive(true);
+        treeWalk.setFilter(PathFilter.create(name));
+        if (!treeWalk.next()) {
+          throw new IllegalStateException("Did not find expected file 'README.md'");
+        }
+
+        ObjectId objectId = treeWalk.getObjectId(0);
+        ObjectLoader loader = repository.open(objectId);
+
+        ByteArrayOutputStream stream = new ByteArrayOutputStream();
+        // and then one can the loader to read the file
+        loader.copyTo(stream);
+        
+        return IOUtils.readLines(new ByteArrayInputStream(stream.toByteArray())).size();
+	}
+}

§§--§§
commit 6c49c3c7e09eea30777986540d58e55bb1af39db 685ea854b74e59acd1a1e18cd0ea1e5868fc8723
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Tue Nov 19 21:03:28 2013 +0100 
Message: Reformat and cleanup all source code to make them display nicely in other source viewers, e.g. github
---§

diff --git a/src/main/java/org/dstadler/jgit/CreateNewRepository.java b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
index 5f00b7c..2926354 100644
--- a/src/main/java/org/dstadler/jgit/CreateNewRepository.java
+++ b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
@@ -9,23 +9,24 @@ import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 
 /**
  * Simple snippet which shows how to create a new repository
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class CreateNewRepository {
-	public static void main(String[] args) throws IOException {
-		// prepare a new folder
-		File localPath = File.createTempFile("TestGitRepository", "");
-		localPath.delete();
 
-		// create the directory
+    public static void main(String[] args) throws IOException {
+        // prepare a new folder
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // create the directory
         Repository repository = FileRepositoryBuilder.create(new File(localPath, ".git"));
         repository.create();
 
-		System.out.println("Having repository: " + repository.getDirectory());
+        System.out.println("Having repository: " + repository.getDirectory());
 
-		repository.close();
+        repository.close();
 
-		FileUtils.deleteDirectory(localPath);
-	}
+        FileUtils.deleteDirectory(localPath);
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/OpenRepository.java b/src/main/java/org/dstadler/jgit/OpenRepository.java
index 86bb967..182331a 100644
--- a/src/main/java/org/dstadler/jgit/OpenRepository.java
+++ b/src/main/java/org/dstadler/jgit/OpenRepository.java
@@ -10,19 +10,20 @@ import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 
 /**
  * Simple snippet which shows how to open an existing repository
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class OpenRepository {
-	public static void main(String[] args) throws IOException {
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder.setGitDir(new File("/my/git/directory"))
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
 
-		System.out.println("Having repository: " + repository.getDirectory());
+    public static void main(String[] args) throws IOException {
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder.setGitDir(new File("/my/git/directory"))
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
 
-		repository.close();
-	}
+        System.out.println("Having repository: " + repository.getDirectory());
+
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
index ad504b2..978064b 100755
--- a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
+++ b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
@@ -22,87 +22,89 @@ import org.eclipse.jgit.treewalk.filter.PathFilter;
 /**
  * Snippet which shows how to use RevWalk and TreeWalk to read the file
  * attributes like execution-bit and type of file/directory/...
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class GetFileAttributes {
 
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-		// find the Tree for current HEAD
-		RevTree tree = getTree(repository);
-
-		printFile(repository, tree);
-
-		printDirectory(repository, tree);
-
-		// there is also FileMode.SYMLINK for symbolic links, but this is not handled here yet
-
-		repository.close();
-	}
-
-	private static RevTree getTree(Repository repository) throws AmbiguousObjectException, IncorrectObjectTypeException,
-			IOException, MissingObjectException {
-		ObjectId lastCommitId = repository.resolve(Constants.HEAD);
-
-		// a RevWalk allows to walk over commits based on some filtering
-		RevWalk revWalk = new RevWalk(repository);
-		RevCommit commit = revWalk.parseCommit(lastCommitId);
-
-		System.out.println("Time of commit (seconds since epoch): " + commit.getCommitTime());
-
-		// and using commit's tree find the path
-		RevTree tree = commit.getTree();
-		System.out.println("Having tree: " + tree);
-		return tree;
-	}
-
-	private static void printFile(Repository repository, RevTree tree) throws MissingObjectException,
-			IncorrectObjectTypeException, CorruptObjectException, IOException {
-		// now try to find a specific file
-		TreeWalk treeWalk = new TreeWalk(repository);
-		treeWalk.addTree(tree);
-		treeWalk.setRecursive(false);
-		treeWalk.setFilter(PathFilter.create("README.md"));
-		if (!treeWalk.next()) {
-		  throw new IllegalStateException("Did not find expected file 'README.md'");
-		}
-
-		// FileMode specifies the type of file, FileMode.REGULAR_FILE for normal file, FileMode.EXECUTABLE_FILE for executable bit set
-		FileMode fileMode = treeWalk.getFileMode(0);
-		ObjectLoader loader = repository.open(treeWalk.getObjectId(0));
-		System.out.println("README.md: " + getFileMode(fileMode) + ", type: " + fileMode.getObjectType() + ", mode: " + fileMode + " size: " + loader.getSize());
-	}
-
-	private static void printDirectory(Repository repository, RevTree tree) throws MissingObjectException,
-			IncorrectObjectTypeException, CorruptObjectException, IOException {
-		// look at directory, this has FileMode.TREE
-		TreeWalk treeWalk = new TreeWalk(repository);
-		treeWalk.addTree(tree);
-		treeWalk.setRecursive(false);
-		treeWalk.setFilter(PathFilter.create("src"));
-		if (!treeWalk.next()) {
-			  throw new IllegalStateException("Did not find expected file 'README.md'");
-		}
-
-		//  FileMode now indicates that this is a directory, i.e. FileMode.TREE.equals(fileMode) holds true
-		FileMode fileMode = treeWalk.getFileMode(0);
-		System.out.println("src: " + getFileMode(fileMode) + ", type: " + fileMode.getObjectType() + ", mode: " + fileMode);
-	}
-
-	private static String getFileMode(FileMode fileMode) {
-		if(fileMode.equals(FileMode.EXECUTABLE_FILE)) {
-			return "Executable File";
-		} else if(fileMode.equals(FileMode.REGULAR_FILE)) {
-			return "Normal File";
-		} else if(fileMode.equals(FileMode.TREE)) {
-			return "Directory";
-		} else if(fileMode.equals(FileMode.SYMLINK)) {
-			return "Symlink";
-		} else {
-			// there are a few others, see FileMode javadoc for details
-			throw new IllegalArgumentException("Unknown type of file encountered: " + fileMode);
-		}
-	}
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        // find the Tree for current HEAD
+        RevTree tree = getTree(repository);
+
+        printFile(repository, tree);
+
+        printDirectory(repository, tree);
+
+        // there is also FileMode.SYMLINK for symbolic links, but this is not handled here yet
+
+        repository.close();
+    }
+
+    private static RevTree getTree(Repository repository) throws AmbiguousObjectException, IncorrectObjectTypeException,
+            IOException, MissingObjectException {
+        ObjectId lastCommitId = repository.resolve(Constants.HEAD);
+
+        // a RevWalk allows to walk over commits based on some filtering
+        RevWalk revWalk = new RevWalk(repository);
+        RevCommit commit = revWalk.parseCommit(lastCommitId);
+
+        System.out.println("Time of commit (seconds since epoch): " + commit.getCommitTime());
+
+        // and using commit's tree find the path
+        RevTree tree = commit.getTree();
+        System.out.println("Having tree: " + tree);
+        return tree;
+    }
+
+    private static void printFile(Repository repository, RevTree tree) throws MissingObjectException,
+            IncorrectObjectTypeException, CorruptObjectException, IOException {
+        // now try to find a specific file
+        TreeWalk treeWalk = new TreeWalk(repository);
+        treeWalk.addTree(tree);
+        treeWalk.setRecursive(false);
+        treeWalk.setFilter(PathFilter.create("README.md"));
+        if (!treeWalk.next()) {
+            throw new IllegalStateException("Did not find expected file 'README.md'");
+        }
+
+        // FileMode specifies the type of file, FileMode.REGULAR_FILE for normal file, FileMode.EXECUTABLE_FILE for executable bit
+// set
+        FileMode fileMode = treeWalk.getFileMode(0);
+        ObjectLoader loader = repository.open(treeWalk.getObjectId(0));
+        System.out.println("README.md: " + getFileMode(fileMode) + ", type: " + fileMode.getObjectType() + ", mode: " + fileMode +
+                " size: " + loader.getSize());
+    }
+
+    private static void printDirectory(Repository repository, RevTree tree) throws MissingObjectException,
+            IncorrectObjectTypeException, CorruptObjectException, IOException {
+        // look at directory, this has FileMode.TREE
+        TreeWalk treeWalk = new TreeWalk(repository);
+        treeWalk.addTree(tree);
+        treeWalk.setRecursive(false);
+        treeWalk.setFilter(PathFilter.create("src"));
+        if (!treeWalk.next()) {
+            throw new IllegalStateException("Did not find expected file 'README.md'");
+        }
+
+        // FileMode now indicates that this is a directory, i.e. FileMode.TREE.equals(fileMode) holds true
+        FileMode fileMode = treeWalk.getFileMode(0);
+        System.out.println("src: " + getFileMode(fileMode) + ", type: " + fileMode.getObjectType() + ", mode: " + fileMode);
+    }
+
+    private static String getFileMode(FileMode fileMode) {
+        if (fileMode.equals(FileMode.EXECUTABLE_FILE)) {
+            return "Executable File";
+        } else if (fileMode.equals(FileMode.REGULAR_FILE)) {
+            return "Normal File";
+        } else if (fileMode.equals(FileMode.TREE)) {
+            return "Directory";
+        } else if (fileMode.equals(FileMode.SYMLINK)) {
+            return "Symlink";
+        } else {
+            // there are a few others, see FileMode javadoc for details
+            throw new IllegalArgumentException("Unknown type of file encountered: " + fileMode);
+        }
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
index 9361eb2..95be7df 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
@@ -10,13 +10,14 @@ import org.eclipse.jgit.lib.Repository;
  * Simple snippet which shows how to retrieve a Ref for some reference string.
  */
 public class GetRefFromName {
-	public static void main(String[] args) throws IOException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
 
-		// the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
-		Ref head = repository.getRef("refs/heads/master");
-		System.out.println("Ref of refs/heads/master: " + head);
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
 
-		repository.close();
-	}
+        // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
+        Ref head = repository.getRef("refs/heads/master");
+        System.out.println("Ref of refs/heads/master: " + head);
+
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
index f76380a..a0ce2ef 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
@@ -12,17 +12,18 @@ import org.eclipse.jgit.revwalk.RevWalk;
  * Simple snippet which shows how to use RevWalk to iterate over objects
  */
 public class GetRevCommitFromObjectId {
-	public static void main(String[] args) throws IOException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
 
-		Ref head = repository.getRef("refs/heads/master");
-		System.out.println("Found head: " + head);
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
 
-		// a RevWalk allows to walk over commits based on some filtering that is defined
-		RevWalk walk = new RevWalk(repository);
-		RevCommit commit = walk.parseCommit(head.getObjectId());
-		System.out.println("Found Commit: " + commit);
+        Ref head = repository.getRef("refs/heads/master");
+        System.out.println("Found head: " + head);
 
-		repository.close();
-	}
+        // a RevWalk allows to walk over commits based on some filtering that is defined
+        RevWalk walk = new RevWalk(repository);
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        System.out.println("Found Commit: " + commit);
+
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
index 84759b8..3a1ffd9 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
@@ -15,21 +15,21 @@ import org.eclipse.jgit.revwalk.RevWalk;
  */
 public class GetRevTreeFromObjectId {
 
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
 
-		Ref head = repository.getRef("HEAD");
+        Ref head = repository.getRef("HEAD");
 
-		// a RevWalk allows to walk over commits based on some filtering that is defined
-		RevWalk walk = new RevWalk(repository);
+        // a RevWalk allows to walk over commits based on some filtering that is defined
+        RevWalk walk = new RevWalk(repository);
 
-		RevCommit commit = walk.parseCommit(head.getObjectId());
-		System.out.println("Commit: " + commit);
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        System.out.println("Commit: " + commit);
 
-		// a commit points to a tree
-		RevTree tree = walk.parseTree(commit.getTree().getId());
-		System.out.println("Found Tree: " + tree);
+        // a commit points to a tree
+        RevTree tree = walk.parseTree(commit.getTree().getId());
+        System.out.println("Found Tree: " + tree);
 
-		repository.close();
-	}
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/PrintRemotes.java b/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
index 1752bd5..db81d6d 100755
--- a/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
+++ b/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
@@ -12,17 +12,17 @@ import org.eclipse.jgit.lib.Repository;
  */
 public class PrintRemotes {
 
-	public static void main(String[] args) throws IOException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
 
-		Config storedConfig = repository.getConfig();
-		Set<String> remotes = storedConfig.getSubsections("remote");
+        Config storedConfig = repository.getConfig();
+        Set<String> remotes = storedConfig.getSubsections("remote");
 
-		for (String remoteName : remotes) {
-			String url = storedConfig.getString("remote", remoteName, "url");
-			System.out.println(remoteName + " " + url);
-		}
+        for (String remoteName : remotes) {
+            String url = storedConfig.getString("remote", remoteName, "url");
+            System.out.println(remoteName + " " + url);
+        }
 
-		repository.close();
-	}
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
index 181d0f8..fe0f238 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
@@ -14,27 +14,28 @@ import org.eclipse.jgit.revwalk.RevWalk;
  * Simple snippet which shows how to retrieve a Ref for some reference string.
  */
 public class ReadBlobContents {
-	public static void main(String[] args) throws IOException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
 
-		// the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
-		Ref head = repository.getRef("refs/heads/master");
-		System.out.println("Ref of refs/heads/master: " + head);
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
 
-		System.out.println("Print contents of head of master branch, i.e. the latest commit information");
-		ObjectLoader loader = repository.open(head.getObjectId());
-		loader.copyTo(System.out);
+        // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
+        Ref head = repository.getRef("refs/heads/master");
+        System.out.println("Ref of refs/heads/master: " + head);
 
-		System.out.println("Print contents of tree of head of master branch, i.e. the latest binary tree information");
+        System.out.println("Print contents of head of master branch, i.e. the latest commit information");
+        ObjectLoader loader = repository.open(head.getObjectId());
+        loader.copyTo(System.out);
 
-		// a commit points to a tree
-		RevWalk walk = new RevWalk(repository);
-		RevCommit commit = walk.parseCommit(head.getObjectId());
-		RevTree tree = walk.parseTree(commit.getTree().getId());
-		System.out.println("Found Tree: " + tree);
-		loader = repository.open(tree.getId());
-		loader.copyTo(System.out);
+        System.out.println("Print contents of tree of head of master branch, i.e. the latest binary tree information");
 
-		repository.close();
-	}
+        // a commit points to a tree
+        RevWalk walk = new RevWalk(repository);
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        RevTree tree = walk.parseTree(commit.getTree().getId());
+        System.out.println("Found Tree: " + tree);
+        loader = repository.open(tree.getId());
+        loader.copyTo(System.out);
+
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
index 4991745..074f4a2 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
@@ -15,41 +15,41 @@ import org.eclipse.jgit.treewalk.TreeWalk;
 import org.eclipse.jgit.treewalk.filter.PathFilter;
 
 /**
- * Snippet which shows how to use RevWalk and TreeWalk to read the contents 
+ * Snippet which shows how to use RevWalk and TreeWalk to read the contents
  * of a specific file from a specific commit.
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class ReadFileFromCommit {
 
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-		// find the HEAD
-		ObjectId lastCommitId = repository.resolve(Constants.HEAD);
-
-		// a RevWalk allows to walk over commits based on some filtering that is defined
-		RevWalk revWalk = new RevWalk(repository);
-		RevCommit commit = revWalk.parseCommit(lastCommitId);
-		// and using commit's tree find the path
-		RevTree tree = commit.getTree();
-		System.out.println("Having tree: " + tree);
-
-		// now try to find a specific file
-		TreeWalk treeWalk = new TreeWalk(repository);
-		treeWalk.addTree(tree);
-		treeWalk.setRecursive(true);
-		treeWalk.setFilter(PathFilter.create("README.md"));
-		if (!treeWalk.next()) {
-		  throw new IllegalStateException("Did not find expected file 'README.md'");
-		}
-
-		ObjectId objectId = treeWalk.getObjectId(0);
-		ObjectLoader loader = repository.open(objectId);
-
-		// and then one can the loader to read the file
-		loader.copyTo(System.out);
-		
-		repository.close();
-	}
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        // find the HEAD
+        ObjectId lastCommitId = repository.resolve(Constants.HEAD);
+
+        // a RevWalk allows to walk over commits based on some filtering that is defined
+        RevWalk revWalk = new RevWalk(repository);
+        RevCommit commit = revWalk.parseCommit(lastCommitId);
+        // and using commit's tree find the path
+        RevTree tree = commit.getTree();
+        System.out.println("Having tree: " + tree);
+
+        // now try to find a specific file
+        TreeWalk treeWalk = new TreeWalk(repository);
+        treeWalk.addTree(tree);
+        treeWalk.setRecursive(true);
+        treeWalk.setFilter(PathFilter.create("README.md"));
+        if (!treeWalk.next()) {
+            throw new IllegalStateException("Did not find expected file 'README.md'");
+        }
+
+        ObjectId objectId = treeWalk.getObjectId(0);
+        ObjectLoader loader = repository.open(objectId);
+
+        // and then one can the loader to read the file
+        loader.copyTo(System.out);
+
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
index 38f3023..2467038 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
@@ -15,27 +15,27 @@ import org.eclipse.jgit.revwalk.RevWalk;
  */
 public class ReadTagFromName {
 
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
 
-		// a RevWalk allows to retrieve information from the repository
-		RevWalk walk = new RevWalk(repository);
+        // a RevWalk allows to retrieve information from the repository
+        RevWalk walk = new RevWalk(repository);
 
-		// a simple tag that is not annotated
-		Ref simpleTag = repository.getRef("initialtag");
-		RevObject any = walk.parseAny(simpleTag.getObjectId());
-		System.out.println("Commit: " + any);
+        // a simple tag that is not annotated
+        Ref simpleTag = repository.getRef("initialtag");
+        RevObject any = walk.parseAny(simpleTag.getObjectId());
+        System.out.println("Commit: " + any);
 
-		// an annotated tag
-		Ref annotatedTag = repository.getRef("secondtag");
-		any = walk.parseAny(annotatedTag.getObjectId());
-		System.out.println("Tag: " + any);
+        // an annotated tag
+        Ref annotatedTag = repository.getRef("secondtag");
+        any = walk.parseAny(annotatedTag.getObjectId());
+        System.out.println("Tag: " + any);
 
-		// finally try to print out the tag-content
-		System.out.println("\nTag-Content: \n");
-		ObjectLoader loader = repository.open(annotatedTag.getObjectId());
-		loader.copyTo(System.out);
+        // finally try to print out the tag-content
+        System.out.println("\nTag-Content: \n");
+        ObjectLoader loader = repository.open(annotatedTag.getObjectId());
+        loader.copyTo(System.out);
 
-		repository.close();
-	}
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java b/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
index 4a33411..b7a1524 100755
--- a/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
@@ -11,17 +11,17 @@ import org.eclipse.jgit.lib.Repository;
  */
 public class ReadUserConfig {
 
-	public static void main(String[] args) throws IOException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
 
-		Config config = repository.getConfig();
-		String name = config.getString("user", null, "name");
-		String email = config.getString("user", null, "email");
-		if (name == null || email == null) {
-		        System.out.println("User identity is unknown!");
-		} else {
-		        System.out.println("User identity is " + name + " <" + email + ">");
-		}
-		repository.close();
-	}
+        Config config = repository.getConfig();
+        String name = config.getString("user", null, "name");
+        String email = config.getString("user", null, "email");
+        if (name == null || email == null) {
+            System.out.println("User identity is unknown!");
+        } else {
+            System.out.println("User identity is " + name + " <" + email + ">");
+        }
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/ResolveRef.java b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
index f2c74c8..e3d4a13 100644
--- a/src/main/java/org/dstadler/jgit/api/ResolveRef.java
+++ b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
@@ -12,17 +12,18 @@ import org.eclipse.jgit.lib.Repository;
  * Simple snippet which shows how to retrieve an ObjectId for some name.
  */
 public class ResolveRef {
-	public static void main(String[] args) throws IOException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
 
-		// basic syntax is similar to getRef()
-		ObjectId id = repository.resolve("HEAD");
-		System.out.println("ObjectId of HEAD: " + id);
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
 
-		// however resolve() supports almost all of the git-syntax, where getRef() only works on names
-		id = repository.resolve("HEAD^1");
-		System.out.println("ObjectId of HEAD: " + id);
+        // basic syntax is similar to getRef()
+        ObjectId id = repository.resolve("HEAD");
+        System.out.println("ObjectId of HEAD: " + id);
 
-		repository.close();
-	}
+        // however resolve() supports almost all of the git-syntax, where getRef() only works on names
+        id = repository.resolve("HEAD^1");
+        System.out.println("ObjectId of HEAD: " + id);
+
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
index eabb491..726ca5a 100644
--- a/src/main/java/org/dstadler/jgit/api/WalkRev.java
+++ b/src/main/java/org/dstadler/jgit/api/WalkRev.java
@@ -14,26 +14,27 @@ import org.eclipse.jgit.revwalk.RevWalk;
  * Simple snippet which shows how to use RevWalk to iterate over objects
  */
 public class WalkRev {
-	public static void main(String[] args) throws IOException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
 
-		Ref head = repository.getRef("refs/heads/master");
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
 
-		// a RevWalk allows to walk over commits based on some filtering that is defined
-		RevWalk walk = new RevWalk(repository);
+        Ref head = repository.getRef("refs/heads/master");
 
-		RevCommit commit = walk.parseCommit(head.getObjectId());
-		System.out.println("Start-Commit: " + commit);
+        // a RevWalk allows to walk over commits based on some filtering that is defined
+        RevWalk walk = new RevWalk(repository);
 
-		System.out.println("Walking all commits starting at HEAD");
-		walk.markStart(commit);
-		int count = 0;
-		for(RevCommit rev : walk) {
-			System.out.println("Commit: " + rev);
-			count++;
-		}
-		System.out.println(count);
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        System.out.println("Start-Commit: " + commit);
 
-		repository.close();
-	}
+        System.out.println("Walking all commits starting at HEAD");
+        walk.markStart(commit);
+        int count = 0;
+        for (RevCommit rev : walk) {
+            System.out.println("Commit: " + rev);
+            count++;
+        }
+        System.out.println(count);
+
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
index f8926e0..2dcd1a9 100644
--- a/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
+++ b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
@@ -9,24 +9,24 @@ import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 
 public class CookbookHelper {
 
-	public static Repository openJGitCookbookRepository() throws IOException {
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
-		return repository;
-	}
-
-	public static Repository createNewRepository() throws IOException {
-		// prepare a new folder
-		File localPath = File.createTempFile("TestGitRepository", "");
-		localPath.delete();
-
-		// create the directory
+    public static Repository openJGitCookbookRepository() throws IOException {
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
+        return repository;
+    }
+
+    public static Repository createNewRepository() throws IOException {
+        // prepare a new folder
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // create the directory
         Repository repository = FileRepositoryBuilder.create(new File(localPath, ".git"));
         repository.create();
 
         return repository;
-	}
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
index 8484fcf..c303f6e 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
@@ -12,27 +12,27 @@ import org.eclipse.jgit.lib.Repository;
 
 /**
  * Simple snippet which shows how to add a file to the index
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class AddFile {
 
-	public static void main(String[] args) throws IOException, GitAPIException {
-		// prepare a new test-repository
-		Repository repository = CookbookHelper.createNewRepository();
-		Git git = new Git(repository);
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare a new test-repository
+        Repository repository = CookbookHelper.createNewRepository();
+        Git git = new Git(repository);
 
-		// create the file
+        // create the file
         File myfile = new File(repository.getDirectory().getParent(), "testfile");
         myfile.createNewFile();
 
         // run the add-call
         git.add()
-           .addFilepattern("testfile")
-           .call();
+                .addFilepattern("testfile")
+                .call();
 
         System.out.println("Added file " + myfile + " to repository at " + repository.getDirectory());
 
-		repository.close();
-	}
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
index ade11ba..f1ddedf 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
@@ -14,33 +14,34 @@ import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 
 /**
  * Simple snippet which shows how to clone a repository from a remote source
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class CloneRemoteRepository {
-	private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
 
-	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-		// prepare a new folder for the cloned repository
-		File localPath = File.createTempFile("TestGitRepository", "");
-		localPath.delete();
+    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
 
-		// then clone
-		System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        // prepare a new folder for the cloned repository
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // then clone
+        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
         Git.cloneRepository()
-        .setURI(REMOTE_URL)
-        .setDirectory(localPath)
-        .call();
+                .setURI(REMOTE_URL)
+                .setDirectory(localPath)
+                .call();
 
         // now open the created repository
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder.setGitDir(localPath)
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder.setGitDir(localPath)
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
 
-		System.out.println("Having repository: " + repository.getDirectory());
+        System.out.println("Having repository: " + repository.getDirectory());
 
-		repository.close();
-	}
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
index 6a9c09d..87fab90 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
@@ -12,32 +12,32 @@ import org.eclipse.jgit.lib.Repository;
 
 /**
  * Simple snippet which shows how to list all Tags
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class CommitFile {
 
-	public static void main(String[] args) throws IOException, GitAPIException {
-		// prepare a new test-repository
-		Repository repository = CookbookHelper.createNewRepository();
-		Git git = new Git(repository);
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare a new test-repository
+        Repository repository = CookbookHelper.createNewRepository();
+        Git git = new Git(repository);
 
-		// create the file
+        // create the file
         File myfile = new File(repository.getDirectory().getParent(), "testfile");
         myfile.createNewFile();
 
         // run the add
         git.add()
-           .addFilepattern("testfile")
-           .call();
+                .addFilepattern("testfile")
+                .call();
 
         // and then commit the changes
         git.commit()
-	        .setMessage("Added testfile")
-	        .call();
+                .setMessage("Added testfile")
+                .call();
 
         System.out.println("Committed file " + myfile + " to repository at " + repository.getDirectory());
 
-		repository.close();
-	}
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
index 155a22f..6b9d58a 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
@@ -13,41 +13,41 @@ import org.eclipse.jgit.lib.Repository;
 
 /**
  * Simple snippet which shows how to create and delete branches
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class CreateAndDeleteBranch {
 
-	public static void main(String[] args) throws IOException, GitAPIException {
-		// prepare test-repository
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
-		Git git = new Git(repository);
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare test-repository
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+        Git git = new Git(repository);
 
-		List<Ref> call = new Git(repository).branchList().call();
-		for(Ref ref : call) {
-			System.out.println("Branch-Before: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-		}
+        List<Ref> call = new Git(repository).branchList().call();
+        for (Ref ref : call) {
+            System.out.println("Branch-Before: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        }
 
         // run the add-call
         git.branchCreate()
-			.setName("testbranch")
-			.call();
-
-		call = new Git(repository).branchList().call();
-		for(Ref ref : call) {
-			System.out.println("Branch-Created: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-		}
-
-		// run the delete-call
-		git.branchDelete()
-			.setBranchNames("testbranch")
-			.call();
-
-		call = new Git(repository).branchList().call();
-		for(Ref ref : call) {
-			System.out.println("Branch-After: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-		}
-
-		repository.close();
-	}
+                .setName("testbranch")
+                .call();
+
+        call = new Git(repository).branchList().call();
+        for (Ref ref : call) {
+            System.out.println("Branch-Created: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        }
+
+        // run the delete-call
+        git.branchDelete()
+                .setBranchNames("testbranch")
+                .call();
+
+        call = new Git(repository).branchList().call();
+        for (Ref ref : call) {
+            System.out.println("Branch-After: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        }
+
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
index 7a913ef..53570a5 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
@@ -15,21 +15,21 @@ import org.eclipse.jgit.revwalk.RevWalk;
 
 /**
  * Simple snippet which shows how to create a tag
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class CreateAndDeleteTag {
 
-	public static void main(String[] args) throws IOException, GitAPIException {
-		// prepare test-repository
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
-		Git git = new Git(repository);
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare test-repository
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+        Git git = new Git(repository);
 
         // remove the tag before creating it
         git.tagDelete().setTags("tag_for_testing").call();
 
-		// set it on the current HEAD
-		Ref tag = git.tag().setName("tag_for_testing").call();
+        // set it on the current HEAD
+        Ref tag = git.tag().setName("tag_for_testing").call();
         System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
 
         // remove the tag again
@@ -37,9 +37,9 @@ public class CreateAndDeleteTag {
 
         // read some other commit and set the tag on it
         ObjectId id = repository.resolve("HEAD^");
-		RevWalk walk = new RevWalk(repository);
-		RevCommit commit = walk.parseCommit(id);
-		tag = git.tag().setObjectId(commit).setName("tag_for_testing").call();
+        RevWalk walk = new RevWalk(repository);
+        RevCommit commit = walk.parseCommit(id);
+        tag = git.tag().setObjectId(commit).setName("tag_for_testing").call();
         System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
 
         // remove the tag again
@@ -53,5 +53,5 @@ public class CreateAndDeleteTag {
         git.tagDelete().setTags("tag_for_testing").call();
 
         repository.close();
-	}
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
index efe214d..520d248 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
@@ -12,24 +12,24 @@ import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 
 /**
  * Simple snippet which shows how to initialize a new repository
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class InitRepository {
 
-	public static void main(String[] args) throws IOException, GitAPIException {
+    public static void main(String[] args) throws IOException, GitAPIException {
         // run the init-call
         File dir = File.createTempFile("gitinit", ".test");
         dir.delete();
 
-		Git.init()
-			.setDirectory(dir)
-           .call();
+        Git.init()
+                .setDirectory(dir)
+                .call();
 
-		Repository repository = FileRepositoryBuilder.create(new File(dir.getAbsolutePath(), ".git"));
+        Repository repository = FileRepositoryBuilder.create(new File(dir.getAbsolutePath(), ".git"));
 
         System.out.println("Created a new repository at " + repository.getDirectory());
 
-		repository.close();
-	}
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
index eb4d7a6..78f2670 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
@@ -13,19 +13,19 @@ import org.eclipse.jgit.lib.Repository;
 
 /**
  * Simple snippet which shows how to list all Branches in a Git repository
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class ListBranches {
 
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
 
-		List<Ref> call = new Git(repository).branchList().call();
-		for(Ref ref : call) {
-			System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-		}
+        List<Ref> call = new Git(repository).branchList().call();
+        for (Ref ref : call) {
+            System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        }
 
-		repository.close();
-	}
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java b/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
index 13de51a..8dfcdd3 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
@@ -14,24 +14,24 @@ import org.eclipse.jgit.notes.Note;
 
 /**
  * Simple snippet which shows how to load Notes in a Git repository
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class ListNotes {
 
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
 
-		List<Note> call = new Git(repository).notesList().call();
-		System.out.println("Listing " + call.size() + " notes");
-		for(Note note : call) {
-			System.out.println("Note: " + note + " " + note.getName() + " " + note.getData().getName() + "\nContent: ");
+        List<Note> call = new Git(repository).notesList().call();
+        System.out.println("Listing " + call.size() + " notes");
+        for (Note note : call) {
+            System.out.println("Note: " + note + " " + note.getName() + " " + note.getData().getName() + "\nContent: ");
 
-			// displaying the contents of the note is done via a simple blob-read
-			ObjectLoader loader = repository.open(note.getData());
-			loader.copyTo(System.out);
-		}
+            // displaying the contents of the note is done via a simple blob-read
+            ObjectLoader loader = repository.open(note.getData());
+            loader.copyTo(System.out);
+        }
 
-		repository.close();
-	}
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
index 875b761..8dc7465 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
@@ -12,25 +12,26 @@ import org.eclipse.jgit.lib.Ref;
 
 
 /**
- * Simple snippet which shows how to list heads/tags of remote repositories without 
+ * Simple snippet which shows how to list heads/tags of remote repositories without
  * a local repository
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class ListRemoteRepository {
-	private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
 
-	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-		// then clone
-		System.out.println("Listing remote repository " + REMOTE_URL);
+    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        // then clone
+        System.out.println("Listing remote repository " + REMOTE_URL);
         Collection<Ref> refs = Git.lsRemoteRepository()
-            .setHeads(true)
-            .setTags(true)
-            .setRemote(REMOTE_URL)
-            .call();
-        
-        for(Ref ref : refs) {
+                .setHeads(true)
+                .setTags(true)
+                .setRemote(REMOTE_URL)
+                .call();
+
+        for (Ref ref : refs) {
             System.out.println("Ref: " + ref);
         }
-	}
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java b/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java
index f50b0fa..7b8367c 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java
@@ -11,32 +11,32 @@ import org.eclipse.jgit.lib.Repository;
 
 /**
  * Snippet which shows how to iterate remotes, i.e. "git ls-remote"
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class ListRemotes {
 
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-		// all refs
-		Collection<Ref> refs = new Git(repository).lsRemote().call();
-		for(Ref ref : refs) {
-			System.out.println("Ref: " + ref);
-		}
-
-		// heads only
-		refs = new Git(repository).lsRemote().setHeads(true).call();
-		for(Ref ref : refs) {
-			System.out.println("Head: " + ref);
-		}
-
-		// tags only
-		refs = new Git(repository).lsRemote().setTags(true).call();
-		for(Ref ref : refs) {
-			System.out.println("Remote tag: " + ref);
-		}
-
-		repository.close();
-	}
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        // all refs
+        Collection<Ref> refs = new Git(repository).lsRemote().call();
+        for (Ref ref : refs) {
+            System.out.println("Ref: " + ref);
+        }
+
+        // heads only
+        refs = new Git(repository).lsRemote().setHeads(true).call();
+        for (Ref ref : refs) {
+            System.out.println("Head: " + ref);
+        }
+
+        // tags only
+        refs = new Git(repository).lsRemote().setTags(true).call();
+        for (Ref ref : refs) {
+            System.out.println("Remote tag: " + ref);
+        }
+
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
index c3de7ab..d1df6ea 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
@@ -13,19 +13,19 @@ import org.eclipse.jgit.lib.Repository;
 
 /**
  * Simple snippet which shows how to list all Tags
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class ListTags {
 
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
 
-		List<Ref> call = new Git(repository).tagList().call();
-		for(Ref ref : call) {
-			System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-		}
+        List<Ref> call = new Git(repository).tagList().call();
+        for (Ref ref : call) {
+            System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        }
 
-		repository.close();
-	}
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
index 17689d1..625f6e9 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
@@ -22,36 +22,36 @@ import org.eclipse.jgit.treewalk.filter.PathFilter;
 
 
 /**
- * Simple snippet which shows how to get a diff showing who 
- * changed which line in a file 
- *
+ * Simple snippet which shows how to get a diff showing who
+ * changed which line in a file
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class ShowBlame {
 
-	public static void main(String[] args) throws IOException, GitAPIException {
-		// prepare a new test-repository
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare a new test-repository
         Repository repository = CookbookHelper.openJGitCookbookRepository();
 
-		BlameCommand blamer = new BlameCommand(repository);
-		ObjectId commitID = repository.resolve("HEAD");
-		blamer.setStartCommit(commitID);
-		blamer.setFilePath("README.md");
-		BlameResult blame = blamer.call();
-		
-		// read the number of lines from the commit to not look at changes in the working copy
-		int lines = countFiles(repository, commitID, "README.md");
-		for(int i = 0 ; i < lines; i++) {
-		    RevCommit commit = blame.getSourceCommit(i);
-		    System.out.println("Line: " + i + ": " + commit);
-		}
+        BlameCommand blamer = new BlameCommand(repository);
+        ObjectId commitID = repository.resolve("HEAD");
+        blamer.setStartCommit(commitID);
+        blamer.setFilePath("README.md");
+        BlameResult blame = blamer.call();
+
+        // read the number of lines from the commit to not look at changes in the working copy
+        int lines = countFiles(repository, commitID, "README.md");
+        for (int i = 0; i < lines; i++) {
+            RevCommit commit = blame.getSourceCommit(i);
+            System.out.println("Line: " + i + ": " + commit);
+        }
 
         System.out.println("Displayed commits responsible for " + lines + " lines of README.md");
 
-		repository.close();
-	}
-	
-	private static int countFiles(Repository repository, ObjectId commitID, String name) throws IOException {
+        repository.close();
+    }
+
+    private static int countFiles(Repository repository, ObjectId commitID, String name) throws IOException {
         RevWalk revWalk = new RevWalk(repository);
         RevCommit commit = revWalk.parseCommit(commitID);
         RevTree tree = commit.getTree();
@@ -63,7 +63,7 @@ public class ShowBlame {
         treeWalk.setRecursive(true);
         treeWalk.setFilter(PathFilter.create(name));
         if (!treeWalk.next()) {
-          throw new IllegalStateException("Did not find expected file 'README.md'");
+            throw new IllegalStateException("Did not find expected file 'README.md'");
         }
 
         ObjectId objectId = treeWalk.getObjectId(0);
@@ -72,7 +72,7 @@ public class ShowBlame {
         ByteArrayOutputStream stream = new ByteArrayOutputStream();
         // and then one can the loader to read the file
         loader.copyTo(stream);
-        
+
         return IOUtils.readLines(new ByteArrayInputStream(stream.toByteArray())).size();
-	}
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
index def0c19..027098b 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
@@ -22,42 +22,43 @@ import org.eclipse.jgit.treewalk.CanonicalTreeParser;
 
 /**
  * Simple snippet which shows how to show diffs between branches
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class ShowBranchDiff {
 
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-		// the diff works on TreeIterators, we prepare two for the two branches
-		AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "refs/heads/oldbranch");
-		AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "refs/heads/master");
-
-		// then the procelain diff-command returns a list of diff entries
-		List<DiffEntry> diff = new Git(repository).diff().setOldTree(oldTreeParser).setNewTree(newTreeParser).call();
-		for(DiffEntry entry : diff) {
-			System.out.println("Entry: " + entry);
-		}
-
-		repository.close();
-	}
-
-	private static AbstractTreeIterator prepareTreeParser(Repository repository, String ref) throws IOException, MissingObjectException,
-			IncorrectObjectTypeException {
-		// from the commit we can build the tree which allows us to construct the TreeParser
-		Ref head = repository.getRef(ref);
-		RevWalk walk = new RevWalk(repository);
-		RevCommit commit = walk.parseCommit(head.getObjectId());
-		RevTree tree = walk.parseTree(commit.getTree().getId());
-
-		CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
-		ObjectReader oldReader = repository.newObjectReader();
-		try {
-			oldTreeParser.reset(oldReader, tree.getId());
-		} finally {
-			oldReader.release();
-		}
-		return oldTreeParser;
-	}
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        // the diff works on TreeIterators, we prepare two for the two branches
+        AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "refs/heads/oldbranch");
+        AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "refs/heads/master");
+
+        // then the procelain diff-command returns a list of diff entries
+        List<DiffEntry> diff = new Git(repository).diff().setOldTree(oldTreeParser).setNewTree(newTreeParser).call();
+        for (DiffEntry entry : diff) {
+            System.out.println("Entry: " + entry);
+        }
+
+        repository.close();
+    }
+
+    private static AbstractTreeIterator prepareTreeParser(Repository repository, String ref) throws IOException,
+            MissingObjectException,
+            IncorrectObjectTypeException {
+        // from the commit we can build the tree which allows us to construct the TreeParser
+        Ref head = repository.getRef(ref);
+        RevWalk walk = new RevWalk(repository);
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        RevTree tree = walk.parseTree(commit.getTree().getId());
+
+        CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
+        ObjectReader oldReader = repository.newObjectReader();
+        try {
+            oldTreeParser.reset(oldReader, tree.getId());
+        } finally {
+            oldReader.release();
+        }
+        return oldTreeParser;
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
index edd6f17..0795246 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
@@ -12,46 +12,46 @@ import org.eclipse.jgit.revwalk.RevCommit;
 
 /**
  * Simple snippet which shows how to get the commit-ids for a file to provide log information.
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class ShowLog {
 
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-		Iterable<RevCommit> logs = new Git(repository).log()
-				.all()
-				.call();
-		int count = 0;
-		for(RevCommit rev : logs) {
-			System.out.println("Commit: " + rev /*+ ", name: " + rev.getName() + ", id: " + rev.getId().getName()*/);
-			count++;
-		}
-		System.out.println("Had " + count + " commits overall on current branch");
-
-		logs = new Git(repository).log()
-				// for all log.all()
-				.addPath("README.md")
-				.call();
-		count = 0;
-		for(RevCommit rev : logs) {
-			System.out.println("Commit: " + rev /*+ ", name: " + rev.getName() + ", id: " + rev.getId().getName()*/);
-			count++;
-		}
-		System.out.println("Had " + count + " commits on README.md");
-
-		logs = new Git(repository).log()
-			// for all log.all()
-			.addPath("pom.xml")
-			.call();
-		count = 0;
-		for(RevCommit rev : logs) {
-			System.out.println("Commit: " + rev /*+ ", name: " + rev.getName() + ", id: " + rev.getId().getName()*/);
-			count++;
-		}
-		System.out.println("Had " + count + " commits on pom.xml");
-
-		repository.close();
-	}
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        Iterable<RevCommit> logs = new Git(repository).log()
+                .all()
+                .call();
+        int count = 0;
+        for (RevCommit rev : logs) {
+            System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+            count++;
+        }
+        System.out.println("Had " + count + " commits overall on current branch");
+
+        logs = new Git(repository).log()
+                // for all log.all()
+                .addPath("README.md")
+                .call();
+        count = 0;
+        for (RevCommit rev : logs) {
+            System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+            count++;
+        }
+        System.out.println("Had " + count + " commits on README.md");
+
+        logs = new Git(repository).log()
+                // for all log.all()
+                .addPath("pom.xml")
+                .call();
+        count = 0;
+        for (RevCommit rev : logs) {
+            System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+            count++;
+        }
+        System.out.println("Had " + count + " commits on pom.xml");
+
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java b/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
index 00dccc7..397b9f9 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
@@ -13,16 +13,16 @@ import org.eclipse.jgit.lib.Repository;
 /**
  * Simple snippet which prints the Status of a git repository, i.e. modified/added/
  * removed/ignored files, similar to "git status"
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class ShowStatus {
 
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
 
-		Status status = new Git(repository).status().call();
-		System.out.println("Added: " + status.getAdded());
+        Status status = new Git(repository).status().call();
+        System.out.println("Added: " + status.getAdded());
         System.out.println("Changed: " + status.getChanged());
         System.out.println("Conflicting: " + status.getConflicting());
         System.out.println("ConflictingStageState: " + status.getConflictingStageState());
@@ -32,7 +32,7 @@ public class ShowStatus {
         System.out.println("Removed: " + status.getRemoved());
         System.out.println("Untracked: " + status.getUntracked());
         System.out.println("UntrackedFolders: " + status.getUntrackedFolders());
-		
-		repository.close();
-	}
+
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java b/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
index b703f00..9aed281 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
@@ -12,22 +12,23 @@ import org.eclipse.jgit.revwalk.RevCommit;
 
 
 /**
- * Simple snippet which shows how to use RevWalk to quickly iterate over all available commits, 
- * not just the ones on the current branch 
+ * Simple snippet which shows how to use RevWalk to quickly iterate over all available commits,
+ * not just the ones on the current branch
  */
 public class WalkAllCommits {
-	public static void main(String[] args) throws IOException, InvalidRefNameException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-		Git git = new Git(repository);
-		Iterable<RevCommit> commits = git.log().all().call();
-		int count = 0;
-		for (RevCommit commit : commits) {
-			System.out.println("LogCommit: " + commit);
-			count++;
-		}
-		System.out.println(count);
-
-		repository.close();
-	}
+
+    public static void main(String[] args) throws IOException, InvalidRefNameException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        Git git = new Git(repository);
+        Iterable<RevCommit> commits = git.log().all().call();
+        int count = 0;
+        for (RevCommit commit : commits) {
+            System.out.println("LogCommit: " + commit);
+            count++;
+        }
+        System.out.println(count);
+
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java b/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
index ba70921..08c5d3c 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
@@ -13,32 +13,32 @@ import org.eclipse.jgit.treewalk.TreeWalk;
 
 /**
  * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class BrowseTree {
 
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
 
-		ObjectId revId = repository.resolve(Constants.HEAD);
-		TreeWalk treeWalk = new TreeWalk(repository);
+        ObjectId revId = repository.resolve(Constants.HEAD);
+        TreeWalk treeWalk = new TreeWalk(repository);
 
-		treeWalk.addTree(new RevWalk(repository).parseTree(revId));
+        treeWalk.addTree(new RevWalk(repository).parseTree(revId));
 
-		while (treeWalk.next())
-		{
-			System.out.println("---------------------------");
-			System.out.append("name: ").println(treeWalk.getNameString());
-			System.out.append("path: ").println(treeWalk.getPathString());
+        while (treeWalk.next())
+        {
+            System.out.println("---------------------------");
+            System.out.append("name: ").println(treeWalk.getNameString());
+            System.out.append("path: ").println(treeWalk.getPathString());
 
-			ObjectLoader loader = repository.open(treeWalk.getObjectId(0));
+            ObjectLoader loader = repository.open(treeWalk.getObjectId(0));
 
-			System.out.append("directory: ").println(loader.getType()
-					== Constants.OBJ_TREE);
-			System.out.append("size: ").println(loader.getSize());
-		}
+            System.out.append("directory: ").println(loader.getType()
+                    == Constants.OBJ_TREE);
+            System.out.append("size: ").println(loader.getSize());
+        }
 
-		repository.close();
-	}
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
index 287d4a3..226dfb6 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
@@ -13,30 +13,30 @@ import org.eclipse.jgit.revwalk.RevCommit;
 
 /**
  * Snippet which shows how to use PlotWalk to read from a specific commit.
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class ListChildrenOfCommit {
 
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
 
-		PlotWalk revWalk = new PlotWalk(repository);
-		ObjectId rootId = repository.resolve("refs/heads/master");
-		RevCommit root = revWalk.parseCommit(rootId);
-		revWalk.markStart(root);
-		PlotCommitList<PlotLane> plotCommitList = new PlotCommitList<PlotLane>();
-		plotCommitList.source(revWalk);
-		plotCommitList.fillTo(Integer.MAX_VALUE);
+        PlotWalk revWalk = new PlotWalk(repository);
+        ObjectId rootId = repository.resolve("refs/heads/master");
+        RevCommit root = revWalk.parseCommit(rootId);
+        revWalk.markStart(root);
+        PlotCommitList<PlotLane> plotCommitList = new PlotCommitList<PlotLane>();
+        plotCommitList.source(revWalk);
+        plotCommitList.fillTo(Integer.MAX_VALUE);
 
-		System.out.println("Printing children of commit " + root);
-		for(RevCommit com : revWalk) {
-			System.out.println("Child: " + com);
-		}
+        System.out.println("Printing children of commit " + root);
+        for (RevCommit com : revWalk) {
+            System.out.println("Child: " + com);
+        }
 
-		System.out.println("Printing with next()");
-		System.out.println("next: " + revWalk.next());
+        System.out.println("Printing with next()");
+        System.out.println("next: " + revWalk.next());
 
-		repository.close();
-	}
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java b/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
index cf4ebbc..3f684a3 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
@@ -10,31 +10,31 @@ import org.eclipse.jgit.lib.Repository;
 
 /**
  * Snippet which shows how to work with the Index
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class ListIndex {
 
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
 
-		// DirCache contains all files of the repository
-		DirCache index = DirCache.read(repository);
-		System.out.println("DirCache has " + index.getEntryCount() + " items");
-		for(int i = 0; i < index.getEntryCount();i++) {
-			// the number after the AnyObjectId is the "stage", see the constants in DirCacheEntry
-			System.out.println("Item " + i + ": " + index.getEntry(i));
-		}
+        // DirCache contains all files of the repository
+        DirCache index = DirCache.read(repository);
+        System.out.println("DirCache has " + index.getEntryCount() + " items");
+        for (int i = 0; i < index.getEntryCount(); i++) {
+            // the number after the AnyObjectId is the "stage", see the constants in DirCacheEntry
+            System.out.println("Item " + i + ": " + index.getEntry(i));
+        }
 
-		//
-		System.out.println("Now printing staged items...");
-		for(int i = 0; i < index.getEntryCount();i++) {
-			DirCacheEntry entry = index.getEntry(i);
-			if(entry.getStage() != DirCacheEntry.STAGE_0) {
-				System.out.println("Item " + i + ": " + entry);
-			}
-		}
+        //
+        System.out.println("Now printing staged items...");
+        for (int i = 0; i < index.getEntryCount(); i++) {
+            DirCacheEntry entry = index.getEntry(i);
+            if (entry.getStage() != DirCacheEntry.STAGE_0) {
+                System.out.println("Item " + i + ": " + entry);
+            }
+        }
 
-		repository.close();
-	}
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
index 5304d2e..9d1c4a8 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
@@ -17,41 +17,43 @@ import org.eclipse.jgit.lib.Repository;
 
 /**
  * Simple snippet which shows how to list all Tags
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class ListRefLog {
 
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
 
-		List<Ref> refs = new Git(repository).branchList().call();
-		for(Ref ref : refs) {
-			System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        List<Ref> refs = new Git(repository).branchList().call();
+        for (Ref ref : refs) {
+            System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
 
-			listReflog(repository, ref);
-		}
+            listReflog(repository, ref);
+        }
 
-		List<Ref> call = new Git(repository).tagList().call();
-		for(Ref ref : call) {
-			System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        List<Ref> call = new Git(repository).tagList().call();
+        for (Ref ref : call) {
+            System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
 
-			listReflog(repository, ref);
-		}
+            listReflog(repository, ref);
+        }
 
-		repository.close();
-	}
+        repository.close();
+    }
 
-	private static void listReflog(Repository repository, Ref ref) throws GitAPIException, InvalidRefNameException, IOException {
-		/*Ref head = repository.getRef(ref.getName());
-		RevWalk walk = new RevWalk(repository);
-		RevCommit commit = walk.parseCommit(head.getObjectId());*/
+    private static void listReflog(Repository repository, Ref ref) throws GitAPIException, InvalidRefNameException, IOException {
+        /*
+         * Ref head = repository.getRef(ref.getName());
+         * RevWalk walk = new RevWalk(repository);
+         * RevCommit commit = walk.parseCommit(head.getObjectId());
+         */
 
-		Collection<ReflogEntry> call = new Git(repository).reflog().setRef(ref.getName()).call();
-		Iterator<ReflogEntry> it = call.iterator();
-		while(it.hasNext()) {
-			ReflogEntry reflog = it.next();
-			System.out.println("Reflog: " + reflog);
-		}
-	}
+        Collection<ReflogEntry> call = new Git(repository).reflog().setRef(ref.getName()).call();
+        Iterator<ReflogEntry> it = call.iterator();
+        while (it.hasNext()) {
+            ReflogEntry reflog = it.next();
+            System.out.println("Reflog: " + reflog);
+        }
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
index be91bf0..53dea0f 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
@@ -14,37 +14,38 @@ import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 
 /**
  * Simple snippet which shows how to clone a repository from a remote source
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class PullFromRemoteRepository {
-	private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
 
-	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-		// prepare a new folder for the cloned repository
-		File localPath = File.createTempFile("TestGitRepository", "");
-		localPath.delete();
+    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
 
-		// then clone
-		System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        // prepare a new folder for the cloned repository
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // then clone
+        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
         Git.cloneRepository()
-        .setURI(REMOTE_URL)
-        .setDirectory(localPath)
-        .call();
+                .setURI(REMOTE_URL)
+                .setDirectory(localPath)
+                .call();
 
         // now open the created repository
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder.setGitDir(localPath)
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder.setGitDir(localPath)
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
 
-		Git git = new Git(repository);
+        Git git = new Git(repository);
         git.pull()
-        .call();
+                .call();
 
         System.out.println("Pulled from remote repository to local repository at " + repository.getDirectory());
 
         repository.close();
-	}
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
index 89a1501..d7686e4 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
@@ -16,45 +16,48 @@ import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 
 /**
  * Simple snippet which shows how to poull from a remote repository from a remote source
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class PullRemoteRepository {
-	private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
 
-	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-		Repository repository = cloneRepository();
+    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
 
-		System.out.println("Having repository: " + repository.getDirectory() + " with head: " +
-				repository.getRef(Constants.HEAD) + "/" + repository.resolve("HEAD") + "/" + repository.resolve("refs/heads/master"));
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        Repository repository = cloneRepository();
 
-		// TODO: why do we get null here for HEAD?!? See also http://stackoverflow.com/questions/17979660/jgit-pull-noheadexception
+        System.out.println("Having repository: " + repository.getDirectory() + " with head: " +
+                repository.getRef(Constants.HEAD) + "/" + repository.resolve("HEAD") + "/" +
+                repository.resolve("refs/heads/master"));
 
-		PullResult call = new Git(repository).pull().call();
+        // TODO: why do we get null here for HEAD?!? See also
+// http://stackoverflow.com/questions/17979660/jgit-pull-noheadexception
 
-		System.out.println("Pulled from the remote repository: " + call);
+        PullResult call = new Git(repository).pull().call();
 
-		repository.close();
-	}
+        System.out.println("Pulled from the remote repository: " + call);
 
-	private static Repository cloneRepository() throws IOException, GitAPIException, InvalidRemoteException, TransportException {
-		// prepare a new folder for the cloned repository
-		File localPath = File.createTempFile("TestGitRepository", "");
-		localPath.delete();
+        repository.close();
+    }
 
-		// then clone
-		System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+    private static Repository cloneRepository() throws IOException, GitAPIException, InvalidRemoteException, TransportException {
+        // prepare a new folder for the cloned repository
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // then clone
+        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
         Git.cloneRepository()
-        .setURI(REMOTE_URL)
-        .setDirectory(localPath)
-        .call();
+                .setURI(REMOTE_URL)
+                .setDirectory(localPath)
+                .call();
 
         // now open the created repository
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder.setGitDir(localPath)
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
-		return repository;
-	}
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder.setGitDir(localPath)
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
+        return repository;
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
index 4ad4c8e..994bee1 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
@@ -14,48 +14,49 @@ import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 
 /**
  * Simple snippet which shows how to clone a repository from a remote source
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class PushToRemoteRepository {
-	private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
 
-	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-		// prepare a new folder for the cloned repository
-		File localPath = File.createTempFile("TestGitRepository", "");
-		localPath.delete();
+    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
 
-		// then clone
-		System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        // prepare a new folder for the cloned repository
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // then clone
+        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
         Git.cloneRepository()
-        .setURI(REMOTE_URL)
-        .setDirectory(localPath)
-        .call();
+                .setURI(REMOTE_URL)
+                .setDirectory(localPath)
+                .call();
 
-		// prepare a second folder for the 2nd clone
-		File localPath2 = File.createTempFile("TestGitRepository", "");
-		localPath2.delete();
+        // prepare a second folder for the 2nd clone
+        File localPath2 = File.createTempFile("TestGitRepository", "");
+        localPath2.delete();
 
-		// then clone again
-		System.out.println("Cloning from file://" + localPath + " to " + localPath2);
+        // then clone again
+        System.out.println("Cloning from file://" + localPath + " to " + localPath2);
         Git.cloneRepository()
-        .setURI("file://" + localPath)
-        .setDirectory(localPath2)
-        .call();
+                .setURI("file://" + localPath)
+                .setDirectory(localPath2)
+                .call();
 
         // now open the created repository
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder.setGitDir(localPath2)
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder.setGitDir(localPath2)
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
 
-		Git git = new Git(repository);
-		git.push()
-        	.call();
+        Git git = new Git(repository);
+        git.push()
+                .call();
 
-		System.out.println("Pushed from repository: " + repository.getDirectory() + " to remote repository at " + REMOTE_URL);
+        System.out.println("Pushed from repository: " + repository.getDirectory() + " to remote repository at " + REMOTE_URL);
 
-		repository.close();
-	}
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
index 696047e..2aa1438 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
@@ -14,42 +14,44 @@ import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 
 /**
  * Simple snippet which shows how to clone a repository from a remote source
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class TrackMaster {
-	private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
 
-	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-		// prepare a new folder for the cloned repository
-		File localPath = File.createTempFile("TestGitRepository", "");
-		localPath.delete();
+    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
 
-		// then clone
-		System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        // prepare a new folder for the cloned repository
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // then clone
+        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
         Git.cloneRepository()
-        .setURI(REMOTE_URL)
-        .setDirectory(localPath)
-        .call();
+                .setURI(REMOTE_URL)
+                .setDirectory(localPath)
+                .call();
 
         // now open the created repository
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder.setGitDir(localPath)
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder.setGitDir(localPath)
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
 
-		Git git = new Git(repository);
+        Git git = new Git(repository);
 
-		git.branchCreate()
-	        .setName("master")
-	        // ?!? .setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM)
-	        .setStartPoint("origin/master")
-	        .setForce(true)
-	        .call();
+        git.branchCreate()
+                .setName("master")
+                // ?!? .setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM)
+                .setStartPoint("origin/master")
+                .setForce(true)
+                .call();
 
-        System.out.println("Now tracking master in repository at " + repository.getDirectory() + " from origin/master at " + REMOTE_URL);
+        System.out.println("Now tracking master in repository at " + repository.getDirectory() + " from origin/master at " +
+                REMOTE_URL);
 
         repository.close();
-	}
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
index 7a65ea7..f87c826 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
@@ -13,34 +13,34 @@ import org.eclipse.jgit.treewalk.TreeWalk;
 
 /**
  * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class WalkTreeNonRecursive {
 
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
 
-		Ref head = repository.getRef("HEAD");
+        Ref head = repository.getRef("HEAD");
 
-		// a RevWalk allows to walk over commits based on some filtering that is defined
-		RevWalk walk = new RevWalk(repository);
+        // a RevWalk allows to walk over commits based on some filtering that is defined
+        RevWalk walk = new RevWalk(repository);
 
-		RevCommit commit = walk.parseCommit(head.getObjectId());
-		RevTree tree = commit.getTree();
-		System.out.println("Having tree: " + tree);
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        RevTree tree = commit.getTree();
+        System.out.println("Having tree: " + tree);
 
-		// now use a TreeWalk to iterate over all files in the Tree recursively
-		// you can set Filters to narrow down the results if needed
-		TreeWalk treeWalk = new TreeWalk(repository);
-		treeWalk.addTree(tree);
-		treeWalk.setRecursive(false);
-		while(treeWalk.next()) {
-			System.out.println("found: " + treeWalk.getPathString());
-		}
-		
-		
+        // now use a TreeWalk to iterate over all files in the Tree recursively
+        // you can set Filters to narrow down the results if needed
+        TreeWalk treeWalk = new TreeWalk(repository);
+        treeWalk.addTree(tree);
+        treeWalk.setRecursive(false);
+        while (treeWalk.next()) {
+            System.out.println("found: " + treeWalk.getPathString());
+        }
 
-		repository.close();
-	}
+
+
+        repository.close();
+    }
 }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
index b37157b..82debfe 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
@@ -13,32 +13,32 @@ import org.eclipse.jgit.treewalk.TreeWalk;
 
 /**
  * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
- *
+ * 
  * @author dominik.stadler@gmx.at
  */
 public class WalkTreeRecursive {
 
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
 
-		Ref head = repository.getRef("HEAD");
+        Ref head = repository.getRef("HEAD");
 
-		// a RevWalk allows to walk over commits based on some filtering that is defined
-		RevWalk walk = new RevWalk(repository);
+        // a RevWalk allows to walk over commits based on some filtering that is defined
+        RevWalk walk = new RevWalk(repository);
 
-		RevCommit commit = walk.parseCommit(head.getObjectId());
-		RevTree tree = commit.getTree();
-		System.out.println("Having tree: " + tree);
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        RevTree tree = commit.getTree();
+        System.out.println("Having tree: " + tree);
 
-		// now use a TreeWalk to iterate over all files in the Tree recursively
-		// you can set Filters to narrow down the results if needed
-		TreeWalk treeWalk = new TreeWalk(repository);
-		treeWalk.addTree(tree);
-		treeWalk.setRecursive(true);
-		while(treeWalk.next()) {
-			System.out.println("found: " + treeWalk.getPathString());
-		}
+        // now use a TreeWalk to iterate over all files in the Tree recursively
+        // you can set Filters to narrow down the results if needed
+        TreeWalk treeWalk = new TreeWalk(repository);
+        treeWalk.addTree(tree);
+        treeWalk.setRecursive(true);
+        while (treeWalk.next()) {
+            System.out.println("found: " + treeWalk.getPathString());
+        }
 
-		repository.close();
-	}
+        repository.close();
+    }
 }

§§--§§
commit 786b4e863ec046d62de2e2a321826b71c0b06946 6c49c3c7e09eea30777986540d58e55bb1af39db
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Thu Dec 5 08:45:53 2013 +0100 
Message: Add AddAndListNoteOfCommit
---§

diff --git a/README.md b/README.md
index d87b551..be47433 100644
--- a/README.md
+++ b/README.md
@@ -43,6 +43,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [Show Status](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java)
 * [Write contents of branch into an compressed file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java)
 * [Blame, i.e. find out which commit changed specific lines in a file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java)
+* [Add and list Notes attached to commits](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java)
 
 * [Clone a remote reppository into a new local directory](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java)
 * [Iterate remote references in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java b/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
new file mode 100755
index 0000000..413bd51
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
@@ -0,0 +1,55 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.notes.Note;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevWalk;
+
+
+
+/**
+ * Simple snippet which shows how to load Notes in a Git repository
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class AddAndListNoteOfCommit {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		Ref head = repository.getRef("refs/heads/master");
+		System.out.println("Found head: " + head);
+
+        RevWalk walk = new RevWalk(repository);
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        System.out.println("Found Commit: " + commit);
+
+        new Git(repository).notesAdd().setMessage("some note message").setObjectId(commit).call();
+        System.out.println("Added Note to commit " + commit);
+
+		List<Note> call = new Git(repository).notesList().call();
+		System.out.println("Listing " + call.size() + " notes");
+		for(Note note : call) {
+			// check if we found the note for this commit
+			if(!note.getName().equals(head.getObjectId().getName())) {
+				System.out.println("Note " + note + " did not match commit " + head);
+				continue;
+			}
+			System.out.println("Found note: " + note + " for commit " + head);
+
+			// displaying the contents of the note is done via a simple blob-read
+			ObjectLoader loader = repository.open(note.getData());
+			loader.copyTo(System.out);
+		}
+
+		repository.close();
+	}
+}

§§--§§
commit b58a1865e5cb27c59d478fb0940bf172dc18ab90 786b4e863ec046d62de2e2a321826b71c0b06946
Author: Peter LaValle <peter.lavalle@gmail.com>
Date: Wed Dec 11 17:24:49 2013 +0000 
Message: Update CommitFile.java
---§

diff --git a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
index 87fab90..c8d22b7 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
@@ -11,7 +11,7 @@ import org.eclipse.jgit.lib.Repository;
 
 
 /**
- * Simple snippet which shows how to list all Tags
+ * Simple snippet which shows how to commit a file
  * 
  * @author dominik.stadler@gmx.at
  */

§§--§§
commit f148a699e8330b95263e560a56353bf81bc57670 786b4e863ec046d62de2e2a321826b71c0b06946 b58a1865e5cb27c59d478fb0940bf172dc18ab90
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Wed Dec 11 22:04:21 2013 -0800 
Message: Merge pull request #2 from g-pechorin/patch-1
---§

§§--§§
commit 93686e5c8b9f61f73126d6691be899d2cba0fc0b f148a699e8330b95263e560a56353bf81bc57670
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Fri Jan 17 08:22:23 2014 +0100 
Message: Update to JGit 3.2.0.201312181205-r
---§

diff --git a/pom.xml b/pom.xml
index 331444f..49e2b24 100644
--- a/pom.xml
+++ b/pom.xml
@@ -20,7 +20,7 @@
     <dependency>
       <groupId>org.eclipse.jgit</groupId>
       <artifactId>org.eclipse.jgit</artifactId>
-      <version>3.1.0.201310021548-r</version>
+      <version>3.2.0.201312181205-r</version>
     </dependency>
 
 	<dependency>

§§--§§
commit aa31703b65774e4a06010824601e56375a70078c 93686e5c8b9f61f73126d6691be899d2cba0fc0b
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Fri Jan 17 08:23:11 2014 +0100 
Message: Add snippet for cleaning untracked files via 'git clean'
---§

diff --git a/README.md b/README.md
index be47433..d067115 100644
--- a/README.md
+++ b/README.md
@@ -44,6 +44,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [Write contents of branch into an compressed file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java)
 * [Blame, i.e. find out which commit changed specific lines in a file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java)
 * [Add and list Notes attached to commits](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java)
+* [Clean all untracked files](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java)
 
 * [Clone a remote reppository into a new local directory](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java)
 * [Iterate remote references in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java b/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
new file mode 100755
index 0000000..e8707b6
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
@@ -0,0 +1,43 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Set;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to list all Tags
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class CleanUntrackedFiles {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.createNewRepository();
+
+        System.out.println("Repository at " + repository.getWorkTree());
+
+        File untrackedFile = File.createTempFile("untracked", ".txt", repository.getWorkTree());
+        File untrackedDir = File.createTempFile("untrackedDir", "", repository.getWorkTree());
+        untrackedDir.delete();
+        untrackedDir.mkdirs();
+
+        System.out.println("Untracked exists: " + untrackedFile.exists() + " Dir: " + untrackedDir.exists() + "/" + untrackedDir.isDirectory());
+
+        Set<String> removed = new Git(repository).clean().setCleanDirectories(true).call();
+        for(String item : removed) {
+        	System.out.println("Removed: " + item);
+        }
+        System.out.println("Removed " + removed.size() + " items");
+
+        System.out.println("Untracked after: " + untrackedFile.exists() + " Dir: " + untrackedDir.exists() + "/" + untrackedDir.isDirectory());
+
+        repository.close();
+    }
+}

§§--§§
commit 1e153d3261b5929212b1ecbd3173ead76ade2036 aa31703b65774e4a06010824601e56375a70078c
Author: Cuong Tran <cuong.tran@service-now.com>
Date: Mon Feb 24 14:28:16 2014 -0800 
Message: Add an example for "git update-index --assume-changed"
---§

diff --git a/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java b/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java
new file mode 100644
index 0000000..ddd540d
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java
@@ -0,0 +1,83 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Date;
+import java.util.Set;
+
+import org.apache.commons.io.FileUtils;
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.GitCommand;
+import org.eclipse.jgit.api.Status;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.JGitInternalException;
+import org.eclipse.jgit.dircache.DirCache;
+import org.eclipse.jgit.dircache.DirCacheEntry;
+import org.eclipse.jgit.errors.NoWorkTreeException;
+import org.eclipse.jgit.lib.Repository;
+
+/**
+ * Snippet which shows how to mark files as assumed-unchanged (git update-index --assume-unchanged)
+ */
+public class UpdateIndex {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		final Repository repo = CookbookHelper.openJGitCookbookRepository();
+		final Git git = new Git(repo);
+		final String testFile = "README.md";
+		
+		try {
+			// Modify the file
+			FileUtils.write(new File(testFile), new Date().toString());			
+			System.out.println("Modified files: " + getModifiedFiles(git));
+			
+			new AssumeChangedCommand(repo, testFile, true).call();
+			System.out.println("Modified files after assume-changed: " + getModifiedFiles(git));
+
+			new AssumeChangedCommand(repo, testFile, false).call();
+			System.out.println("Modified files after no-assume-changed: " + getModifiedFiles(git));
+
+			git.checkout().addPath(testFile).call();
+			System.out.println("Modified files after reset: " + getModifiedFiles(git));
+		} finally {
+			repo.close();
+		}
+	}
+
+	private static Set<String> getModifiedFiles(Git git) throws NoWorkTreeException, GitAPIException {
+		Status status = git.status().call();
+		return status.getModified();
+	}
+
+	static class AssumeChangedCommand extends GitCommand<String> {
+		private final String fileName;
+		private final boolean assumeUnchanged;
+
+		AssumeChangedCommand(Repository repository, String fileName, boolean assumedUnchanged) {
+			super(repository);
+
+			this.fileName = fileName;
+			this.assumeUnchanged = assumedUnchanged;
+		}
+
+		@Override
+		public String call() throws GitAPIException {
+			try {
+				DirCache index = repo.lockDirCache();
+				DirCacheEntry entry = index.getEntry(fileName);
+
+				if (entry != null) {
+					entry.setAssumeValid(assumeUnchanged);
+					index.write();
+					index.commit();
+					return entry.getPathString();
+				}
+			} catch (IOException e) {
+				throw new JGitInternalException(e.getMessage(), e);
+			}
+
+			return null;
+		}
+	}
+}

§§--§§
commit 8feb550f8f7e4a49a2d8080174fe25c385e24f3b aa31703b65774e4a06010824601e56375a70078c 1e153d3261b5929212b1ecbd3173ead76ade2036
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Tue Feb 25 20:46:36 2014 +0100 
Message: Merge pull request #3 from ctran/master
---§

§§--§§
commit d8d720aff09b92a2af15c79f9cab1647def0970c 8feb550f8f7e4a49a2d8080174fe25c385e24f3b
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon Mar 17 23:22:03 2014 +0100 
Message: Fix ShowBranchDiff by using a branch which exists also remotely
---§

diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
index 027098b..ea59b43 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
@@ -31,7 +31,7 @@ public class ShowBranchDiff {
         Repository repository = CookbookHelper.openJGitCookbookRepository();
 
         // the diff works on TreeIterators, we prepare two for the two branches
-        AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "refs/heads/oldbranch");
+        AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "refs/heads/testbranch");
         AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "refs/heads/master");
 
         // then the procelain diff-command returns a list of diff entries

§§--§§
commit f5f9f79005efaa190ab27545a300f4b0a3e96607 d8d720aff09b92a2af15c79f9cab1647def0970c
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Tue Apr 15 19:19:55 2014 +0200 
Message: Add one more TODO item
---§

diff --git a/README.md b/README.md
index d067115..e00853d 100644
--- a/README.md
+++ b/README.md
@@ -79,6 +79,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * Doing stuff without local storage: Using org.eclipse.jgit.storage.dfs.InMemoryRepository to clone a Git repo in-memory and work from there
 * Stashes, see http://wiki.eclipse.org/JGit/New_and_Noteworthy/2.0#StashApplyCommand
 * CherryPick
+* Rebase - http://stackoverflow.com/questions/22945257/jgit-how-to-squash-commits
 
 #### Sources
 

§§--§§
commit 7ee07307d52e4c9a1bd2c0760672e295f5195eed f5f9f79005efaa190ab27545a300f4b0a3e96607
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon Apr 28 21:57:03 2014 +0200 
Message: Update to latest JGit 3.3.2
---§

diff --git a/pom.xml b/pom.xml
index 49e2b24..5fc9327 100644
--- a/pom.xml
+++ b/pom.xml
@@ -20,7 +20,7 @@
     <dependency>
       <groupId>org.eclipse.jgit</groupId>
       <artifactId>org.eclipse.jgit</artifactId>
-      <version>3.2.0.201312181205-r</version>
+      <version>3.3.2.201404171909-r</version>
     </dependency>
 
 	<dependency>

§§--§§
commit 650f618e287fef6a419e5c404c0ee3146ac1ec42 7ee07307d52e4c9a1bd2c0760672e295f5195eed
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon Apr 28 21:57:34 2014 +0200 
Message: Add snippet diff changes on a file and show actual diff via DiffFormatter
---§

diff --git a/README.md b/README.md
index e00853d..2a02941 100644
--- a/README.md
+++ b/README.md
@@ -40,6 +40,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [Create and delete branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java)
 * [Create and delete tags](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java)
 * [Return diff between two branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java)
+* [Show diff of changes to a file between two revs](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java)
 * [Show Status](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java)
 * [Write contents of branch into an compressed file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java)
 * [Blame, i.e. find out which commit changed specific lines in a file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
new file mode 100644
index 0000000..5936fb4
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
@@ -0,0 +1,72 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.diff.DiffEntry;
+import org.eclipse.jgit.diff.DiffFormatter;
+import org.eclipse.jgit.errors.IncorrectObjectTypeException;
+import org.eclipse.jgit.errors.MissingObjectException;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.ObjectReader;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.AbstractTreeIterator;
+import org.eclipse.jgit.treewalk.CanonicalTreeParser;
+import org.eclipse.jgit.treewalk.filter.PathFilter;
+
+
+
+/**
+ * Simple snippet which shows how to show diffs between branches
+ * 
+ * @author dominik.stadler@gmx.at
+ */
+public class ShowFileDiff {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        // the diff works on TreeIterators, we prepare two for the two branches
+        AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "09c65401f3730eb3e619c33bf31e2376fb393727");
+        AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "aa31703b65774e4a06010824601e56375a70078c");
+
+        // then the procelain diff-command returns a list of diff entries
+        List<DiffEntry> diff = new Git(repository).diff().
+                setOldTree(oldTreeParser).
+                setNewTree(newTreeParser).
+                setPathFilter(PathFilter.create("README.md")).
+                call();
+        for (DiffEntry entry : diff) {
+            System.out.println("Entry: " + entry + ", from: " + entry.getOldId() + ", to: " + entry.getNewId());
+            DiffFormatter formatter = new DiffFormatter(System.out);
+            formatter.setRepository(repository);
+            formatter.format(entry);
+        }
+
+        repository.close();
+    }
+
+    private static AbstractTreeIterator prepareTreeParser(Repository repository, String objectId) throws IOException,
+            MissingObjectException,
+            IncorrectObjectTypeException {
+        // from the commit we can build the tree which allows us to construct the TreeParser
+        RevWalk walk = new RevWalk(repository);
+        RevCommit commit = walk.parseCommit(ObjectId.fromString(objectId));
+        RevTree tree = walk.parseTree(commit.getTree().getId());
+
+        CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
+        ObjectReader oldReader = repository.newObjectReader();
+        try {
+            oldTreeParser.reset(oldReader, tree.getId());
+        } finally {
+            oldReader.release();
+        }
+        return oldTreeParser;
+    }
+}

§§--§§
commit 579254e864ebc2f7cc8ca06ab0feea66db901e06 650f618e287fef6a419e5c404c0ee3146ac1ec42
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon May 5 20:46:03 2014 +0200 
Message: Define Apache 2.0 license in README.md and source files
---§

diff --git a/README.md b/README.md
index 2a02941..5df6bda 100644
--- a/README.md
+++ b/README.md
@@ -93,3 +93,19 @@ The following sources were used to build the snippets
 #### Contribute
 
 Please note that the list of snippets is not yet complete, probably never will. If you are missing things or have suggestions how to improve or add snippets, please either send pull requests or create [issues](https://github.com/centic9/jgit-cookbook/issues).
+
+#### Licensing
+
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
diff --git a/src/main/java/org/dstadler/jgit/CreateNewRepository.java b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
index 2926354..7101237 100644
--- a/src/main/java/org/dstadler/jgit/CreateNewRepository.java
+++ b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.File;
 import java.io.IOException;
 
@@ -10,7 +26,7 @@ import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 /**
  * Simple snippet which shows how to create a new repository
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class CreateNewRepository {
 
diff --git a/src/main/java/org/dstadler/jgit/OpenRepository.java b/src/main/java/org/dstadler/jgit/OpenRepository.java
index 182331a..17c8423 100644
--- a/src/main/java/org/dstadler/jgit/OpenRepository.java
+++ b/src/main/java/org/dstadler/jgit/OpenRepository.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.File;
 import java.io.IOException;
 
@@ -11,7 +27,7 @@ import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 /**
  * Simple snippet which shows how to open an existing repository
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class OpenRepository {
 
diff --git a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
index 978064b..9f67d2b 100755
--- a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
+++ b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.api;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
@@ -23,7 +39,7 @@ import org.eclipse.jgit.treewalk.filter.PathFilter;
  * Snippet which shows how to use RevWalk and TreeWalk to read the file
  * attributes like execution-bit and type of file/directory/...
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class GetFileAttributes {
 
diff --git a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
index 95be7df..cac3624 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.api;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
index a0ce2ef..c72be00 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.api;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
index 3a1ffd9..593ee58 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.api;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
diff --git a/src/main/java/org/dstadler/jgit/api/PrintRemotes.java b/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
index db81d6d..c5476df 100755
--- a/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
+++ b/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.api;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 import java.util.Set;
 
diff --git a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
index fe0f238..ef51cf1 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.api;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
diff --git a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
index 074f4a2..3d23d3f 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.api;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
@@ -18,7 +34,7 @@ import org.eclipse.jgit.treewalk.filter.PathFilter;
  * Snippet which shows how to use RevWalk and TreeWalk to read the contents
  * of a specific file from a specific commit.
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class ReadFileFromCommit {
 
diff --git a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
index 2467038..b2c5a21 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.api;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
diff --git a/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java b/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
index b7a1524..ac774a0 100755
--- a/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.api;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
diff --git a/src/main/java/org/dstadler/jgit/api/ResolveRef.java b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
index e3d4a13..d55b0fd 100644
--- a/src/main/java/org/dstadler/jgit/api/ResolveRef.java
+++ b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.api;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
index 726ca5a..3e9b3c7 100644
--- a/src/main/java/org/dstadler/jgit/api/WalkRev.java
+++ b/src/main/java/org/dstadler/jgit/api/WalkRev.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.api;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
diff --git a/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
index 2dcd1a9..4f9976e 100644
--- a/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
+++ b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.helper;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.File;
 import java.io.IOException;
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java b/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
index 413bd51..1b9020f 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.porcelain;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 import java.util.List;
 
@@ -18,7 +34,7 @@ import org.eclipse.jgit.revwalk.RevWalk;
 /**
  * Simple snippet which shows how to load Notes in a Git repository
  *
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class AddAndListNoteOfCommit {
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
index c303f6e..c1f28aa 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.porcelain;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.File;
 import java.io.IOException;
 
@@ -13,7 +29,7 @@ import org.eclipse.jgit.lib.Repository;
 /**
  * Simple snippet which shows how to add a file to the index
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class AddFile {
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java b/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
index e8707b6..e8a2350 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.porcelain;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.File;
 import java.io.IOException;
 import java.util.Set;
@@ -14,7 +30,7 @@ import org.eclipse.jgit.lib.Repository;
 /**
  * Simple snippet which shows how to list all Tags
  *
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class CleanUntrackedFiles {
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
index f1ddedf..72e96ed 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.porcelain;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.File;
 import java.io.IOException;
 
@@ -15,7 +31,7 @@ import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 /**
  * Simple snippet which shows how to clone a repository from a remote source
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class CloneRemoteRepository {
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
index c8d22b7..9e91b69 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.porcelain;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.File;
 import java.io.IOException;
 
@@ -13,7 +29,7 @@ import org.eclipse.jgit.lib.Repository;
 /**
  * Simple snippet which shows how to commit a file
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class CommitFile {
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
index 6b9d58a..eb00114 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.porcelain;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 import java.util.List;
 
@@ -14,7 +30,7 @@ import org.eclipse.jgit.lib.Repository;
 /**
  * Simple snippet which shows how to create and delete branches
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class CreateAndDeleteBranch {
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
index 53570a5..8648603 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.porcelain;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
@@ -16,7 +32,7 @@ import org.eclipse.jgit.revwalk.RevWalk;
 /**
  * Simple snippet which shows how to create a tag
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class CreateAndDeleteTag {
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
index 6e60a22..c09c1b7 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.porcelain;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
@@ -22,7 +38,7 @@ import org.eclipse.jgit.lib.Repository;
 /**
  * Simple snippet which shows how to package the contents of a branch into an archive file.
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class CreateArchive {
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
index 520d248..98b893a 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.porcelain;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.File;
 import java.io.IOException;
 
@@ -13,7 +29,7 @@ import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 /**
  * Simple snippet which shows how to initialize a new repository
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class InitRepository {
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
index 78f2670..2e4413d 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.porcelain;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 import java.util.List;
 
@@ -14,7 +30,7 @@ import org.eclipse.jgit.lib.Repository;
 /**
  * Simple snippet which shows how to list all Branches in a Git repository
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class ListBranches {
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java b/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
index 8dfcdd3..a4788dd 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.porcelain;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 import java.util.List;
 
@@ -15,7 +31,7 @@ import org.eclipse.jgit.notes.Note;
 /**
  * Simple snippet which shows how to load Notes in a Git repository
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class ListNotes {
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
index 8dc7465..b88fce0 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.porcelain;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 import java.util.Collection;
 
@@ -15,7 +31,7 @@ import org.eclipse.jgit.lib.Ref;
  * Simple snippet which shows how to list heads/tags of remote repositories without
  * a local repository
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class ListRemoteRepository {
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java b/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java
index 7b8367c..1b8ff78 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.porcelain;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 import java.util.Collection;
 
@@ -12,7 +28,7 @@ import org.eclipse.jgit.lib.Repository;
 /**
  * Snippet which shows how to iterate remotes, i.e. "git ls-remote"
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class ListRemotes {
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
index d1df6ea..82a73af 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.porcelain;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 import java.util.List;
 
@@ -14,7 +30,7 @@ import org.eclipse.jgit.lib.Repository;
 /**
  * Simple snippet which shows how to list all Tags
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class ListTags {
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
index 625f6e9..c10da7f 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
@@ -1,5 +1,20 @@
 package org.dstadler.jgit.porcelain;
 
+/*
+    Copyright 2013, 2014 Dominik Stadler
+    
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+    
+      http://www.apache.org/licenses/LICENSE-2.0
+    
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+*/
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -25,7 +40,7 @@ import org.eclipse.jgit.treewalk.filter.PathFilter;
  * Simple snippet which shows how to get a diff showing who
  * changed which line in a file
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class ShowBlame {
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
index ea59b43..34f8f8a 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.porcelain;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 import java.util.List;
 
@@ -23,7 +39,7 @@ import org.eclipse.jgit.treewalk.CanonicalTreeParser;
 /**
  * Simple snippet which shows how to show diffs between branches
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class ShowBranchDiff {
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
index 5936fb4..1aeb98a 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.porcelain;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 import java.util.List;
 
@@ -25,7 +41,7 @@ import org.eclipse.jgit.treewalk.filter.PathFilter;
 /**
  * Simple snippet which shows how to show diffs between branches
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class ShowFileDiff {
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
index 0795246..d1c1512 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.porcelain;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
@@ -13,7 +29,7 @@ import org.eclipse.jgit.revwalk.RevCommit;
 /**
  * Simple snippet which shows how to get the commit-ids for a file to provide log information.
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class ShowLog {
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java b/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
index 397b9f9..0dd5ca7 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.porcelain;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
@@ -14,7 +30,7 @@ import org.eclipse.jgit.lib.Repository;
  * Simple snippet which prints the Status of a git repository, i.e. modified/added/
  * removed/ignored files, similar to "git status"
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class ShowStatus {
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java b/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
index 9aed281..be06a4a 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.porcelain;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
diff --git a/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java b/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
index 08c5d3c..57b3531 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.unfinished;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
@@ -14,7 +30,7 @@ import org.eclipse.jgit.treewalk.TreeWalk;
 /**
  * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class BrowseTree {
 
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
index 226dfb6..1ad54fc 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.unfinished;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
@@ -14,7 +30,7 @@ import org.eclipse.jgit.revwalk.RevCommit;
 /**
  * Snippet which shows how to use PlotWalk to read from a specific commit.
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class ListChildrenOfCommit {
 
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java b/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
index 3f684a3..f3f06c6 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.unfinished;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
@@ -11,7 +27,7 @@ import org.eclipse.jgit.lib.Repository;
 /**
  * Snippet which shows how to work with the Index
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class ListIndex {
 
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
index 9d1c4a8..1a5c2c8 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.unfinished;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 import java.util.Collection;
 import java.util.Iterator;
@@ -18,7 +34,7 @@ import org.eclipse.jgit.lib.Repository;
 /**
  * Simple snippet which shows how to list all Tags
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class ListRefLog {
 
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
index 53dea0f..e08b2c2 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.unfinished;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.File;
 import java.io.IOException;
 
@@ -15,7 +31,7 @@ import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 /**
  * Simple snippet which shows how to clone a repository from a remote source
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class PullFromRemoteRepository {
 
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
index d7686e4..8becb13 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.unfinished;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.File;
 import java.io.IOException;
 
@@ -17,7 +33,7 @@ import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 /**
  * Simple snippet which shows how to poull from a remote repository from a remote source
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class PullRemoteRepository {
 
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
index 994bee1..c88ebf0 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.unfinished;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.File;
 import java.io.IOException;
 
@@ -15,7 +31,7 @@ import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 /**
  * Simple snippet which shows how to clone a repository from a remote source
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class PushToRemoteRepository {
 
diff --git a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
index 2aa1438..9fca6c6 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.unfinished;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.File;
 import java.io.IOException;
 
@@ -15,7 +31,7 @@ import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 /**
  * Simple snippet which shows how to clone a repository from a remote source
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class TrackMaster {
 
diff --git a/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java b/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java
index ddd540d..c9b259e 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.unfinished;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.File;
 import java.io.IOException;
 import java.util.Date;
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
index f87c826..b7d3f8e 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.unfinished;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
@@ -14,7 +30,7 @@ import org.eclipse.jgit.treewalk.TreeWalk;
 /**
  * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class WalkTreeNonRecursive {
 
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
index 82debfe..337d0d2 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
@@ -1,5 +1,21 @@
 package org.dstadler.jgit.unfinished;
 
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
@@ -14,7 +30,7 @@ import org.eclipse.jgit.treewalk.TreeWalk;
 /**
  * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
  * 
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
  */
 public class WalkTreeRecursive {
 

§§--§§
commit 1813172ad755522ee50650981db790f5dbeb14e3 579254e864ebc2f7cc8ca06ab0feea66db901e06
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon May 12 19:13:52 2014 +0200 
Message: Add sample for BranchTrackingStatus
---§

diff --git a/README.md b/README.md
index 5df6bda..06c023c 100644
--- a/README.md
+++ b/README.md
@@ -66,6 +66,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [List remotes configured for the current repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/PrintRemotes.java)
 * [Print out user information from Git](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java)
 * [Read file attributes, e.g. executeable state, file or directory, size, ...](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java)
+* [Use class BranchTrackingStatus to retrieve number of commits ahead/behind compared to remote branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java)
 
 #### Missing snippets
 
diff --git a/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java b/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java
new file mode 100644
index 0000000..ea8da5f
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java
@@ -0,0 +1,67 @@
+package org.dstadler.jgit.api;
+
+/*
+ * Copyright 2013, 2014 Dominik Stadler
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.BranchTrackingStatus;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+
+/**
+ * Snippet which shows how to use BranchTrackingStatus to print
+ * how many commits away the local git repository is from the 
+ * remote branches.
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class ShowBranchTrackingStatus {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        List<Ref> call = new Git(repository).branchList().call();
+        for (Ref ref : call) {
+            List<Integer> counts = getCounts(repository, ref.getName());
+            System.out.println("For branch: " + ref.getName());
+            System.out.println("Commits ahead : " + counts.get(0));
+            System.out.println("Commits behind : " + counts.get(1));
+            System.out.println();
+        }
+
+        repository.close();
+    }
+
+    private static List<Integer> getCounts(org.eclipse.jgit.lib.Repository repository, String branchName) throws IOException {
+        BranchTrackingStatus trackingStatus = BranchTrackingStatus.of(repository, branchName);
+        List<Integer> counts = new ArrayList<Integer>();
+        if (trackingStatus != null) {
+            counts.add(trackingStatus.getAheadCount());
+            counts.add(trackingStatus.getBehindCount());
+        } else {
+            System.out.println("Returned null, likely no remote tracking of branch " + branchName);
+            counts.add(0);
+            counts.add(0);
+        }
+        return counts;
+    }
+}

§§--§§
commit 653b211eff52a91b06714ce8e44e31a06e942ef9 1813172ad755522ee50650981db790f5dbeb14e3
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon May 12 20:06:20 2014 +0200 
Message: Add sample for 'git fetch'
---§

diff --git a/README.md b/README.md
index 06c023c..e140451 100644
--- a/README.md
+++ b/README.md
@@ -50,6 +50,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [Clone a remote reppository into a new local directory](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java)
 * [Iterate remote references in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java)
 * [List remote heads/tags without a local clone](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java)
+* [Fetch from remote repositories](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommits.java)
 
 * [List available Notes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java)
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommits.java b/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommits.java
new file mode 100644
index 0000000..cb7c394
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommits.java
@@ -0,0 +1,45 @@
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.transport.FetchResult;
+
+
+
+/**
+ * Simple snippet which shows how to fetch commits from a remote Git repository
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class FetchRemoteCommits {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        System.out.println("Starting fetch");
+        FetchResult result = new Git(repository).fetch().setCheckFetchedObjects(true).call();
+        System.out.println("Messages: " + result.getMessages());
+
+        repository.close();
+    }
+}

§§--§§
commit 17440df387070ba392e1028130ad77bc3627fecc 653b211eff52a91b06714ce8e44e31a06e942ef9
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Sun Jun 15 07:33:58 2014 +0200 
Message: Reorganize README slightly
---§

diff --git a/README.md b/README.md
index e140451..87e872e 100644
--- a/README.md
+++ b/README.md
@@ -25,6 +25,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 #### Currently the following snippets are available
 
 ##### General Repository handling
+
 * [Open an existing repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/OpenRepository.java)
 * [Create a new repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/CreateNewRepository.java)
 
@@ -45,15 +46,16 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [Write contents of branch into an compressed file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java)
 * [Blame, i.e. find out which commit changed specific lines in a file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java)
 * [Add and list Notes attached to commits](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java)
+* [List available Notes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java)
 * [Clean all untracked files](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java)
 
+##### Commands working with remote repositories
+
 * [Clone a remote reppository into a new local directory](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java)
 * [Iterate remote references in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java)
 * [List remote heads/tags without a local clone](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java)
 * [Fetch from remote repositories](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommits.java)
 
-* [List available Notes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java)
-
 ##### Low-level API
 
 * [Get the SHA-1 ref from a name, e.g. refs/heads/master](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetRefFromName.java)

§§--§§
commit 860dce4e5d3a94da2203ce87a75e62349ac0cc4e 17440df387070ba392e1028130ad77bc3627fecc
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Sun Jun 15 07:59:35 2014 +0200 
Message: New snippet for working with stashes
---§

diff --git a/README.md b/README.md
index 87e872e..8b9fed3 100644
--- a/README.md
+++ b/README.md
@@ -48,6 +48,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [Add and list Notes attached to commits](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java)
 * [List available Notes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java)
 * [Clean all untracked files](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java)
+* [Create, list, apply and drop stashes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java)
 
 ##### Commands working with remote repositories
 
@@ -82,7 +83,6 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * Remove a file from the index: http://stackoverflow.com/questions/4803462/jgit-java-git-library-unstaging-files
 * Git repo on Amazon S3: http://stackoverflow.com/questions/8744611/git-repository-on-s3-as-origin-not-as-backup http://stackoverflow.com/questions/7031729/publish-to-s3-using-git http://www.fancybeans.com/blog/2012/08/24/how-to-use-s3-as-a-private-git-repository/
 * Doing stuff without local storage: Using org.eclipse.jgit.storage.dfs.InMemoryRepository to clone a Git repo in-memory and work from there
-* Stashes, see http://wiki.eclipse.org/JGit/New_and_Noteworthy/2.0#StashApplyCommand
 * CherryPick
 * Rebase - http://stackoverflow.com/questions/22945257/jgit-how-to-squash-commits
 
@@ -113,3 +113,4 @@ Please note that the list of snippets is not yet complete, probably never will.
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
+some more text
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java b/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
new file mode 100644
index 0000000..9c3dcf2
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
@@ -0,0 +1,95 @@
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Collection;
+
+import org.apache.commons.io.FileUtils;
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+
+
+
+/**
+ * Simple snippet which shows how to use commands for stashing changes.
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class CreateListApplyAndDropStash {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare a new test-repository
+        Repository repository = CookbookHelper.createNewRepository();
+        Git git = new Git(repository);
+
+        // create a file
+        File file1 = new File(repository.getDirectory().getParent(), "testfile");
+        FileUtils.writeStringToFile(file1, "some text");
+        File file2 = new File(repository.getDirectory().getParent(), "testfile2");
+        FileUtils.writeStringToFile(file2, "some text");
+        
+        // add and commit the file
+        git.add()
+                .addFilepattern("testfile")
+                .call();
+        git.add()
+                .addFilepattern("testfile2")
+                .call();
+        git.commit()
+                .setMessage("Added testfiles")
+                .call();
+
+        // then modify the file
+        FileUtils.writeStringToFile(file1, "some more text", true);
+        
+        // push the changes to a new stash
+        RevCommit stash = git.stashCreate()
+                .call();
+
+        System.out.println("Created stash " + stash);
+
+        // then modify the 2nd file
+        FileUtils.writeStringToFile(file2, "some more text", true);
+        
+        // push the changes to a new stash
+        stash = git.stashCreate()
+                .call();
+
+        System.out.println("Created stash " + stash);
+
+        // list the stashes
+        Collection<RevCommit> stashes = git.stashList().call();
+        for(RevCommit rev : stashes) {
+            System.out.println("Found stash: " + rev);
+        }
+        
+        // drop the 1st stash without applying it
+        ObjectId call = git.stashDrop().setStashRef(0).call();
+        System.out.println("StashDrop returned: " + call);
+        
+        ObjectId applied = git.stashApply().setStashRef(stash.getName()).call();
+        System.out.println("Applied 2nd stash as: " + applied);
+
+        repository.close();
+    }
+}

§§--§§
commit 5649e1573e9e49b675e2f30ce06875190cd53961 860dce4e5d3a94da2203ce87a75e62349ac0cc4e
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Wed Jul 2 19:46:41 2014 +0200 
Message: Update ListBranches to show how to also find remote branches
---§

diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
index 2e4413d..eb8b370 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
@@ -21,6 +21,7 @@ import java.util.List;
 
 import org.dstadler.jgit.helper.CookbookHelper;
 import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.ListBranchCommand.ListMode;
 import org.eclipse.jgit.api.errors.GitAPIException;
 import org.eclipse.jgit.lib.Ref;
 import org.eclipse.jgit.lib.Repository;
@@ -37,11 +38,18 @@ public class ListBranches {
     public static void main(String[] args) throws IOException, GitAPIException {
         Repository repository = CookbookHelper.openJGitCookbookRepository();
 
+        System.out.println("Listing local branches:");
         List<Ref> call = new Git(repository).branchList().call();
         for (Ref ref : call) {
             System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
         }
 
+        System.out.println("Now including remote branches:");
+        call = new Git(repository).branchList().setListMode(ListMode.ALL).call();
+        for (Ref ref : call) {
+            System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        }
+        
         repository.close();
     }
 }

§§--§§
commit 285db581ff0d53da89ee61a1bf236cbfeae7cb1d 5649e1573e9e49b675e2f30ce06875190cd53961
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Wed Jul 2 20:03:06 2014 +0200 
Message: Show the difference when using all()
---§

diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
index d1c1512..ade6824 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
@@ -37,22 +37,31 @@ public class ShowLog {
         Repository repository = CookbookHelper.openJGitCookbookRepository();
 
         Iterable<RevCommit> logs = new Git(repository).log()
-                .all()
                 .call();
         int count = 0;
         for (RevCommit rev : logs) {
-            System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
             count++;
         }
         System.out.println("Had " + count + " commits overall on current branch");
-
+        
+        logs = new Git(repository).log()
+                .all()
+                .call();
+        count = 0;
+        for (RevCommit rev : logs) {
+            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+            count++;
+        }
+        System.out.println("Had " + count + " commits overall in repository");
+        
         logs = new Git(repository).log()
                 // for all log.all()
                 .addPath("README.md")
                 .call();
         count = 0;
         for (RevCommit rev : logs) {
-            System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
             count++;
         }
         System.out.println("Had " + count + " commits on README.md");
@@ -63,7 +72,7 @@ public class ShowLog {
                 .call();
         count = 0;
         for (RevCommit rev : logs) {
-            System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
             count++;
         }
         System.out.println("Had " + count + " commits on pom.xml");

§§--§§
commit 16bb7441616e796ca88ba189af6cbc7981a1e0c8 285db581ff0d53da89ee61a1bf236cbfeae7cb1d
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Wed Jul 2 20:04:53 2014 +0200 
Message: Convert files that have windows newlines
---§

diff --git a/pom.xml b/pom.xml
index 5fc9327..0260169 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1,46 +1,46 @@
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <groupId>org.dstadler.jgit</groupId>
-  <artifactId>jgit-cookbook</artifactId>
-  <packaging>jar</packaging>
-  <version>1.0-SNAPSHOT</version>
-  <name>jgit-cookbook</name>
-  <url>http://maven.apache.org</url>
-
-  <repositories>
-    <repository>
-      <id>jgit-repository</id>
-      <url>https://repo.eclipse.org/content/groups/releases/</url>
-    </repository>
-  </repositories>
-
-  <!-- Core Library -->
-  <dependencies>
-    <dependency>
-      <groupId>org.eclipse.jgit</groupId>
-      <artifactId>org.eclipse.jgit</artifactId>
-      <version>3.3.2.201404171909-r</version>
-    </dependency>
-
-	<dependency>
-		<groupId>commons-io</groupId>
-		<artifactId>commons-io</artifactId>
-		<version>2.4</version>
-	</dependency>
-  </dependencies>
-
-  <build>
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <version>3.1</version>
-        <configuration>
-          <source>1.5</source>
-          <target>1.5</target>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-</project>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>org.dstadler.jgit</groupId>
+  <artifactId>jgit-cookbook</artifactId>
+  <packaging>jar</packaging>
+  <version>1.0-SNAPSHOT</version>
+  <name>jgit-cookbook</name>
+  <url>http://maven.apache.org</url>
+
+  <repositories>
+    <repository>
+      <id>jgit-repository</id>
+      <url>https://repo.eclipse.org/content/groups/releases/</url>
+    </repository>
+  </repositories>
+
+  <!-- Core Library -->
+  <dependencies>
+    <dependency>
+      <groupId>org.eclipse.jgit</groupId>
+      <artifactId>org.eclipse.jgit</artifactId>
+      <version>3.3.2.201404171909-r</version>
+    </dependency>
+
+	<dependency>
+		<groupId>commons-io</groupId>
+		<artifactId>commons-io</artifactId>
+		<version>2.4</version>
+	</dependency>
+  </dependencies>
+
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <version>3.1</version>
+        <configuration>
+          <source>1.5</source>
+          <target>1.5</target>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+</project>
diff --git a/src/main/java/org/dstadler/jgit/CreateNewRepository.java b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
index 7101237..7fe2080 100644
--- a/src/main/java/org/dstadler/jgit/CreateNewRepository.java
+++ b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
@@ -1,48 +1,48 @@
-package org.dstadler.jgit;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-
-import org.apache.commons.io.FileUtils;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-/**
- * Simple snippet which shows how to create a new repository
- * 
- * @author dominik.stadler at gmx.at
- */
-public class CreateNewRepository {
-
-    public static void main(String[] args) throws IOException {
-        // prepare a new folder
-        File localPath = File.createTempFile("TestGitRepository", "");
-        localPath.delete();
-
-        // create the directory
-        Repository repository = FileRepositoryBuilder.create(new File(localPath, ".git"));
-        repository.create();
-
-        System.out.println("Having repository: " + repository.getDirectory());
-
-        repository.close();
-
-        FileUtils.deleteDirectory(localPath);
-    }
-}
+package org.dstadler.jgit;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.apache.commons.io.FileUtils;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+/**
+ * Simple snippet which shows how to create a new repository
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class CreateNewRepository {
+
+    public static void main(String[] args) throws IOException {
+        // prepare a new folder
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // create the directory
+        Repository repository = FileRepositoryBuilder.create(new File(localPath, ".git"));
+        repository.create();
+
+        System.out.println("Having repository: " + repository.getDirectory());
+
+        repository.close();
+
+        FileUtils.deleteDirectory(localPath);
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/OpenRepository.java b/src/main/java/org/dstadler/jgit/OpenRepository.java
index 17c8423..3f00bd7 100644
--- a/src/main/java/org/dstadler/jgit/OpenRepository.java
+++ b/src/main/java/org/dstadler/jgit/OpenRepository.java
@@ -1,45 +1,45 @@
-package org.dstadler.jgit;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
-
-/**
- * Simple snippet which shows how to open an existing repository
- * 
- * @author dominik.stadler at gmx.at
- */
-public class OpenRepository {
-
-    public static void main(String[] args) throws IOException {
-        FileRepositoryBuilder builder = new FileRepositoryBuilder();
-        Repository repository = builder.setGitDir(new File("/my/git/directory"))
-                .readEnvironment() // scan environment GIT_* variables
-                .findGitDir() // scan up the file system tree
-                .build();
-
-        System.out.println("Having repository: " + repository.getDirectory());
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to open an existing repository
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class OpenRepository {
+
+    public static void main(String[] args) throws IOException {
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder.setGitDir(new File("/my/git/directory"))
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
+
+        System.out.println("Having repository: " + repository.getDirectory());
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
index cac3624..befddf6 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
@@ -1,39 +1,39 @@
-package org.dstadler.jgit.api;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-
-/**
- * Simple snippet which shows how to retrieve a Ref for some reference string.
- */
-public class GetRefFromName {
-
-    public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
-        Ref head = repository.getRef("refs/heads/master");
-        System.out.println("Ref of refs/heads/master: " + head);
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+
+/**
+ * Simple snippet which shows how to retrieve a Ref for some reference string.
+ */
+public class GetRefFromName {
+
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
+        Ref head = repository.getRef("refs/heads/master");
+        System.out.println("Ref of refs/heads/master: " + head);
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
index c72be00..e4a8dad 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
@@ -1,45 +1,45 @@
-package org.dstadler.jgit.api;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevWalk;
-
-/**
- * Simple snippet which shows how to use RevWalk to iterate over objects
- */
-public class GetRevCommitFromObjectId {
-
-    public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Ref head = repository.getRef("refs/heads/master");
-        System.out.println("Found head: " + head);
-
-        // a RevWalk allows to walk over commits based on some filtering that is defined
-        RevWalk walk = new RevWalk(repository);
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        System.out.println("Found Commit: " + commit);
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevWalk;
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over objects
+ */
+public class GetRevCommitFromObjectId {
+
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        Ref head = repository.getRef("refs/heads/master");
+        System.out.println("Found head: " + head);
+
+        // a RevWalk allows to walk over commits based on some filtering that is defined
+        RevWalk walk = new RevWalk(repository);
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        System.out.println("Found Commit: " + commit);
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
index 593ee58..eece952 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
@@ -1,51 +1,51 @@
-package org.dstadler.jgit.api;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevTree;
-import org.eclipse.jgit.revwalk.RevWalk;
-
-/**
- * Simple snippet which shows how to use RevWalk to iterate over objects
- */
-public class GetRevTreeFromObjectId {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Ref head = repository.getRef("HEAD");
-
-        // a RevWalk allows to walk over commits based on some filtering that is defined
-        RevWalk walk = new RevWalk(repository);
-
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        System.out.println("Commit: " + commit);
-
-        // a commit points to a tree
-        RevTree tree = walk.parseTree(commit.getTree().getId());
-        System.out.println("Found Tree: " + tree);
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over objects
+ */
+public class GetRevTreeFromObjectId {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        Ref head = repository.getRef("HEAD");
+
+        // a RevWalk allows to walk over commits based on some filtering that is defined
+        RevWalk walk = new RevWalk(repository);
+
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        System.out.println("Commit: " + commit);
+
+        // a commit points to a tree
+        RevTree tree = walk.parseTree(commit.getTree().getId());
+        System.out.println("Found Tree: " + tree);
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/api/PrintRemotes.java b/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
index c5476df..c333d78 100755
--- a/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
+++ b/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
@@ -1,44 +1,44 @@
-package org.dstadler.jgit.api;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-import java.util.Set;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.lib.Config;
-import org.eclipse.jgit.lib.Repository;
-
-/**
- * Simple snippet which shows how to retrieve the list of remotes from the configuration
- */
-public class PrintRemotes {
-
-    public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Config storedConfig = repository.getConfig();
-        Set<String> remotes = storedConfig.getSubsections("remote");
-
-        for (String remoteName : remotes) {
-            String url = storedConfig.getString("remote", remoteName, "url");
-            System.out.println(remoteName + " " + url);
-        }
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.Set;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.Config;
+import org.eclipse.jgit.lib.Repository;
+
+/**
+ * Simple snippet which shows how to retrieve the list of remotes from the configuration
+ */
+public class PrintRemotes {
+
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        Config storedConfig = repository.getConfig();
+        Set<String> remotes = storedConfig.getSubsections("remote");
+
+        for (String remoteName : remotes) {
+            String url = storedConfig.getString("remote", remoteName, "url");
+            System.out.println(remoteName + " " + url);
+        }
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
index ef51cf1..5ac537c 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
@@ -1,57 +1,57 @@
-package org.dstadler.jgit.api;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.lib.ObjectLoader;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevTree;
-import org.eclipse.jgit.revwalk.RevWalk;
-
-/**
- * Simple snippet which shows how to retrieve a Ref for some reference string.
- */
-public class ReadBlobContents {
-
-    public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
-        Ref head = repository.getRef("refs/heads/master");
-        System.out.println("Ref of refs/heads/master: " + head);
-
-        System.out.println("Print contents of head of master branch, i.e. the latest commit information");
-        ObjectLoader loader = repository.open(head.getObjectId());
-        loader.copyTo(System.out);
-
-        System.out.println("Print contents of tree of head of master branch, i.e. the latest binary tree information");
-
-        // a commit points to a tree
-        RevWalk walk = new RevWalk(repository);
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        RevTree tree = walk.parseTree(commit.getTree().getId());
-        System.out.println("Found Tree: " + tree);
-        loader = repository.open(tree.getId());
-        loader.copyTo(System.out);
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+
+/**
+ * Simple snippet which shows how to retrieve a Ref for some reference string.
+ */
+public class ReadBlobContents {
+
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
+        Ref head = repository.getRef("refs/heads/master");
+        System.out.println("Ref of refs/heads/master: " + head);
+
+        System.out.println("Print contents of head of master branch, i.e. the latest commit information");
+        ObjectLoader loader = repository.open(head.getObjectId());
+        loader.copyTo(System.out);
+
+        System.out.println("Print contents of tree of head of master branch, i.e. the latest binary tree information");
+
+        // a commit points to a tree
+        RevWalk walk = new RevWalk(repository);
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        RevTree tree = walk.parseTree(commit.getTree().getId());
+        System.out.println("Found Tree: " + tree);
+        loader = repository.open(tree.getId());
+        loader.copyTo(System.out);
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
index b2c5a21..932ec1b 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
@@ -1,57 +1,57 @@
-package org.dstadler.jgit.api;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.ObjectLoader;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevObject;
-import org.eclipse.jgit.revwalk.RevWalk;
-
-/**
- * Simple snippet which shows how to use RevWalk to read tags
- */
-public class ReadTagFromName {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // a RevWalk allows to retrieve information from the repository
-        RevWalk walk = new RevWalk(repository);
-
-        // a simple tag that is not annotated
-        Ref simpleTag = repository.getRef("initialtag");
-        RevObject any = walk.parseAny(simpleTag.getObjectId());
-        System.out.println("Commit: " + any);
-
-        // an annotated tag
-        Ref annotatedTag = repository.getRef("secondtag");
-        any = walk.parseAny(annotatedTag.getObjectId());
-        System.out.println("Tag: " + any);
-
-        // finally try to print out the tag-content
-        System.out.println("\nTag-Content: \n");
-        ObjectLoader loader = repository.open(annotatedTag.getObjectId());
-        loader.copyTo(System.out);
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevObject;
+import org.eclipse.jgit.revwalk.RevWalk;
+
+/**
+ * Simple snippet which shows how to use RevWalk to read tags
+ */
+public class ReadTagFromName {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        // a RevWalk allows to retrieve information from the repository
+        RevWalk walk = new RevWalk(repository);
+
+        // a simple tag that is not annotated
+        Ref simpleTag = repository.getRef("initialtag");
+        RevObject any = walk.parseAny(simpleTag.getObjectId());
+        System.out.println("Commit: " + any);
+
+        // an annotated tag
+        Ref annotatedTag = repository.getRef("secondtag");
+        any = walk.parseAny(annotatedTag.getObjectId());
+        System.out.println("Tag: " + any);
+
+        // finally try to print out the tag-content
+        System.out.println("\nTag-Content: \n");
+        ObjectLoader loader = repository.open(annotatedTag.getObjectId());
+        loader.copyTo(System.out);
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java b/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
index ac774a0..0beabf6 100755
--- a/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
@@ -1,43 +1,43 @@
-package org.dstadler.jgit.api;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.lib.Config;
-import org.eclipse.jgit.lib.Repository;
-
-/**
- * Simple snippet which shows how to retrieve the user name and email that is configured in Git.
- */
-public class ReadUserConfig {
-
-    public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Config config = repository.getConfig();
-        String name = config.getString("user", null, "name");
-        String email = config.getString("user", null, "email");
-        if (name == null || email == null) {
-            System.out.println("User identity is unknown!");
-        } else {
-            System.out.println("User identity is " + name + " <" + email + ">");
-        }
-        repository.close();
-    }
-}
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.Config;
+import org.eclipse.jgit.lib.Repository;
+
+/**
+ * Simple snippet which shows how to retrieve the user name and email that is configured in Git.
+ */
+public class ReadUserConfig {
+
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        Config config = repository.getConfig();
+        String name = config.getString("user", null, "name");
+        String email = config.getString("user", null, "email");
+        if (name == null || email == null) {
+            System.out.println("User identity is unknown!");
+        } else {
+            System.out.println("User identity is " + name + " <" + email + ">");
+        }
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/api/ResolveRef.java b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
index d55b0fd..026b2b2 100644
--- a/src/main/java/org/dstadler/jgit/api/ResolveRef.java
+++ b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
@@ -1,45 +1,45 @@
-package org.dstadler.jgit.api;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.lib.ObjectId;
-import org.eclipse.jgit.lib.Repository;
-
-
-
-/**
- * Simple snippet which shows how to retrieve an ObjectId for some name.
- */
-public class ResolveRef {
-
-    public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // basic syntax is similar to getRef()
-        ObjectId id = repository.resolve("HEAD");
-        System.out.println("ObjectId of HEAD: " + id);
-
-        // however resolve() supports almost all of the git-syntax, where getRef() only works on names
-        id = repository.resolve("HEAD^1");
-        System.out.println("ObjectId of HEAD: " + id);
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to retrieve an ObjectId for some name.
+ */
+public class ResolveRef {
+
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        // basic syntax is similar to getRef()
+        ObjectId id = repository.resolve("HEAD");
+        System.out.println("ObjectId of HEAD: " + id);
+
+        // however resolve() supports almost all of the git-syntax, where getRef() only works on names
+        id = repository.resolve("HEAD^1");
+        System.out.println("ObjectId of HEAD: " + id);
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
index 3e9b3c7..1c1b855 100644
--- a/src/main/java/org/dstadler/jgit/api/WalkRev.java
+++ b/src/main/java/org/dstadler/jgit/api/WalkRev.java
@@ -1,56 +1,56 @@
-package org.dstadler.jgit.api;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevWalk;
-
-
-
-/**
- * Simple snippet which shows how to use RevWalk to iterate over objects
- */
-public class WalkRev {
-
-    public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Ref head = repository.getRef("refs/heads/master");
-
-        // a RevWalk allows to walk over commits based on some filtering that is defined
-        RevWalk walk = new RevWalk(repository);
-
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        System.out.println("Start-Commit: " + commit);
-
-        System.out.println("Walking all commits starting at HEAD");
-        walk.markStart(commit);
-        int count = 0;
-        for (RevCommit rev : walk) {
-            System.out.println("Commit: " + rev);
-            count++;
-        }
-        System.out.println(count);
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevWalk;
+
+
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over objects
+ */
+public class WalkRev {
+
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        Ref head = repository.getRef("refs/heads/master");
+
+        // a RevWalk allows to walk over commits based on some filtering that is defined
+        RevWalk walk = new RevWalk(repository);
+
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        System.out.println("Start-Commit: " + commit);
+
+        System.out.println("Walking all commits starting at HEAD");
+        walk.markStart(commit);
+        int count = 0;
+        for (RevCommit rev : walk) {
+            System.out.println("Commit: " + rev);
+            count++;
+        }
+        System.out.println(count);
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
index 4f9976e..154eca6 100644
--- a/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
+++ b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
@@ -1,48 +1,48 @@
-package org.dstadler.jgit.helper;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
-public class CookbookHelper {
-
-    public static Repository openJGitCookbookRepository() throws IOException {
-        FileRepositoryBuilder builder = new FileRepositoryBuilder();
-        Repository repository = builder
-                .readEnvironment() // scan environment GIT_* variables
-                .findGitDir() // scan up the file system tree
-                .build();
-        return repository;
-    }
-
-    public static Repository createNewRepository() throws IOException {
-        // prepare a new folder
-        File localPath = File.createTempFile("TestGitRepository", "");
-        localPath.delete();
-
-        // create the directory
-        Repository repository = FileRepositoryBuilder.create(new File(localPath, ".git"));
-        repository.create();
-
-        return repository;
-    }
-}
+package org.dstadler.jgit.helper;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+public class CookbookHelper {
+
+    public static Repository openJGitCookbookRepository() throws IOException {
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
+        return repository;
+    }
+
+    public static Repository createNewRepository() throws IOException {
+        // prepare a new folder
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // create the directory
+        Repository repository = FileRepositoryBuilder.create(new File(localPath, ".git"));
+        repository.create();
+
+        return repository;
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
index c1f28aa..c4ccddb 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
@@ -1,54 +1,54 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Repository;
-
-
-
-/**
- * Simple snippet which shows how to add a file to the index
- * 
- * @author dominik.stadler at gmx.at
- */
-public class AddFile {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        // prepare a new test-repository
-        Repository repository = CookbookHelper.createNewRepository();
-        Git git = new Git(repository);
-
-        // create the file
-        File myfile = new File(repository.getDirectory().getParent(), "testfile");
-        myfile.createNewFile();
-
-        // run the add-call
-        git.add()
-                .addFilepattern("testfile")
-                .call();
-
-        System.out.println("Added file " + myfile + " to repository at " + repository.getDirectory());
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to add a file to the index
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class AddFile {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare a new test-repository
+        Repository repository = CookbookHelper.createNewRepository();
+        Git git = new Git(repository);
+
+        // create the file
+        File myfile = new File(repository.getDirectory().getParent(), "testfile");
+        myfile.createNewFile();
+
+        // run the add-call
+        git.add()
+                .addFilepattern("testfile")
+                .call();
+
+        System.out.println("Added file " + myfile + " to repository at " + repository.getDirectory());
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java b/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
index e8a2350..fef582f 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
@@ -1,59 +1,59 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-import java.util.Set;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Repository;
-
-
-
-/**
- * Simple snippet which shows how to list all Tags
- *
- * @author dominik.stadler at gmx.at
- */
-public class CleanUntrackedFiles {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.createNewRepository();
-
-        System.out.println("Repository at " + repository.getWorkTree());
-
-        File untrackedFile = File.createTempFile("untracked", ".txt", repository.getWorkTree());
-        File untrackedDir = File.createTempFile("untrackedDir", "", repository.getWorkTree());
-        untrackedDir.delete();
-        untrackedDir.mkdirs();
-
-        System.out.println("Untracked exists: " + untrackedFile.exists() + " Dir: " + untrackedDir.exists() + "/" + untrackedDir.isDirectory());
-
-        Set<String> removed = new Git(repository).clean().setCleanDirectories(true).call();
-        for(String item : removed) {
-        	System.out.println("Removed: " + item);
-        }
-        System.out.println("Removed " + removed.size() + " items");
-
-        System.out.println("Untracked after: " + untrackedFile.exists() + " Dir: " + untrackedDir.exists() + "/" + untrackedDir.isDirectory());
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Set;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to list all Tags
+ *
+ * @author dominik.stadler at gmx.at
+ */
+public class CleanUntrackedFiles {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.createNewRepository();
+
+        System.out.println("Repository at " + repository.getWorkTree());
+
+        File untrackedFile = File.createTempFile("untracked", ".txt", repository.getWorkTree());
+        File untrackedDir = File.createTempFile("untrackedDir", "", repository.getWorkTree());
+        untrackedDir.delete();
+        untrackedDir.mkdirs();
+
+        System.out.println("Untracked exists: " + untrackedFile.exists() + " Dir: " + untrackedDir.exists() + "/" + untrackedDir.isDirectory());
+
+        Set<String> removed = new Git(repository).clean().setCleanDirectories(true).call();
+        for(String item : removed) {
+        	System.out.println("Removed: " + item);
+        }
+        System.out.println("Removed " + removed.size() + " items");
+
+        System.out.println("Untracked after: " + untrackedFile.exists() + " Dir: " + untrackedDir.exists() + "/" + untrackedDir.isDirectory());
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
index 72e96ed..3426d57 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
@@ -1,63 +1,63 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.api.errors.InvalidRemoteException;
-import org.eclipse.jgit.api.errors.TransportException;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
-
-/**
- * Simple snippet which shows how to clone a repository from a remote source
- * 
- * @author dominik.stadler at gmx.at
- */
-public class CloneRemoteRepository {
-
-    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
-
-    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-        // prepare a new folder for the cloned repository
-        File localPath = File.createTempFile("TestGitRepository", "");
-        localPath.delete();
-
-        // then clone
-        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
-        Git.cloneRepository()
-                .setURI(REMOTE_URL)
-                .setDirectory(localPath)
-                .call();
-
-        // now open the created repository
-        FileRepositoryBuilder builder = new FileRepositoryBuilder();
-        Repository repository = builder.setGitDir(localPath)
-                .readEnvironment() // scan environment GIT_* variables
-                .findGitDir() // scan up the file system tree
-                .build();
-
-        System.out.println("Having repository: " + repository.getDirectory());
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to clone a repository from a remote source
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class CloneRemoteRepository {
+
+    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        // prepare a new folder for the cloned repository
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // then clone
+        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+        Git.cloneRepository()
+                .setURI(REMOTE_URL)
+                .setDirectory(localPath)
+                .call();
+
+        // now open the created repository
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder.setGitDir(localPath)
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
+
+        System.out.println("Having repository: " + repository.getDirectory());
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
index 9e91b69..9ab7f1b 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
@@ -1,59 +1,59 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Repository;
-
-
-
-/**
- * Simple snippet which shows how to commit a file
- * 
- * @author dominik.stadler at gmx.at
- */
-public class CommitFile {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        // prepare a new test-repository
-        Repository repository = CookbookHelper.createNewRepository();
-        Git git = new Git(repository);
-
-        // create the file
-        File myfile = new File(repository.getDirectory().getParent(), "testfile");
-        myfile.createNewFile();
-
-        // run the add
-        git.add()
-                .addFilepattern("testfile")
-                .call();
-
-        // and then commit the changes
-        git.commit()
-                .setMessage("Added testfile")
-                .call();
-
-        System.out.println("Committed file " + myfile + " to repository at " + repository.getDirectory());
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to commit a file
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class CommitFile {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare a new test-repository
+        Repository repository = CookbookHelper.createNewRepository();
+        Git git = new Git(repository);
+
+        // create the file
+        File myfile = new File(repository.getDirectory().getParent(), "testfile");
+        myfile.createNewFile();
+
+        // run the add
+        git.add()
+                .addFilepattern("testfile")
+                .call();
+
+        // and then commit the changes
+        git.commit()
+                .setMessage("Added testfile")
+                .call();
+
+        System.out.println("Committed file " + myfile + " to repository at " + repository.getDirectory());
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
index eb00114..a877932 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
@@ -1,69 +1,69 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-import java.util.List;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-
-
-
-/**
- * Simple snippet which shows how to create and delete branches
- * 
- * @author dominik.stadler at gmx.at
- */
-public class CreateAndDeleteBranch {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        // prepare test-repository
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-        Git git = new Git(repository);
-
-        List<Ref> call = new Git(repository).branchList().call();
-        for (Ref ref : call) {
-            System.out.println("Branch-Before: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-        }
-
-        // run the add-call
-        git.branchCreate()
-                .setName("testbranch")
-                .call();
-
-        call = new Git(repository).branchList().call();
-        for (Ref ref : call) {
-            System.out.println("Branch-Created: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-        }
-
-        // run the delete-call
-        git.branchDelete()
-                .setBranchNames("testbranch")
-                .call();
-
-        call = new Git(repository).branchList().call();
-        for (Ref ref : call) {
-            System.out.println("Branch-After: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-        }
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to create and delete branches
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class CreateAndDeleteBranch {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare test-repository
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+        Git git = new Git(repository);
+
+        List<Ref> call = new Git(repository).branchList().call();
+        for (Ref ref : call) {
+            System.out.println("Branch-Before: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        }
+
+        // run the add-call
+        git.branchCreate()
+                .setName("testbranch")
+                .call();
+
+        call = new Git(repository).branchList().call();
+        for (Ref ref : call) {
+            System.out.println("Branch-Created: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        }
+
+        // run the delete-call
+        git.branchDelete()
+                .setBranchNames("testbranch")
+                .call();
+
+        call = new Git(repository).branchList().call();
+        for (Ref ref : call) {
+            System.out.println("Branch-After: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        }
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
index 8648603..9ea9df6 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
@@ -1,73 +1,73 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.ObjectId;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevWalk;
-
-
-
-/**
- * Simple snippet which shows how to create a tag
- * 
- * @author dominik.stadler at gmx.at
- */
-public class CreateAndDeleteTag {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        // prepare test-repository
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-        Git git = new Git(repository);
-
-        // remove the tag before creating it
-        git.tagDelete().setTags("tag_for_testing").call();
-
-        // set it on the current HEAD
-        Ref tag = git.tag().setName("tag_for_testing").call();
-        System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
-
-        // remove the tag again
-        git.tagDelete().setTags("tag_for_testing").call();
-
-        // read some other commit and set the tag on it
-        ObjectId id = repository.resolve("HEAD^");
-        RevWalk walk = new RevWalk(repository);
-        RevCommit commit = walk.parseCommit(id);
-        tag = git.tag().setObjectId(commit).setName("tag_for_testing").call();
-        System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
-
-        // remove the tag again
-        git.tagDelete().setTags("tag_for_testing").call();
-
-        // create an annotated tag
-        tag = git.tag().setName("tag_for_testing").setAnnotated(true).call();
-        System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
-
-        // remove the tag again
-        git.tagDelete().setTags("tag_for_testing").call();
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevWalk;
+
+
+
+/**
+ * Simple snippet which shows how to create a tag
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class CreateAndDeleteTag {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare test-repository
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+        Git git = new Git(repository);
+
+        // remove the tag before creating it
+        git.tagDelete().setTags("tag_for_testing").call();
+
+        // set it on the current HEAD
+        Ref tag = git.tag().setName("tag_for_testing").call();
+        System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
+
+        // remove the tag again
+        git.tagDelete().setTags("tag_for_testing").call();
+
+        // read some other commit and set the tag on it
+        ObjectId id = repository.resolve("HEAD^");
+        RevWalk walk = new RevWalk(repository);
+        RevCommit commit = walk.parseCommit(id);
+        tag = git.tag().setObjectId(commit).setName("tag_for_testing").call();
+        System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
+
+        // remove the tag again
+        git.tagDelete().setTags("tag_for_testing").call();
+
+        // create an annotated tag
+        tag = git.tag().setName("tag_for_testing").setAnnotated(true).call();
+        System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
+
+        // remove the tag again
+        git.tagDelete().setTags("tag_for_testing").call();
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
index c09c1b7..b30f1ac 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
@@ -1,99 +1,99 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.OutputStream;
-import java.util.Collections;
-import java.util.zip.ZipEntry;
-import java.util.zip.ZipOutputStream;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.ArchiveCommand;
-import org.eclipse.jgit.api.ArchiveCommand.Format;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.FileMode;
-import org.eclipse.jgit.lib.ObjectLoader;
-import org.eclipse.jgit.lib.Repository;
-
-
-
-/**
- * Simple snippet which shows how to package the contents of a branch into an archive file.
- * 
- * @author dominik.stadler at gmx.at
- */
-public class CreateArchive {
-
-    /**
-     * A custom format for Zip-files, unfortunately JGit does not come with any pre-defined ones
-     */
-    private static final class ZipArchiveFormat implements Format<ZipOutputStream> {
-
-        public ZipOutputStream createArchiveOutputStream(OutputStream s) throws IOException {
-            return new ZipOutputStream(s);
-        }
-
-        public void putEntry(ZipOutputStream out, String path, FileMode mode, ObjectLoader loader) throws IOException {
-            ZipEntry entry = new ZipEntry(path);
-            out.putNextEntry(entry);
-            out.write(loader.getBytes());
-            out.closeEntry();
-        }
-
-        public Iterable<String> suffixes() {
-            return Collections.singleton(".zip");
-        }
-    }
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-
-        File file = File.createTempFile("test", ".zip");
-        try {
-
-            // make the archive format known
-            ArchiveCommand.registerFormat("zip", new ZipArchiveFormat());
-            try {
-                // this is the file that we write the archive to
-                OutputStream out = new FileOutputStream(file);
-                try {
-                    // finally call the ArchiveCommand to write out using the given format
-                    new Git(repository).archive()
-                            .setTree(repository.resolve("master"))
-                            .setFormat("zip")
-                            .setOutputStream(out)
-                            .call();
-                } finally {
-                    out.close();
-                }
-            } finally {
-                ArchiveCommand.unregisterFormat("zip");
-            }
-
-            System.out.println("Wrote " + file.length() + " bytes to " + file);
-        } finally {
-            file.delete();
-        }
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.util.Collections;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipOutputStream;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.ArchiveCommand;
+import org.eclipse.jgit.api.ArchiveCommand.Format;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.FileMode;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to package the contents of a branch into an archive file.
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class CreateArchive {
+
+    /**
+     * A custom format for Zip-files, unfortunately JGit does not come with any pre-defined ones
+     */
+    private static final class ZipArchiveFormat implements Format<ZipOutputStream> {
+
+        public ZipOutputStream createArchiveOutputStream(OutputStream s) throws IOException {
+            return new ZipOutputStream(s);
+        }
+
+        public void putEntry(ZipOutputStream out, String path, FileMode mode, ObjectLoader loader) throws IOException {
+            ZipEntry entry = new ZipEntry(path);
+            out.putNextEntry(entry);
+            out.write(loader.getBytes());
+            out.closeEntry();
+        }
+
+        public Iterable<String> suffixes() {
+            return Collections.singleton(".zip");
+        }
+    }
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+
+        File file = File.createTempFile("test", ".zip");
+        try {
+
+            // make the archive format known
+            ArchiveCommand.registerFormat("zip", new ZipArchiveFormat());
+            try {
+                // this is the file that we write the archive to
+                OutputStream out = new FileOutputStream(file);
+                try {
+                    // finally call the ArchiveCommand to write out using the given format
+                    new Git(repository).archive()
+                            .setTree(repository.resolve("master"))
+                            .setFormat("zip")
+                            .setOutputStream(out)
+                            .call();
+                } finally {
+                    out.close();
+                }
+            } finally {
+                ArchiveCommand.unregisterFormat("zip");
+            }
+
+            System.out.println("Wrote " + file.length() + " bytes to " + file);
+        } finally {
+            file.delete();
+        }
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java b/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
index 9c3dcf2..492e81b 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
@@ -1,95 +1,95 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-import java.util.Collection;
-
-import org.apache.commons.io.FileUtils;
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.ObjectId;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-
-
-
-/**
- * Simple snippet which shows how to use commands for stashing changes.
- * 
- * @author dominik.stadler at gmx.at
- */
-public class CreateListApplyAndDropStash {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        // prepare a new test-repository
-        Repository repository = CookbookHelper.createNewRepository();
-        Git git = new Git(repository);
-
-        // create a file
-        File file1 = new File(repository.getDirectory().getParent(), "testfile");
-        FileUtils.writeStringToFile(file1, "some text");
-        File file2 = new File(repository.getDirectory().getParent(), "testfile2");
-        FileUtils.writeStringToFile(file2, "some text");
-        
-        // add and commit the file
-        git.add()
-                .addFilepattern("testfile")
-                .call();
-        git.add()
-                .addFilepattern("testfile2")
-                .call();
-        git.commit()
-                .setMessage("Added testfiles")
-                .call();
-
-        // then modify the file
-        FileUtils.writeStringToFile(file1, "some more text", true);
-        
-        // push the changes to a new stash
-        RevCommit stash = git.stashCreate()
-                .call();
-
-        System.out.println("Created stash " + stash);
-
-        // then modify the 2nd file
-        FileUtils.writeStringToFile(file2, "some more text", true);
-        
-        // push the changes to a new stash
-        stash = git.stashCreate()
-                .call();
-
-        System.out.println("Created stash " + stash);
-
-        // list the stashes
-        Collection<RevCommit> stashes = git.stashList().call();
-        for(RevCommit rev : stashes) {
-            System.out.println("Found stash: " + rev);
-        }
-        
-        // drop the 1st stash without applying it
-        ObjectId call = git.stashDrop().setStashRef(0).call();
-        System.out.println("StashDrop returned: " + call);
-        
-        ObjectId applied = git.stashApply().setStashRef(stash.getName()).call();
-        System.out.println("Applied 2nd stash as: " + applied);
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Collection;
+
+import org.apache.commons.io.FileUtils;
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+
+
+
+/**
+ * Simple snippet which shows how to use commands for stashing changes.
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class CreateListApplyAndDropStash {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare a new test-repository
+        Repository repository = CookbookHelper.createNewRepository();
+        Git git = new Git(repository);
+
+        // create a file
+        File file1 = new File(repository.getDirectory().getParent(), "testfile");
+        FileUtils.writeStringToFile(file1, "some text");
+        File file2 = new File(repository.getDirectory().getParent(), "testfile2");
+        FileUtils.writeStringToFile(file2, "some text");
+        
+        // add and commit the file
+        git.add()
+                .addFilepattern("testfile")
+                .call();
+        git.add()
+                .addFilepattern("testfile2")
+                .call();
+        git.commit()
+                .setMessage("Added testfiles")
+                .call();
+
+        // then modify the file
+        FileUtils.writeStringToFile(file1, "some more text", true);
+        
+        // push the changes to a new stash
+        RevCommit stash = git.stashCreate()
+                .call();
+
+        System.out.println("Created stash " + stash);
+
+        // then modify the 2nd file
+        FileUtils.writeStringToFile(file2, "some more text", true);
+        
+        // push the changes to a new stash
+        stash = git.stashCreate()
+                .call();
+
+        System.out.println("Created stash " + stash);
+
+        // list the stashes
+        Collection<RevCommit> stashes = git.stashList().call();
+        for(RevCommit rev : stashes) {
+            System.out.println("Found stash: " + rev);
+        }
+        
+        // drop the 1st stash without applying it
+        ObjectId call = git.stashDrop().setStashRef(0).call();
+        System.out.println("StashDrop returned: " + call);
+        
+        ObjectId applied = git.stashApply().setStashRef(stash.getName()).call();
+        System.out.println("Applied 2nd stash as: " + applied);
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
index 98b893a..e090fc1 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
@@ -1,51 +1,51 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
-
-/**
- * Simple snippet which shows how to initialize a new repository
- * 
- * @author dominik.stadler at gmx.at
- */
-public class InitRepository {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        // run the init-call
-        File dir = File.createTempFile("gitinit", ".test");
-        dir.delete();
-
-        Git.init()
-                .setDirectory(dir)
-                .call();
-
-        Repository repository = FileRepositoryBuilder.create(new File(dir.getAbsolutePath(), ".git"));
-
-        System.out.println("Created a new repository at " + repository.getDirectory());
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to initialize a new repository
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class InitRepository {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // run the init-call
+        File dir = File.createTempFile("gitinit", ".test");
+        dir.delete();
+
+        Git.init()
+                .setDirectory(dir)
+                .call();
+
+        Repository repository = FileRepositoryBuilder.create(new File(dir.getAbsolutePath(), ".git"));
+
+        System.out.println("Created a new repository at " + repository.getDirectory());
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
index b88fce0..f3833c5 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
@@ -1,53 +1,53 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-import java.util.Collection;
-
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.api.errors.InvalidRemoteException;
-import org.eclipse.jgit.api.errors.TransportException;
-import org.eclipse.jgit.lib.Ref;
-
-
-
-/**
- * Simple snippet which shows how to list heads/tags of remote repositories without
- * a local repository
- * 
- * @author dominik.stadler at gmx.at
- */
-public class ListRemoteRepository {
-
-    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
-
-    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-        // then clone
-        System.out.println("Listing remote repository " + REMOTE_URL);
-        Collection<Ref> refs = Git.lsRemoteRepository()
-                .setHeads(true)
-                .setTags(true)
-                .setRemote(REMOTE_URL)
-                .call();
-
-        for (Ref ref : refs) {
-            System.out.println("Ref: " + ref);
-        }
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.Collection;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.lib.Ref;
+
+
+
+/**
+ * Simple snippet which shows how to list heads/tags of remote repositories without
+ * a local repository
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class ListRemoteRepository {
+
+    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        // then clone
+        System.out.println("Listing remote repository " + REMOTE_URL);
+        Collection<Ref> refs = Git.lsRemoteRepository()
+                .setHeads(true)
+                .setTags(true)
+                .setRemote(REMOTE_URL)
+                .call();
+
+        for (Ref ref : refs) {
+            System.out.println("Ref: " + ref);
+        }
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
index 82a73af..9e9a3e1 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
@@ -1,47 +1,47 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-import java.util.List;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-
-
-
-/**
- * Simple snippet which shows how to list all Tags
- * 
- * @author dominik.stadler at gmx.at
- */
-public class ListTags {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        List<Ref> call = new Git(repository).tagList().call();
-        for (Ref ref : call) {
-            System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-        }
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to list all Tags
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class ListTags {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        List<Ref> call = new Git(repository).tagList().call();
+        for (Ref ref : call) {
+            System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        }
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
index c10da7f..58b4b27 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
@@ -1,93 +1,93 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-    Copyright 2013, 2014 Dominik Stadler
-    
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-    
-      http://www.apache.org/licenses/LICENSE-2.0
-    
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
-*/
-
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-
-import org.apache.commons.io.IOUtils;
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.BlameCommand;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.blame.BlameResult;
-import org.eclipse.jgit.lib.ObjectId;
-import org.eclipse.jgit.lib.ObjectLoader;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevTree;
-import org.eclipse.jgit.revwalk.RevWalk;
-import org.eclipse.jgit.treewalk.TreeWalk;
-import org.eclipse.jgit.treewalk.filter.PathFilter;
-
-
-
-/**
- * Simple snippet which shows how to get a diff showing who
- * changed which line in a file
- * 
- * @author dominik.stadler at gmx.at
- */
-public class ShowBlame {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        // prepare a new test-repository
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        BlameCommand blamer = new BlameCommand(repository);
-        ObjectId commitID = repository.resolve("HEAD");
-        blamer.setStartCommit(commitID);
-        blamer.setFilePath("README.md");
-        BlameResult blame = blamer.call();
-
-        // read the number of lines from the commit to not look at changes in the working copy
-        int lines = countFiles(repository, commitID, "README.md");
-        for (int i = 0; i < lines; i++) {
-            RevCommit commit = blame.getSourceCommit(i);
-            System.out.println("Line: " + i + ": " + commit);
-        }
-
-        System.out.println("Displayed commits responsible for " + lines + " lines of README.md");
-
-        repository.close();
-    }
-
-    private static int countFiles(Repository repository, ObjectId commitID, String name) throws IOException {
-        RevWalk revWalk = new RevWalk(repository);
-        RevCommit commit = revWalk.parseCommit(commitID);
-        RevTree tree = commit.getTree();
-        System.out.println("Having tree: " + tree);
-
-        // now try to find a specific file
-        TreeWalk treeWalk = new TreeWalk(repository);
-        treeWalk.addTree(tree);
-        treeWalk.setRecursive(true);
-        treeWalk.setFilter(PathFilter.create(name));
-        if (!treeWalk.next()) {
-            throw new IllegalStateException("Did not find expected file 'README.md'");
-        }
-
-        ObjectId objectId = treeWalk.getObjectId(0);
-        ObjectLoader loader = repository.open(objectId);
-
-        ByteArrayOutputStream stream = new ByteArrayOutputStream();
-        // and then one can the loader to read the file
-        loader.copyTo(stream);
-
-        return IOUtils.readLines(new ByteArrayInputStream(stream.toByteArray())).size();
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+    Copyright 2013, 2014 Dominik Stadler
+    
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+    
+      http://www.apache.org/licenses/LICENSE-2.0
+    
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+*/
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+
+import org.apache.commons.io.IOUtils;
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.BlameCommand;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.blame.BlameResult;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.TreeWalk;
+import org.eclipse.jgit.treewalk.filter.PathFilter;
+
+
+
+/**
+ * Simple snippet which shows how to get a diff showing who
+ * changed which line in a file
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class ShowBlame {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare a new test-repository
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        BlameCommand blamer = new BlameCommand(repository);
+        ObjectId commitID = repository.resolve("HEAD");
+        blamer.setStartCommit(commitID);
+        blamer.setFilePath("README.md");
+        BlameResult blame = blamer.call();
+
+        // read the number of lines from the commit to not look at changes in the working copy
+        int lines = countFiles(repository, commitID, "README.md");
+        for (int i = 0; i < lines; i++) {
+            RevCommit commit = blame.getSourceCommit(i);
+            System.out.println("Line: " + i + ": " + commit);
+        }
+
+        System.out.println("Displayed commits responsible for " + lines + " lines of README.md");
+
+        repository.close();
+    }
+
+    private static int countFiles(Repository repository, ObjectId commitID, String name) throws IOException {
+        RevWalk revWalk = new RevWalk(repository);
+        RevCommit commit = revWalk.parseCommit(commitID);
+        RevTree tree = commit.getTree();
+        System.out.println("Having tree: " + tree);
+
+        // now try to find a specific file
+        TreeWalk treeWalk = new TreeWalk(repository);
+        treeWalk.addTree(tree);
+        treeWalk.setRecursive(true);
+        treeWalk.setFilter(PathFilter.create(name));
+        if (!treeWalk.next()) {
+            throw new IllegalStateException("Did not find expected file 'README.md'");
+        }
+
+        ObjectId objectId = treeWalk.getObjectId(0);
+        ObjectLoader loader = repository.open(objectId);
+
+        ByteArrayOutputStream stream = new ByteArrayOutputStream();
+        // and then one can the loader to read the file
+        loader.copyTo(stream);
+
+        return IOUtils.readLines(new ByteArrayInputStream(stream.toByteArray())).size();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
index 34f8f8a..7a6b5ca 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
@@ -1,80 +1,80 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-import java.util.List;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.diff.DiffEntry;
-import org.eclipse.jgit.errors.IncorrectObjectTypeException;
-import org.eclipse.jgit.errors.MissingObjectException;
-import org.eclipse.jgit.lib.ObjectReader;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevTree;
-import org.eclipse.jgit.revwalk.RevWalk;
-import org.eclipse.jgit.treewalk.AbstractTreeIterator;
-import org.eclipse.jgit.treewalk.CanonicalTreeParser;
-
-
-
-/**
- * Simple snippet which shows how to show diffs between branches
- * 
- * @author dominik.stadler at gmx.at
- */
-public class ShowBranchDiff {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // the diff works on TreeIterators, we prepare two for the two branches
-        AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "refs/heads/testbranch");
-        AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "refs/heads/master");
-
-        // then the procelain diff-command returns a list of diff entries
-        List<DiffEntry> diff = new Git(repository).diff().setOldTree(oldTreeParser).setNewTree(newTreeParser).call();
-        for (DiffEntry entry : diff) {
-            System.out.println("Entry: " + entry);
-        }
-
-        repository.close();
-    }
-
-    private static AbstractTreeIterator prepareTreeParser(Repository repository, String ref) throws IOException,
-            MissingObjectException,
-            IncorrectObjectTypeException {
-        // from the commit we can build the tree which allows us to construct the TreeParser
-        Ref head = repository.getRef(ref);
-        RevWalk walk = new RevWalk(repository);
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        RevTree tree = walk.parseTree(commit.getTree().getId());
-
-        CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
-        ObjectReader oldReader = repository.newObjectReader();
-        try {
-            oldTreeParser.reset(oldReader, tree.getId());
-        } finally {
-            oldReader.release();
-        }
-        return oldTreeParser;
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.diff.DiffEntry;
+import org.eclipse.jgit.errors.IncorrectObjectTypeException;
+import org.eclipse.jgit.errors.MissingObjectException;
+import org.eclipse.jgit.lib.ObjectReader;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.AbstractTreeIterator;
+import org.eclipse.jgit.treewalk.CanonicalTreeParser;
+
+
+
+/**
+ * Simple snippet which shows how to show diffs between branches
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class ShowBranchDiff {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        // the diff works on TreeIterators, we prepare two for the two branches
+        AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "refs/heads/testbranch");
+        AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "refs/heads/master");
+
+        // then the procelain diff-command returns a list of diff entries
+        List<DiffEntry> diff = new Git(repository).diff().setOldTree(oldTreeParser).setNewTree(newTreeParser).call();
+        for (DiffEntry entry : diff) {
+            System.out.println("Entry: " + entry);
+        }
+
+        repository.close();
+    }
+
+    private static AbstractTreeIterator prepareTreeParser(Repository repository, String ref) throws IOException,
+            MissingObjectException,
+            IncorrectObjectTypeException {
+        // from the commit we can build the tree which allows us to construct the TreeParser
+        Ref head = repository.getRef(ref);
+        RevWalk walk = new RevWalk(repository);
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        RevTree tree = walk.parseTree(commit.getTree().getId());
+
+        CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
+        ObjectReader oldReader = repository.newObjectReader();
+        try {
+            oldTreeParser.reset(oldReader, tree.getId());
+        } finally {
+            oldReader.release();
+        }
+        return oldTreeParser;
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
index 1aeb98a..6222f54 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
@@ -1,88 +1,88 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-import java.util.List;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.diff.DiffEntry;
-import org.eclipse.jgit.diff.DiffFormatter;
-import org.eclipse.jgit.errors.IncorrectObjectTypeException;
-import org.eclipse.jgit.errors.MissingObjectException;
-import org.eclipse.jgit.lib.ObjectId;
-import org.eclipse.jgit.lib.ObjectReader;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevTree;
-import org.eclipse.jgit.revwalk.RevWalk;
-import org.eclipse.jgit.treewalk.AbstractTreeIterator;
-import org.eclipse.jgit.treewalk.CanonicalTreeParser;
-import org.eclipse.jgit.treewalk.filter.PathFilter;
-
-
-
-/**
- * Simple snippet which shows how to show diffs between branches
- * 
- * @author dominik.stadler at gmx.at
- */
-public class ShowFileDiff {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // the diff works on TreeIterators, we prepare two for the two branches
-        AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "09c65401f3730eb3e619c33bf31e2376fb393727");
-        AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "aa31703b65774e4a06010824601e56375a70078c");
-
-        // then the procelain diff-command returns a list of diff entries
-        List<DiffEntry> diff = new Git(repository).diff().
-                setOldTree(oldTreeParser).
-                setNewTree(newTreeParser).
-                setPathFilter(PathFilter.create("README.md")).
-                call();
-        for (DiffEntry entry : diff) {
-            System.out.println("Entry: " + entry + ", from: " + entry.getOldId() + ", to: " + entry.getNewId());
-            DiffFormatter formatter = new DiffFormatter(System.out);
-            formatter.setRepository(repository);
-            formatter.format(entry);
-        }
-
-        repository.close();
-    }
-
-    private static AbstractTreeIterator prepareTreeParser(Repository repository, String objectId) throws IOException,
-            MissingObjectException,
-            IncorrectObjectTypeException {
-        // from the commit we can build the tree which allows us to construct the TreeParser
-        RevWalk walk = new RevWalk(repository);
-        RevCommit commit = walk.parseCommit(ObjectId.fromString(objectId));
-        RevTree tree = walk.parseTree(commit.getTree().getId());
-
-        CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
-        ObjectReader oldReader = repository.newObjectReader();
-        try {
-            oldTreeParser.reset(oldReader, tree.getId());
-        } finally {
-            oldReader.release();
-        }
-        return oldTreeParser;
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.diff.DiffEntry;
+import org.eclipse.jgit.diff.DiffFormatter;
+import org.eclipse.jgit.errors.IncorrectObjectTypeException;
+import org.eclipse.jgit.errors.MissingObjectException;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.ObjectReader;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.AbstractTreeIterator;
+import org.eclipse.jgit.treewalk.CanonicalTreeParser;
+import org.eclipse.jgit.treewalk.filter.PathFilter;
+
+
+
+/**
+ * Simple snippet which shows how to show diffs between branches
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class ShowFileDiff {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        // the diff works on TreeIterators, we prepare two for the two branches
+        AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "09c65401f3730eb3e619c33bf31e2376fb393727");
+        AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "aa31703b65774e4a06010824601e56375a70078c");
+
+        // then the procelain diff-command returns a list of diff entries
+        List<DiffEntry> diff = new Git(repository).diff().
+                setOldTree(oldTreeParser).
+                setNewTree(newTreeParser).
+                setPathFilter(PathFilter.create("README.md")).
+                call();
+        for (DiffEntry entry : diff) {
+            System.out.println("Entry: " + entry + ", from: " + entry.getOldId() + ", to: " + entry.getNewId());
+            DiffFormatter formatter = new DiffFormatter(System.out);
+            formatter.setRepository(repository);
+            formatter.format(entry);
+        }
+
+        repository.close();
+    }
+
+    private static AbstractTreeIterator prepareTreeParser(Repository repository, String objectId) throws IOException,
+            MissingObjectException,
+            IncorrectObjectTypeException {
+        // from the commit we can build the tree which allows us to construct the TreeParser
+        RevWalk walk = new RevWalk(repository);
+        RevCommit commit = walk.parseCommit(ObjectId.fromString(objectId));
+        RevTree tree = walk.parseTree(commit.getTree().getId());
+
+        CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
+        ObjectReader oldReader = repository.newObjectReader();
+        try {
+            oldTreeParser.reset(oldReader, tree.getId());
+        } finally {
+            oldReader.release();
+        }
+        return oldTreeParser;
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
index ade6824..1629856 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
@@ -1,82 +1,82 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-
-
-
-/**
- * Simple snippet which shows how to get the commit-ids for a file to provide log information.
- * 
- * @author dominik.stadler at gmx.at
- */
-public class ShowLog {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Iterable<RevCommit> logs = new Git(repository).log()
-                .call();
-        int count = 0;
-        for (RevCommit rev : logs) {
-            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
-            count++;
-        }
-        System.out.println("Had " + count + " commits overall on current branch");
-        
-        logs = new Git(repository).log()
-                .all()
-                .call();
-        count = 0;
-        for (RevCommit rev : logs) {
-            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
-            count++;
-        }
-        System.out.println("Had " + count + " commits overall in repository");
-        
-        logs = new Git(repository).log()
-                // for all log.all()
-                .addPath("README.md")
-                .call();
-        count = 0;
-        for (RevCommit rev : logs) {
-            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
-            count++;
-        }
-        System.out.println("Had " + count + " commits on README.md");
-
-        logs = new Git(repository).log()
-                // for all log.all()
-                .addPath("pom.xml")
-                .call();
-        count = 0;
-        for (RevCommit rev : logs) {
-            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
-            count++;
-        }
-        System.out.println("Had " + count + " commits on pom.xml");
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+
+
+
+/**
+ * Simple snippet which shows how to get the commit-ids for a file to provide log information.
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class ShowLog {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        Iterable<RevCommit> logs = new Git(repository).log()
+                .call();
+        int count = 0;
+        for (RevCommit rev : logs) {
+            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+            count++;
+        }
+        System.out.println("Had " + count + " commits overall on current branch");
+        
+        logs = new Git(repository).log()
+                .all()
+                .call();
+        count = 0;
+        for (RevCommit rev : logs) {
+            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+            count++;
+        }
+        System.out.println("Had " + count + " commits overall in repository");
+        
+        logs = new Git(repository).log()
+                // for all log.all()
+                .addPath("README.md")
+                .call();
+        count = 0;
+        for (RevCommit rev : logs) {
+            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+            count++;
+        }
+        System.out.println("Had " + count + " commits on README.md");
+
+        logs = new Git(repository).log()
+                // for all log.all()
+                .addPath("pom.xml")
+                .call();
+        count = 0;
+        for (RevCommit rev : logs) {
+            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+            count++;
+        }
+        System.out.println("Had " + count + " commits on pom.xml");
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java b/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
index 0dd5ca7..aa2735c 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
@@ -1,54 +1,54 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.Status;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Repository;
-
-
-
-/**
- * Simple snippet which prints the Status of a git repository, i.e. modified/added/
- * removed/ignored files, similar to "git status"
- * 
- * @author dominik.stadler at gmx.at
- */
-public class ShowStatus {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Status status = new Git(repository).status().call();
-        System.out.println("Added: " + status.getAdded());
-        System.out.println("Changed: " + status.getChanged());
-        System.out.println("Conflicting: " + status.getConflicting());
-        System.out.println("ConflictingStageState: " + status.getConflictingStageState());
-        System.out.println("IgnoredNotInIndex: " + status.getIgnoredNotInIndex());
-        System.out.println("Missing: " + status.getMissing());
-        System.out.println("Modified: " + status.getModified());
-        System.out.println("Removed: " + status.getRemoved());
-        System.out.println("Untracked: " + status.getUntracked());
-        System.out.println("UntrackedFolders: " + status.getUntrackedFolders());
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.Status;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which prints the Status of a git repository, i.e. modified/added/
+ * removed/ignored files, similar to "git status"
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class ShowStatus {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        Status status = new Git(repository).status().call();
+        System.out.println("Added: " + status.getAdded());
+        System.out.println("Changed: " + status.getChanged());
+        System.out.println("Conflicting: " + status.getConflicting());
+        System.out.println("ConflictingStageState: " + status.getConflictingStageState());
+        System.out.println("IgnoredNotInIndex: " + status.getIgnoredNotInIndex());
+        System.out.println("Missing: " + status.getMissing());
+        System.out.println("Modified: " + status.getModified());
+        System.out.println("Removed: " + status.getRemoved());
+        System.out.println("Untracked: " + status.getUntracked());
+        System.out.println("UntrackedFolders: " + status.getUntrackedFolders());
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
index 1a5c2c8..c4354a3 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
@@ -1,75 +1,75 @@
-package org.dstadler.jgit.unfinished;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.api.errors.InvalidRefNameException;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.ReflogEntry;
-import org.eclipse.jgit.lib.Repository;
-
-
-
-/**
- * Simple snippet which shows how to list all Tags
- * 
- * @author dominik.stadler at gmx.at
- */
-public class ListRefLog {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        List<Ref> refs = new Git(repository).branchList().call();
-        for (Ref ref : refs) {
-            System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-
-            listReflog(repository, ref);
-        }
-
-        List<Ref> call = new Git(repository).tagList().call();
-        for (Ref ref : call) {
-            System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-
-            listReflog(repository, ref);
-        }
-
-        repository.close();
-    }
-
-    private static void listReflog(Repository repository, Ref ref) throws GitAPIException, InvalidRefNameException, IOException {
-        /*
-         * Ref head = repository.getRef(ref.getName());
-         * RevWalk walk = new RevWalk(repository);
-         * RevCommit commit = walk.parseCommit(head.getObjectId());
-         */
-
-        Collection<ReflogEntry> call = new Git(repository).reflog().setRef(ref.getName()).call();
-        Iterator<ReflogEntry> it = call.iterator();
-        while (it.hasNext()) {
-            ReflogEntry reflog = it.next();
-            System.out.println("Reflog: " + reflog);
-        }
-    }
-}
+package org.dstadler.jgit.unfinished;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRefNameException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.ReflogEntry;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to list all Tags
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class ListRefLog {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        List<Ref> refs = new Git(repository).branchList().call();
+        for (Ref ref : refs) {
+            System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+
+            listReflog(repository, ref);
+        }
+
+        List<Ref> call = new Git(repository).tagList().call();
+        for (Ref ref : call) {
+            System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+
+            listReflog(repository, ref);
+        }
+
+        repository.close();
+    }
+
+    private static void listReflog(Repository repository, Ref ref) throws GitAPIException, InvalidRefNameException, IOException {
+        /*
+         * Ref head = repository.getRef(ref.getName());
+         * RevWalk walk = new RevWalk(repository);
+         * RevCommit commit = walk.parseCommit(head.getObjectId());
+         */
+
+        Collection<ReflogEntry> call = new Git(repository).reflog().setRef(ref.getName()).call();
+        Iterator<ReflogEntry> it = call.iterator();
+        while (it.hasNext()) {
+            ReflogEntry reflog = it.next();
+            System.out.println("Reflog: " + reflog);
+        }
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
index e08b2c2..5652bc7 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
@@ -1,67 +1,67 @@
-package org.dstadler.jgit.unfinished;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.api.errors.InvalidRemoteException;
-import org.eclipse.jgit.api.errors.TransportException;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
-
-/**
- * Simple snippet which shows how to clone a repository from a remote source
- * 
- * @author dominik.stadler at gmx.at
- */
-public class PullFromRemoteRepository {
-
-    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
-
-    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-        // prepare a new folder for the cloned repository
-        File localPath = File.createTempFile("TestGitRepository", "");
-        localPath.delete();
-
-        // then clone
-        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
-        Git.cloneRepository()
-                .setURI(REMOTE_URL)
-                .setDirectory(localPath)
-                .call();
-
-        // now open the created repository
-        FileRepositoryBuilder builder = new FileRepositoryBuilder();
-        Repository repository = builder.setGitDir(localPath)
-                .readEnvironment() // scan environment GIT_* variables
-                .findGitDir() // scan up the file system tree
-                .build();
-
-        Git git = new Git(repository);
-        git.pull()
-                .call();
-
-        System.out.println("Pulled from remote repository to local repository at " + repository.getDirectory());
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.unfinished;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to clone a repository from a remote source
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class PullFromRemoteRepository {
+
+    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        // prepare a new folder for the cloned repository
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // then clone
+        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+        Git.cloneRepository()
+                .setURI(REMOTE_URL)
+                .setDirectory(localPath)
+                .call();
+
+        // now open the created repository
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder.setGitDir(localPath)
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
+
+        Git git = new Git(repository);
+        git.pull()
+                .call();
+
+        System.out.println("Pulled from remote repository to local repository at " + repository.getDirectory());
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
index 8becb13..ac4d038 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
@@ -1,79 +1,79 @@
-package org.dstadler.jgit.unfinished;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.PullResult;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.api.errors.InvalidRemoteException;
-import org.eclipse.jgit.api.errors.TransportException;
-import org.eclipse.jgit.lib.Constants;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
-
-/**
- * Simple snippet which shows how to poull from a remote repository from a remote source
- * 
- * @author dominik.stadler at gmx.at
- */
-public class PullRemoteRepository {
-
-    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
-
-    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-        Repository repository = cloneRepository();
-
-        System.out.println("Having repository: " + repository.getDirectory() + " with head: " +
-                repository.getRef(Constants.HEAD) + "/" + repository.resolve("HEAD") + "/" +
-                repository.resolve("refs/heads/master"));
-
-        // TODO: why do we get null here for HEAD?!? See also
-// http://stackoverflow.com/questions/17979660/jgit-pull-noheadexception
-
-        PullResult call = new Git(repository).pull().call();
-
-        System.out.println("Pulled from the remote repository: " + call);
-
-        repository.close();
-    }
-
-    private static Repository cloneRepository() throws IOException, GitAPIException, InvalidRemoteException, TransportException {
-        // prepare a new folder for the cloned repository
-        File localPath = File.createTempFile("TestGitRepository", "");
-        localPath.delete();
-
-        // then clone
-        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
-        Git.cloneRepository()
-                .setURI(REMOTE_URL)
-                .setDirectory(localPath)
-                .call();
-
-        // now open the created repository
-        FileRepositoryBuilder builder = new FileRepositoryBuilder();
-        Repository repository = builder.setGitDir(localPath)
-                .readEnvironment() // scan environment GIT_* variables
-                .findGitDir() // scan up the file system tree
-                .build();
-        return repository;
-    }
-}
+package org.dstadler.jgit.unfinished;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.PullResult;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.lib.Constants;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to poull from a remote repository from a remote source
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class PullRemoteRepository {
+
+    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        Repository repository = cloneRepository();
+
+        System.out.println("Having repository: " + repository.getDirectory() + " with head: " +
+                repository.getRef(Constants.HEAD) + "/" + repository.resolve("HEAD") + "/" +
+                repository.resolve("refs/heads/master"));
+
+        // TODO: why do we get null here for HEAD?!? See also
+// http://stackoverflow.com/questions/17979660/jgit-pull-noheadexception
+
+        PullResult call = new Git(repository).pull().call();
+
+        System.out.println("Pulled from the remote repository: " + call);
+
+        repository.close();
+    }
+
+    private static Repository cloneRepository() throws IOException, GitAPIException, InvalidRemoteException, TransportException {
+        // prepare a new folder for the cloned repository
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // then clone
+        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+        Git.cloneRepository()
+                .setURI(REMOTE_URL)
+                .setDirectory(localPath)
+                .call();
+
+        // now open the created repository
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder.setGitDir(localPath)
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
+        return repository;
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
index c88ebf0..37e7e46 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
@@ -1,78 +1,78 @@
-package org.dstadler.jgit.unfinished;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.api.errors.InvalidRemoteException;
-import org.eclipse.jgit.api.errors.TransportException;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
-
-/**
- * Simple snippet which shows how to clone a repository from a remote source
- * 
- * @author dominik.stadler at gmx.at
- */
-public class PushToRemoteRepository {
-
-    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
-
-    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-        // prepare a new folder for the cloned repository
-        File localPath = File.createTempFile("TestGitRepository", "");
-        localPath.delete();
-
-        // then clone
-        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
-        Git.cloneRepository()
-                .setURI(REMOTE_URL)
-                .setDirectory(localPath)
-                .call();
-
-        // prepare a second folder for the 2nd clone
-        File localPath2 = File.createTempFile("TestGitRepository", "");
-        localPath2.delete();
-
-        // then clone again
-        System.out.println("Cloning from file://" + localPath + " to " + localPath2);
-        Git.cloneRepository()
-                .setURI("file://" + localPath)
-                .setDirectory(localPath2)
-                .call();
-
-        // now open the created repository
-        FileRepositoryBuilder builder = new FileRepositoryBuilder();
-        Repository repository = builder.setGitDir(localPath2)
-                .readEnvironment() // scan environment GIT_* variables
-                .findGitDir() // scan up the file system tree
-                .build();
-
-        Git git = new Git(repository);
-        git.push()
-                .call();
-
-        System.out.println("Pushed from repository: " + repository.getDirectory() + " to remote repository at " + REMOTE_URL);
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.unfinished;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to clone a repository from a remote source
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class PushToRemoteRepository {
+
+    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        // prepare a new folder for the cloned repository
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // then clone
+        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+        Git.cloneRepository()
+                .setURI(REMOTE_URL)
+                .setDirectory(localPath)
+                .call();
+
+        // prepare a second folder for the 2nd clone
+        File localPath2 = File.createTempFile("TestGitRepository", "");
+        localPath2.delete();
+
+        // then clone again
+        System.out.println("Cloning from file://" + localPath + " to " + localPath2);
+        Git.cloneRepository()
+                .setURI("file://" + localPath)
+                .setDirectory(localPath2)
+                .call();
+
+        // now open the created repository
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder.setGitDir(localPath2)
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
+
+        Git git = new Git(repository);
+        git.push()
+                .call();
+
+        System.out.println("Pushed from repository: " + repository.getDirectory() + " to remote repository at " + REMOTE_URL);
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
index 9fca6c6..fd22f63 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
@@ -1,73 +1,73 @@
-package org.dstadler.jgit.unfinished;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.api.errors.InvalidRemoteException;
-import org.eclipse.jgit.api.errors.TransportException;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
-
-/**
- * Simple snippet which shows how to clone a repository from a remote source
- * 
- * @author dominik.stadler at gmx.at
- */
-public class TrackMaster {
-
-    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
-
-    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-        // prepare a new folder for the cloned repository
-        File localPath = File.createTempFile("TestGitRepository", "");
-        localPath.delete();
-
-        // then clone
-        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
-        Git.cloneRepository()
-                .setURI(REMOTE_URL)
-                .setDirectory(localPath)
-                .call();
-
-        // now open the created repository
-        FileRepositoryBuilder builder = new FileRepositoryBuilder();
-        Repository repository = builder.setGitDir(localPath)
-                .readEnvironment() // scan environment GIT_* variables
-                .findGitDir() // scan up the file system tree
-                .build();
-
-        Git git = new Git(repository);
-
-        git.branchCreate()
-                .setName("master")
-                // ?!? .setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM)
-                .setStartPoint("origin/master")
-                .setForce(true)
-                .call();
-
-        System.out.println("Now tracking master in repository at " + repository.getDirectory() + " from origin/master at " +
-                REMOTE_URL);
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.unfinished;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to clone a repository from a remote source
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class TrackMaster {
+
+    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        // prepare a new folder for the cloned repository
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // then clone
+        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+        Git.cloneRepository()
+                .setURI(REMOTE_URL)
+                .setDirectory(localPath)
+                .call();
+
+        // now open the created repository
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder.setGitDir(localPath)
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
+
+        Git git = new Git(repository);
+
+        git.branchCreate()
+                .setName("master")
+                // ?!? .setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM)
+                .setStartPoint("origin/master")
+                .setForce(true)
+                .call();
+
+        System.out.println("Now tracking master in repository at " + repository.getDirectory() + " from origin/master at " +
+                REMOTE_URL);
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
index 337d0d2..1e1f28d 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
@@ -1,60 +1,60 @@
-package org.dstadler.jgit.unfinished;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevTree;
-import org.eclipse.jgit.revwalk.RevWalk;
-import org.eclipse.jgit.treewalk.TreeWalk;
-
-/**
- * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
- * 
- * @author dominik.stadler at gmx.at
- */
-public class WalkTreeRecursive {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Ref head = repository.getRef("HEAD");
-
-        // a RevWalk allows to walk over commits based on some filtering that is defined
-        RevWalk walk = new RevWalk(repository);
-
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        RevTree tree = commit.getTree();
-        System.out.println("Having tree: " + tree);
-
-        // now use a TreeWalk to iterate over all files in the Tree recursively
-        // you can set Filters to narrow down the results if needed
-        TreeWalk treeWalk = new TreeWalk(repository);
-        treeWalk.addTree(tree);
-        treeWalk.setRecursive(true);
-        while (treeWalk.next()) {
-            System.out.println("found: " + treeWalk.getPathString());
-        }
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.unfinished;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.TreeWalk;
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class WalkTreeRecursive {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        Ref head = repository.getRef("HEAD");
+
+        // a RevWalk allows to walk over commits based on some filtering that is defined
+        RevWalk walk = new RevWalk(repository);
+
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        RevTree tree = commit.getTree();
+        System.out.println("Having tree: " + tree);
+
+        // now use a TreeWalk to iterate over all files in the Tree recursively
+        // you can set Filters to narrow down the results if needed
+        TreeWalk treeWalk = new TreeWalk(repository);
+        treeWalk.addTree(tree);
+        treeWalk.setRecursive(true);
+        while (treeWalk.next()) {
+            System.out.println("found: " + treeWalk.getPathString());
+        }
+
+        repository.close();
+    }
+}

§§--§§
commit 5b21502eae4973d3bc990b86315c5edae6835502 16bb7441616e796ca88ba189af6cbc7981a1e0c8
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Wed Jul 2 20:07:47 2014 +0200 
Message: Update to latest JGit 3.4.1
---§

diff --git a/pom.xml b/pom.xml
index 0260169..f2d797c 100644
--- a/pom.xml
+++ b/pom.xml
@@ -20,7 +20,7 @@
     <dependency>
       <groupId>org.eclipse.jgit</groupId>
       <artifactId>org.eclipse.jgit</artifactId>
-      <version>3.3.2.201404171909-r</version>
+      <version>3.4.1.201406201815-r</version>
     </dependency>
 
 	<dependency>

§§--§§
commit ed34c0073f249d984e91246008473feee78296e4 5b21502eae4973d3bc990b86315c5edae6835502
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Sat Jul 5 10:34:32 2014 +0200 
Message: Add new snippet to show usage of GC
---§

diff --git a/README.md b/README.md
index 8b9fed3..a1dc11f 100644
--- a/README.md
+++ b/README.md
@@ -49,6 +49,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [List available Notes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java)
 * [Clean all untracked files](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java)
 * [Create, list, apply and drop stashes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java)
+* [Run garbage collection](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java)
 
 ##### Commands working with remote repositories
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java b/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java
new file mode 100644
index 0000000..eb1c10c
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java
@@ -0,0 +1,48 @@
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.Map;
+import java.util.Properties;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to execute the "gc" command to remove unused 
+ * objects from the .git directory.
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class CollectGarbage {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        Properties ret = new Git(repository).gc().call();
+        for(Map.Entry<Object, Object> entry : ret.entrySet()) {
+            System.out.println("Ret: " + entry.getKey() + ": " + entry.getValue());
+        }
+
+        repository.close();
+    }
+}

§§--§§
commit ce2a59bdfcec3126fb6d91097ecdfdb612b555eb ed34c0073f249d984e91246008473feee78296e4
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Sat Jul 5 17:50:31 2014 +0200 
Message: Fix CreateArchive to not try to access null loader for directories, also keep temporary file to show results here
---§

diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
index b30f1ac..d311ef2 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
@@ -1,19 +1,19 @@
 package org.dstadler.jgit.porcelain;
 
 /*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
+ * Copyright 2013, 2014 Dominik Stadler
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 import java.io.File;
@@ -52,10 +52,13 @@ public class CreateArchive {
         }
 
         public void putEntry(ZipOutputStream out, String path, FileMode mode, ObjectLoader loader) throws IOException {
-            ZipEntry entry = new ZipEntry(path);
-            out.putNextEntry(entry);
-            out.write(loader.getBytes());
-            out.closeEntry();
+            // loader is null for directories...
+            if (loader != null) {
+                ZipEntry entry = new ZipEntry(path);
+                out.putNextEntry(entry);
+                out.write(loader.getBytes());
+                out.closeEntry();
+            }
         }
 
         public Iterable<String> suffixes() {
@@ -68,32 +71,27 @@ public class CreateArchive {
 
 
         File file = File.createTempFile("test", ".zip");
+        // make the archive format known
+        ArchiveCommand.registerFormat("zip", new ZipArchiveFormat());
         try {
-
-            // make the archive format known
-            ArchiveCommand.registerFormat("zip", new ZipArchiveFormat());
+            // this is the file that we write the archive to
+            OutputStream out = new FileOutputStream(file);
             try {
-                // this is the file that we write the archive to
-                OutputStream out = new FileOutputStream(file);
-                try {
-                    // finally call the ArchiveCommand to write out using the given format
-                    new Git(repository).archive()
-                            .setTree(repository.resolve("master"))
-                            .setFormat("zip")
-                            .setOutputStream(out)
-                            .call();
-                } finally {
-                    out.close();
-                }
+                // finally call the ArchiveCommand to write out using the given format
+                new Git(repository).archive()
+                        .setTree(repository.resolve("master"))
+                        .setFormat("zip")
+                        .setOutputStream(out)
+                        .call();
             } finally {
-                ArchiveCommand.unregisterFormat("zip");
+                out.close();
             }
-
-            System.out.println("Wrote " + file.length() + " bytes to " + file);
         } finally {
-            file.delete();
+            ArchiveCommand.unregisterFormat("zip");
         }
 
+        System.out.println("Wrote " + file.length() + " bytes to " + file);
+
         repository.close();
     }
 }

§§--§§
commit 15a5ad9aef458a2ae6adf2c384258980c0f46c12 ce2a59bdfcec3126fb6d91097ecdfdb612b555eb
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Sat Jul 5 17:52:14 2014 +0200 
Message: Suppress Eclipse Warnings
---§

diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
index 1629856..0ec705e 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
@@ -33,6 +33,7 @@ import org.eclipse.jgit.revwalk.RevCommit;
  */
 public class ShowLog {
 
+    @SuppressWarnings("unused")
     public static void main(String[] args) throws IOException, GitAPIException {
         Repository repository = CookbookHelper.openJGitCookbookRepository();
 

§§--§§
commit 5bd7796749b63d5e584030f47440387791b21ab3 15a5ad9aef458a2ae6adf2c384258980c0f46c12
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Sat Jul 5 22:13:10 2014 +0200 
Message: Also show how to get remote URL from config
---§

diff --git a/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java b/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
index 0beabf6..618d57b 100755
--- a/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
@@ -38,6 +38,12 @@ public class ReadUserConfig {
         } else {
             System.out.println("User identity is " + name + " <" + email + ">");
         }
+        
+        String url = config.getString("remote", "origin", "url");
+        if (url != null) {
+                System.out.println("Origin comes from " + url);
+        }
+        
         repository.close();
     }
 }

§§--§§
commit efbfb7d4fb00582715e3b60fa649d4ea92c9ddfb 5bd7796749b63d5e584030f47440387791b21ab3
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Sat Jul 5 23:44:31 2014 +0200 
Message: Add more sources-links
---§

diff --git a/README.md b/README.md
index a1dc11f..7525f6e 100644
--- a/README.md
+++ b/README.md
@@ -94,6 +94,8 @@ The following sources were used to build the snippets
 * [JGit JavaDoc](http://download.eclipse.org/jgit/docs/latest/apidocs/)
 * [JGit User Guide](http://wiki.eclipse.org/JGit/User_Guide)
 * [JGit related questions on Stackoverflow](http://stackoverflow.com/questions/tagged/jgit)
+* [AlBlue's Blog: Embedding JGit](http://alblue.bandlem.com/2013/11/embedding-jgit.html)
+* [JGit main page](http://www.eclipse.org/jgit/)
 
 #### Contribute
 

§§--§§
commit 4f199cd38f981d1e355377ba12a181bac353ef92 efbfb7d4fb00582715e3b60fa649d4ea92c9ddfb
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Sun Jul 20 22:19:27 2014 +0200 
Message: Add jgit.archive dependency and use it in CreateArchive, move the current custom zip-format code to snippet CreateCustomFormatArchive
---§

diff --git a/README.md b/README.md
index 7525f6e..349fafd 100644
--- a/README.md
+++ b/README.md
@@ -43,7 +43,8 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [Return diff between two branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java)
 * [Show diff of changes to a file between two revs](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java)
 * [Show Status](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java)
-* [Write contents of branch into an compressed file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java)
+* [Store contents of branch into a compressed file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java)
+* [Write contents of branch into a compressed file using a custom archive format](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java)
 * [Blame, i.e. find out which commit changed specific lines in a file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java)
 * [Add and list Notes attached to commits](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java)
 * [List available Notes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java)
diff --git a/pom.xml b/pom.xml
index f2d797c..b28a636 100644
--- a/pom.xml
+++ b/pom.xml
@@ -22,6 +22,11 @@
       <artifactId>org.eclipse.jgit</artifactId>
       <version>3.4.1.201406201815-r</version>
     </dependency>
+    <dependency>
+      <groupId>org.eclipse.jgit</groupId>
+      <artifactId>org.eclipse.jgit.archive</artifactId>
+      <version>3.4.1.201406201815-r</version>
+    </dependency>
 
 	<dependency>
 		<groupId>commons-io</groupId>
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
index d311ef2..86269cc 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
@@ -20,78 +20,55 @@ import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
-import java.util.Collections;
-import java.util.zip.ZipEntry;
-import java.util.zip.ZipOutputStream;
 
 import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.ArchiveCommand;
-import org.eclipse.jgit.api.ArchiveCommand.Format;
 import org.eclipse.jgit.api.Git;
 import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.FileMode;
-import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.archive.ArchiveFormats;
 import org.eclipse.jgit.lib.Repository;
 
 
 
 /**
- * Simple snippet which shows how to package the contents of a branch into an archive file.
+ * Simple snippet which shows how to package the contents of a branch into an archive file
+ * using a format provided by the org.eclipse.jgit.archive jar.
  * 
  * @author dominik.stadler at gmx.at
  */
 public class CreateArchive {
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
 
-    /**
-     * A custom format for Zip-files, unfortunately JGit does not come with any pre-defined ones
-     */
-    private static final class ZipArchiveFormat implements Format<ZipOutputStream> {
-
-        public ZipOutputStream createArchiveOutputStream(OutputStream s) throws IOException {
-            return new ZipOutputStream(s);
-        }
 
-        public void putEntry(ZipOutputStream out, String path, FileMode mode, ObjectLoader loader) throws IOException {
-            // loader is null for directories...
-            if (loader != null) {
-                ZipEntry entry = new ZipEntry(path);
-                out.putNextEntry(entry);
-                out.write(loader.getBytes());
-                out.closeEntry();
-            }
+        // make the included archive formats known
+        ArchiveFormats.registerAll();
+        try {
+            write(repository, ".zip", "zip");
+            write(repository, ".tar.gz", "tgz");
+            write(repository, ".tar.bz2", "tbz2");
+            write(repository, ".tar.xz", "txz");
+        } finally {
+            ArchiveFormats.unregisterAll();
         }
 
-        public Iterable<String> suffixes() {
-            return Collections.singleton(".zip");
-        }
+        repository.close();
     }
 
-    public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-
-        File file = File.createTempFile("test", ".zip");
-        // make the archive format known
-        ArchiveCommand.registerFormat("zip", new ZipArchiveFormat());
+    private static void write(Repository repository, String suffix, String format) throws IOException, GitAPIException {
+        // this is the file that we write the archive to
+        File file = File.createTempFile("test", suffix);
+        OutputStream out = new FileOutputStream(file);
         try {
-            // this is the file that we write the archive to
-            OutputStream out = new FileOutputStream(file);
-            try {
-                // finally call the ArchiveCommand to write out using the given format
-                new Git(repository).archive()
-                        .setTree(repository.resolve("master"))
-                        .setFormat("zip")
-                        .setOutputStream(out)
-                        .call();
-            } finally {
-                out.close();
-            }
+            // finally call the ArchiveCommand to write out using the various supported formats
+            new Git(repository).archive()
+                    .setTree(repository.resolve("master"))
+                    .setFormat(format)
+                    .setOutputStream(out)
+                    .call();
         } finally {
-            ArchiveCommand.unregisterFormat("zip");
+            out.close();
         }
 
         System.out.println("Wrote " + file.length() + " bytes to " + file);
-
-        repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
new file mode 100644
index 0000000..632b5a1
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
@@ -0,0 +1,98 @@
+package org.dstadler.jgit.porcelain;
+
+/*
+ * Copyright 2013, 2014 Dominik Stadler
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.util.Collections;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipOutputStream;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.ArchiveCommand;
+import org.eclipse.jgit.api.ArchiveCommand.Format;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.FileMode;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to package the contents of a branch into an archive file 
+ * using a custom compression format.
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class CreateCustomFormatArchive {
+
+    /**
+     * A custom format for Zip-files, unfortunately JGit does not come with any pre-defined ones
+     */
+    private static final class ZipArchiveFormat implements Format<ZipOutputStream> {
+
+        public ZipOutputStream createArchiveOutputStream(OutputStream s) throws IOException {
+            return new ZipOutputStream(s);
+        }
+
+        public void putEntry(ZipOutputStream out, String path, FileMode mode, ObjectLoader loader) throws IOException {
+            // loader is null for directories...
+            if (loader != null) {
+                ZipEntry entry = new ZipEntry(path);
+                out.putNextEntry(entry);
+                out.write(loader.getBytes());
+                out.closeEntry();
+            }
+        }
+
+        public Iterable<String> suffixes() {
+            return Collections.singleton(".mzip");
+        }
+    }
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+
+        File file = File.createTempFile("test", ".mzip");
+        // make the archive format known
+        ArchiveCommand.registerFormat("myzip", new ZipArchiveFormat());
+        try {
+            // this is the file that we write the archive to
+            OutputStream out = new FileOutputStream(file);
+            try {
+                // finally call the ArchiveCommand to write out using the given format
+                new Git(repository).archive()
+                        .setTree(repository.resolve("master"))
+                        .setFormat("myzip")
+                        .setOutputStream(out)
+                        .call();
+            } finally {
+                out.close();
+            }
+        } finally {
+            ArchiveCommand.unregisterFormat("myzip");
+        }
+
+        System.out.println("Wrote " + file.length() + " bytes to " + file);
+
+        repository.close();
+    }
+}

§§--§§
commit a8d8583b3151874d362a4b86121df00dd7b7c6ce 4f199cd38f981d1e355377ba12a181bac353ef92
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon Jul 28 20:53:37 2014 +0200 
Message: Add GetCommitMessage and some newlines in ReadBlobContents
---§

diff --git a/README.md b/README.md
index 349fafd..f801167 100644
--- a/README.md
+++ b/README.md
@@ -63,6 +63,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 
 * [Get the SHA-1 ref from a name, e.g. refs/heads/master](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetRefFromName.java)
 * [Get the commit-object from a name or a SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java)
+* [Get the commit-message](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java)
 * [Get the tree-object from a commit-object, name or SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java)
 * [Read the contents of a file/blob](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java)
 * [Get the tag-object from a name or a SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java)
diff --git a/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java b/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java
new file mode 100644
index 0000000..ec4d3d8
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java
@@ -0,0 +1,46 @@
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevWalk;
+
+/**
+ * Simple snippet which shows how to retrieve the commit-message based on object id.
+ */
+public class GetCommitMessage {
+
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        Ref head = repository.getRef("refs/heads/master");
+        System.out.println("Found head: " + head);
+
+        // a RevWalk allows to walk over commits based on some filtering that is defined
+        RevWalk walk = new RevWalk(repository);
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        
+        System.out.println("\nCommit-Message: " + commit.getFullMessage());
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
index 5ac537c..e01b21e 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
@@ -38,11 +38,11 @@ public class ReadBlobContents {
         Ref head = repository.getRef("refs/heads/master");
         System.out.println("Ref of refs/heads/master: " + head);
 
-        System.out.println("Print contents of head of master branch, i.e. the latest commit information");
+        System.out.println("\nPrint contents of head of master branch, i.e. the latest commit information");
         ObjectLoader loader = repository.open(head.getObjectId());
         loader.copyTo(System.out);
 
-        System.out.println("Print contents of tree of head of master branch, i.e. the latest binary tree information");
+        System.out.println("\nPrint contents of tree of head of master branch, i.e. the latest binary tree information");
 
         // a commit points to a tree
         RevWalk walk = new RevWalk(repository);

§§--§§
commit 98922c08ddca128be2f0d8b7bba5a60296b06365 a8d8583b3151874d362a4b86121df00dd7b7c6ce
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon Jul 28 21:01:44 2014 +0200 
Message: Add calls to RevWalk.dispose() to show that this or release() should be called when one is done with the RevWalk
---§

diff --git a/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java b/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java
index ec4d3d8..4a526e9 100644
--- a/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java
+++ b/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java
@@ -40,6 +40,8 @@ public class GetCommitMessage {
         RevCommit commit = walk.parseCommit(head.getObjectId());
         
         System.out.println("\nCommit-Message: " + commit.getFullMessage());
+        
+        walk.dispose();
 
         repository.close();
     }
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
index e4a8dad..e5b2faa 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
@@ -40,6 +40,8 @@ public class GetRevCommitFromObjectId {
         RevCommit commit = walk.parseCommit(head.getObjectId());
         System.out.println("Found Commit: " + commit);
 
+        walk.dispose();
+
         repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
index eece952..b2d1f5e 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
@@ -46,6 +46,8 @@ public class GetRevTreeFromObjectId {
         RevTree tree = walk.parseTree(commit.getTree().getId());
         System.out.println("Found Tree: " + tree);
 
+        walk.dispose();
+
         repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
index e01b21e..c422b4a 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
@@ -52,6 +52,8 @@ public class ReadBlobContents {
         loader = repository.open(tree.getId());
         loader.copyTo(System.out);
 
+        walk.dispose();
+
         repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
index 3d23d3f..d231f8b 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
@@ -66,6 +66,8 @@ public class ReadFileFromCommit {
         // and then one can the loader to read the file
         loader.copyTo(System.out);
 
+        revWalk.dispose();
+
         repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
index 932ec1b..9774e52 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
@@ -52,6 +52,8 @@ public class ReadTagFromName {
         ObjectLoader loader = repository.open(annotatedTag.getObjectId());
         loader.copyTo(System.out);
 
+        walk.dispose();
+
         repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
index 1c1b855..c5e959b 100644
--- a/src/main/java/org/dstadler/jgit/api/WalkRev.java
+++ b/src/main/java/org/dstadler/jgit/api/WalkRev.java
@@ -51,6 +51,8 @@ public class WalkRev {
         }
         System.out.println(count);
 
+        walk.dispose();
+
         repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java b/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
index 1b9020f..3873974 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
@@ -66,6 +66,8 @@ public class AddAndListNoteOfCommit {
 			loader.copyTo(System.out);
 		}
 
+        walk.dispose();
+
 		repository.close();
 	}
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
index 9ea9df6..f83f2de 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
@@ -68,6 +68,8 @@ public class CreateAndDeleteTag {
         // remove the tag again
         git.tagDelete().setTags("tag_for_testing").call();
 
+        walk.dispose();
+
         repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
index 58b4b27..aefd982 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
@@ -88,6 +88,8 @@ public class ShowBlame {
         // and then one can the loader to read the file
         loader.copyTo(stream);
 
+        revWalk.dispose();
+
         return IOUtils.readLines(new ByteArrayInputStream(stream.toByteArray())).size();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
index 7a6b5ca..4ba96cf 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
@@ -75,6 +75,9 @@ public class ShowBranchDiff {
         } finally {
             oldReader.release();
         }
+
+        walk.dispose();
+
         return oldTreeParser;
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
index 6222f54..6d520e7 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
@@ -83,6 +83,9 @@ public class ShowFileDiff {
         } finally {
             oldReader.release();
         }
+        
+        walk.dispose();
+
         return oldTreeParser;
     }
 }

§§--§§
commit ffff2fdfe20373480a06ca377ffec98a0eafe987 98922c08ddca128be2f0d8b7bba5a60296b06365
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon Aug 4 21:38:15 2014 +0200 
Message: Adjust sample for opening repository to use a real git repository, closes #5
---§

diff --git a/src/main/java/org/dstadler/jgit/OpenRepository.java b/src/main/java/org/dstadler/jgit/OpenRepository.java
index 3f00bd7..3c7c1b9 100644
--- a/src/main/java/org/dstadler/jgit/OpenRepository.java
+++ b/src/main/java/org/dstadler/jgit/OpenRepository.java
@@ -19,6 +19,10 @@ package org.dstadler.jgit;
 import java.io.File;
 import java.io.IOException;
 
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
 import org.eclipse.jgit.lib.Repository;
 import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 
@@ -31,15 +35,52 @@ import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
  */
 public class OpenRepository {
 
-    public static void main(String[] args) throws IOException {
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // first create a test-repository, the return is including the .get directory here!
+        File repoDir = createSampleGitRepo();
+        
+        // now open the resulting repository with a FileRepositoryBuilder
         FileRepositoryBuilder builder = new FileRepositoryBuilder();
-        Repository repository = builder.setGitDir(new File("/my/git/directory"))
+        Repository repository = builder.setGitDir(repoDir)
                 .readEnvironment() // scan environment GIT_* variables
                 .findGitDir() // scan up the file system tree
                 .build();
 
         System.out.println("Having repository: " + repository.getDirectory());
 
+        // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
+        Ref head = repository.getRef("refs/heads/master");
+        System.out.println("Ref of refs/heads/master: " + head);
+
+        repository.close();
+    }
+
+    private static File createSampleGitRepo() throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.createNewRepository();
+        
+        System.out.println("Temporary repository at " + repository.getDirectory());
+
+        // create the file
+        File myfile = new File(repository.getDirectory().getParent(), "testfile");
+        myfile.createNewFile();
+
+        // run the add-call
+        new Git(repository).add()
+                .addFilepattern("testfile")
+                .call();
+
+
+        // and then commit the changes
+        new Git(repository).commit()
+                .setMessage("Added testfile")
+                .call();
+        
+        System.out.println("Added file " + myfile + " to repository at " + repository.getDirectory());
+        
+        File dir = repository.getDirectory();
+        
         repository.close();
+        
+        return dir;
     }
 }

§§--§§
commit de5592a419bbfede6043bf5ead73ef72bb00c6c7 ffff2fdfe20373480a06ca377ffec98a0eafe987
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Fri Sep 12 07:36:25 2014 +0200 
Message: Show how commits of a branch can be iterated
---§

diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
index 0ec705e..8dc582d 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
@@ -28,7 +28,7 @@ import org.eclipse.jgit.revwalk.RevCommit;
 
 /**
  * Simple snippet which shows how to get the commit-ids for a file to provide log information.
- * 
+ *
  * @author dominik.stadler at gmx.at
  */
 public class ShowLog {
@@ -45,7 +45,17 @@ public class ShowLog {
             count++;
         }
         System.out.println("Had " + count + " commits overall on current branch");
-        
+
+        logs = new Git(repository).log()
+                .add(repository.resolve("remotes/origin/testbranch"))
+                .call();
+        count = 0;
+        for (RevCommit rev : logs) {
+            System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+            count++;
+        }
+        System.out.println("Had " + count + " commits overall on test-branch");
+
         logs = new Git(repository).log()
                 .all()
                 .call();
@@ -55,7 +65,7 @@ public class ShowLog {
             count++;
         }
         System.out.println("Had " + count + " commits overall in repository");
-        
+
         logs = new Git(repository).log()
                 // for all log.all()
                 .addPath("README.md")

§§--§§
commit 8b7ae6f0a3300662b094585d0c9016c9d7e09fe4 de5592a419bbfede6043bf5ead73ef72bb00c6c7
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Tue Oct 21 11:05:30 2014 +0200 
Message: Add snippet which shows how to list changed files between two commits
---§

diff --git a/README.md b/README.md
index f801167..d0bdfe5 100644
--- a/README.md
+++ b/README.md
@@ -42,6 +42,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [Create and delete tags](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java)
 * [Return diff between two branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java)
 * [Show diff of changes to a file between two revs](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java)
+* [Show diff of changes to a file between two commits](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java)
 * [Show Status](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java)
 * [Store contents of branch into a compressed file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java)
 * [Write contents of branch into a compressed file using a custom archive format](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java b/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java
new file mode 100755
index 0000000..4c3d19f
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java
@@ -0,0 +1,68 @@
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.diff.DiffEntry;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.ObjectReader;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.treewalk.CanonicalTreeParser;
+
+
+
+/**
+ * Snippet which shows how to show diffs between two commits.
+ *
+ * @author dominik.stadler at gmx.at
+ */
+public class ShowChangedFilesBetweenCommits {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        // The {tree} will return the underlying tree-id instead of the commit-id itself!
+        ObjectId oldHead = repository.resolve("HEAD^^^^{tree}");
+        ObjectId head = repository.resolve("HEAD^{tree}");
+
+        System.out.println("Printing diff between tree: " + oldHead + " and " + head);
+
+        // prepare the two iterators to compute the diff between
+		ObjectReader reader = repository.newObjectReader();
+		CanonicalTreeParser oldTreeIter = new CanonicalTreeParser();
+		oldTreeIter.reset(reader, oldHead);
+		CanonicalTreeParser newTreeIter = new CanonicalTreeParser();
+		newTreeIter.reset(reader, head);
+
+		// finally get the list of changed files
+		List<DiffEntry> diffs= new Git(repository).diff()
+		                    .setNewTree(newTreeIter)
+		                    .setOldTree(oldTreeIter)
+		                    .call();
+        for (DiffEntry entry : diffs) {
+            System.out.println("Entry: " + entry);
+        }
+        System.out.println("Done");
+
+        repository.close();
+    }
+}

§§--§§
commit 2a43999b2a3976676662ef6b9bed77e89c213d03 8b7ae6f0a3300662b094585d0c9016c9d7e09fe4
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Tue Oct 21 11:07:35 2014 +0200 
Message: Add snippet which shows how to commit all changed files similar to git commit -a
---§

diff --git a/README.md b/README.md
index d0bdfe5..a94bcc8 100644
--- a/README.md
+++ b/README.md
@@ -34,6 +34,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [Initialize a new repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java)
 * [Add a new file to the index](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/AddFile.java)
 * [Commit a file to an existing repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java)
+* [Commit all changes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java)
 * [List commits (i.e. Log)](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java)
 * [List all tags in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListTags.java)
 * [List all branches in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java b/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java
new file mode 100755
index 0000000..7c84129
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java
@@ -0,0 +1,39 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to commit all files
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class CommitAll {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare a new test-repository
+        Repository repository = CookbookHelper.createNewRepository();
+        Git git = new Git(repository);
+
+        // create the file
+        File myfile = new File(repository.getDirectory().getParent(), "testfile");
+        myfile.createNewFile();
+
+        // and then commit the changes
+        git.commit()
+        		.setAll(true)
+                .setMessage("Commit all")
+                .call();
+
+        System.out.println("Committed all changes to repository at " + repository.getDirectory());
+
+        repository.close();
+    }
+}

§§--§§
commit a837a9c5563ddb01ebd121f85d9d64cf3c1823cb 2a43999b2a3976676662ef6b9bed77e89c213d03
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Fri Oct 24 09:01:59 2014 +0200 
Message: Adjust for Git.cloneRepository() actually returning an opened repository which needs to be closed
---§

diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
index 3426d57..89e5aac 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
@@ -23,14 +23,12 @@ import org.eclipse.jgit.api.Git;
 import org.eclipse.jgit.api.errors.GitAPIException;
 import org.eclipse.jgit.api.errors.InvalidRemoteException;
 import org.eclipse.jgit.api.errors.TransportException;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 
 
 
 /**
  * Simple snippet which shows how to clone a repository from a remote source
- * 
+ *
  * @author dominik.stadler at gmx.at
  */
 public class CloneRemoteRepository {
@@ -44,20 +42,16 @@ public class CloneRemoteRepository {
 
         // then clone
         System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
-        Git.cloneRepository()
+        Git result = Git.cloneRepository()
                 .setURI(REMOTE_URL)
                 .setDirectory(localPath)
                 .call();
 
-        // now open the created repository
-        FileRepositoryBuilder builder = new FileRepositoryBuilder();
-        Repository repository = builder.setGitDir(localPath)
-                .readEnvironment() // scan environment GIT_* variables
-                .findGitDir() // scan up the file system tree
-                .build();
-
-        System.out.println("Having repository: " + repository.getDirectory());
-
-        repository.close();
+        try {
+	        // Note: the call() returns an opened repository already which needs to be closed to avoid file handle leaks!
+	        System.out.println("Having repository: " + result.getRepository().getDirectory());
+        } finally {
+        	result.close();
+        }
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
index 5652bc7..2f2f187 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
@@ -23,14 +23,12 @@ import org.eclipse.jgit.api.Git;
 import org.eclipse.jgit.api.errors.GitAPIException;
 import org.eclipse.jgit.api.errors.InvalidRemoteException;
 import org.eclipse.jgit.api.errors.TransportException;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 
 
 
 /**
  * Simple snippet which shows how to clone a repository from a remote source
- * 
+ *
  * @author dominik.stadler at gmx.at
  */
 public class PullFromRemoteRepository {
@@ -44,24 +42,21 @@ public class PullFromRemoteRepository {
 
         // then clone
         System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
-        Git.cloneRepository()
+        Git result = Git.cloneRepository()
                 .setURI(REMOTE_URL)
                 .setDirectory(localPath)
                 .call();
 
-        // now open the created repository
-        FileRepositoryBuilder builder = new FileRepositoryBuilder();
-        Repository repository = builder.setGitDir(localPath)
-                .readEnvironment() // scan environment GIT_* variables
-                .findGitDir() // scan up the file system tree
-                .build();
-
-        Git git = new Git(repository);
-        git.pull()
-                .call();
-
-        System.out.println("Pulled from remote repository to local repository at " + repository.getDirectory());
-
-        repository.close();
+        try {
+	        // Note: the call() returns an opened repository already which needs to be closed to avoid file handle leaks!
+	        System.out.println("Having repository: " + result.getRepository().getDirectory());
+	        Git git = new Git(result.getRepository());
+	        git.pull()
+	        .call();
+
+	        System.out.println("Pulled from remote repository to local repository at " + result.getRepository().getDirectory());
+        } finally {
+        	result.close();
+        }
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
index ac4d038..35669be 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
@@ -26,13 +26,12 @@ import org.eclipse.jgit.api.errors.InvalidRemoteException;
 import org.eclipse.jgit.api.errors.TransportException;
 import org.eclipse.jgit.lib.Constants;
 import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 
 
 
 /**
  * Simple snippet which shows how to poull from a remote repository from a remote source
- * 
+ *
  * @author dominik.stadler at gmx.at
  */
 public class PullRemoteRepository {
@@ -63,17 +62,12 @@ public class PullRemoteRepository {
 
         // then clone
         System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
-        Git.cloneRepository()
+        Git result = Git.cloneRepository()
                 .setURI(REMOTE_URL)
                 .setDirectory(localPath)
                 .call();
 
-        // now open the created repository
-        FileRepositoryBuilder builder = new FileRepositoryBuilder();
-        Repository repository = builder.setGitDir(localPath)
-                .readEnvironment() // scan environment GIT_* variables
-                .findGitDir() // scan up the file system tree
-                .build();
-        return repository;
+        // Note: the call() returns an opened repository already which needs to be closed to avoid file handle leaks!
+        return result.getRepository();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
index 37e7e46..39e644c 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
@@ -30,7 +30,7 @@ import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 
 /**
  * Simple snippet which shows how to clone a repository from a remote source
- * 
+ *
  * @author dominik.stadler at gmx.at
  */
 public class PushToRemoteRepository {
@@ -44,7 +44,7 @@ public class PushToRemoteRepository {
 
         // then clone
         System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
-        Git.cloneRepository()
+        Git result = Git.cloneRepository()
                 .setURI(REMOTE_URL)
                 .setDirectory(localPath)
                 .call();
@@ -55,7 +55,7 @@ public class PushToRemoteRepository {
 
         // then clone again
         System.out.println("Cloning from file://" + localPath + " to " + localPath2);
-        Git.cloneRepository()
+        Git result2 = Git.cloneRepository()
                 .setURI("file://" + localPath)
                 .setDirectory(localPath2)
                 .call();
@@ -74,5 +74,8 @@ public class PushToRemoteRepository {
         System.out.println("Pushed from repository: " + repository.getDirectory() + " to remote repository at " + REMOTE_URL);
 
         repository.close();
+
+        result.close();
+        result2.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
index fd22f63..8a61cea 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
@@ -30,7 +30,7 @@ import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
 
 /**
  * Simple snippet which shows how to clone a repository from a remote source
- * 
+ *
  * @author dominik.stadler at gmx.at
  */
 public class TrackMaster {
@@ -44,7 +44,7 @@ public class TrackMaster {
 
         // then clone
         System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
-        Git.cloneRepository()
+        Git result = Git.cloneRepository()
                 .setURI(REMOTE_URL)
                 .setDirectory(localPath)
                 .call();
@@ -69,5 +69,7 @@ public class TrackMaster {
                 REMOTE_URL);
 
         repository.close();
+
+        result.close();
     }
 }

§§--§§
commit 2e1d65e4cf6c5e267e109aa20fd68ae119fa5ec9 a837a9c5563ddb01ebd121f85d9d64cf3c1823cb
Author: matthew-white <mwhite@poverty-action.org>
Date: Fri Oct 24 14:29:33 2014 -0400 
Message: Modify and rename the readme for example purposes
---§

diff --git a/README.md b/jgit-cookbook README.md
similarity index 99%
rename from README.md
rename to jgit-cookbook README.md
index a94bcc8..219d61f 100644
--- a/README.md
+++ b/jgit-cookbook README.md	
@@ -105,6 +105,8 @@ The following sources were used to build the snippets
 
 Please note that the list of snippets is not yet complete, probably never will. If you are missing things or have suggestions how to improve or add snippets, please either send pull requests or create [issues](https://github.com/centic9/jgit-cookbook/issues).
 
+Added line
+
 #### Licensing
 
    Copyright 2013, 2014 Dominik Stadler

§§--§§
commit 5a10bd6ee431e362facb03cfe763b9a3d9dfd02d 2e1d65e4cf6c5e267e109aa20fd68ae119fa5ec9
Author: matthew-white <mwhite@poverty-action.org>
Date: Fri Oct 24 14:29:41 2014 -0400 
Message: Revert "Modify and rename the readme for example purposes"
---§

diff --git a/jgit-cookbook README.md b/README.md
similarity index 99%
rename from jgit-cookbook README.md
rename to README.md
index 219d61f..a94bcc8 100644
--- a/jgit-cookbook README.md	
+++ b/README.md
@@ -105,8 +105,6 @@ The following sources were used to build the snippets
 
 Please note that the list of snippets is not yet complete, probably never will. If you are missing things or have suggestions how to improve or add snippets, please either send pull requests or create [issues](https://github.com/centic9/jgit-cookbook/issues).
 
-Added line
-
 #### Licensing
 
    Copyright 2013, 2014 Dominik Stadler

§§--§§
commit 8cb70b1b134bb3a428a6bab070d46d0664917e4e 5a10bd6ee431e362facb03cfe763b9a3d9dfd02d
Author: matthew-white <mwhite@poverty-action.org>
Date: Fri Oct 24 14:59:45 2014 -0400 
Message: Add example for diffing a renamed file
---§

diff --git a/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java b/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java
new file mode 100644
index 0000000..4dddf63
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java
@@ -0,0 +1,83 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.diff.DiffConfig;
+import org.eclipse.jgit.diff.DiffEntry;
+import org.eclipse.jgit.diff.DiffFormatter;
+import org.eclipse.jgit.errors.IncorrectObjectTypeException;
+import org.eclipse.jgit.errors.MissingObjectException;
+import org.eclipse.jgit.lib.Config;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.ObjectReader;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.FollowFilter;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.AbstractTreeIterator;
+import org.eclipse.jgit.treewalk.CanonicalTreeParser;
+
+// Simple example that shows how to diff a single file between two commits when
+// the file may have been renamed.
+public class DiffRenamedFile {
+	private static AbstractTreeIterator prepareTreeParser(Repository repository, String objectId) throws IOException,
+			MissingObjectException,
+			IncorrectObjectTypeException {
+		// from the commit we can build the tree which allows us to construct the TreeParser
+		RevWalk walk = new RevWalk(repository);
+		RevCommit commit = walk.parseCommit(ObjectId.fromString(objectId));
+		RevTree tree = walk.parseTree(commit.getTree().getId());
+
+		CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
+		ObjectReader oldReader = repository.newObjectReader();
+		try {
+			oldTreeParser.reset(oldReader, tree.getId());
+		} finally {
+			oldReader.release();
+		}
+
+		walk.dispose();
+
+		return oldTreeParser;
+	}
+
+	private static DiffEntry diffFile(Repository repo, String oldCommit,
+		String newCommit, String path) throws IOException, GitAPIException {
+		Config config = new Config();
+		config.setBoolean("diff", null, "renames", true);
+		DiffConfig diffConfig = config.get(DiffConfig.KEY);
+		List<DiffEntry> diffList = new Git(repo).diff().
+			setOldTree(prepareTreeParser(repo, oldCommit)).
+			setNewTree(prepareTreeParser(repo, newCommit)).
+			setPathFilter(FollowFilter.create(path, diffConfig)).
+			call();
+		if (diffList.size() == 0)
+			return null;
+		if (diffList.size() > 1)
+			throw new RuntimeException("invalid diff");
+		return diffList.get(0);
+	}
+
+	public static void main(String args[])
+		throws IOException, GitAPIException {
+		Repository repo = CookbookHelper.openJGitCookbookRepository();
+
+		// Diff README.md between two commits. The file is named README.md in
+		// the new commit (5a10bd6e), but was named "jgit-cookbook README.md" in
+		// the old commit (2e1d65e4).
+		DiffEntry diff = diffFile(repo,
+			"2e1d65e4cf6c5e267e109aa20fd68ae119fa5ec9",
+			"5a10bd6ee431e362facb03cfe763b9a3d9dfd02d",
+			"README.md");
+
+		// Display the diff.
+		DiffFormatter formatter = new DiffFormatter(System.out);
+		formatter.setRepository(repo);
+		formatter.format(diff);
+	}
+}

§§--§§
commit 05d18a76875716fbdbd2c200091b40caa06c713d 8cb70b1b134bb3a428a6bab070d46d0664917e4e
Author: matthew-white <mwhite@poverty-action.org>
Date: Fri Oct 24 14:59:45 2014 -0400 
Message: Include example in readme
---§

diff --git a/README.md b/README.md
index a94bcc8..843bbff 100644
--- a/README.md
+++ b/README.md
@@ -44,6 +44,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [Return diff between two branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java)
 * [Show diff of changes to a file between two revs](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java)
 * [Show diff of changes to a file between two commits](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java)
+* [Show diff of changes to a file between two commits when the file has been renamed](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java)
 * [Show Status](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java)
 * [Store contents of branch into a compressed file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java)
 * [Write contents of branch into a compressed file using a custom archive format](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java)

§§--§§
commit 17197f0c81266dbd63b9cd948be0ca3001fb801e a837a9c5563ddb01ebd121f85d9d64cf3c1823cb 05d18a76875716fbdbd2c200091b40caa06c713d
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Fri Oct 24 22:02:46 2014 +0200 
Message: Merge pull request #7 from matthew-white/diff-renamed-file
---§

§§--§§
commit 598b7c634d1029351b24019c796e963e7cc94a1e 17197f0c81266dbd63b9cd948be0ca3001fb801e
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Sat Oct 25 09:09:16 2014 +0200 
Message: Add link to a good article about Submodules in JGit
---§

diff --git a/README.md b/README.md
index 843bbff..74e8994 100644
--- a/README.md
+++ b/README.md
@@ -91,6 +91,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * Doing stuff without local storage: Using org.eclipse.jgit.storage.dfs.InMemoryRepository to clone a Git repo in-memory and work from there
 * CherryPick
 * Rebase - http://stackoverflow.com/questions/22945257/jgit-how-to-squash-commits
+* Submodules - http://www.codeaffine.com/2014/04/16/how-to-manage-git-submodules-with-jgit/
 
 #### Sources
 

§§--§§
commit d469249e90c3bd2ebe992ea054b256e811d9e5a1 598b7c634d1029351b24019c796e963e7cc94a1e
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Sat Oct 25 09:11:32 2014 +0200 
Message: Adjust description of one snippet
---§

diff --git a/README.md b/README.md
index 74e8994..ddf96be 100644
--- a/README.md
+++ b/README.md
@@ -43,7 +43,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [Create and delete tags](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java)
 * [Return diff between two branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java)
 * [Show diff of changes to a file between two revs](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java)
-* [Show diff of changes to a file between two commits](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java)
+* [Show diff of changes to all files between two commits](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java)
 * [Show diff of changes to a file between two commits when the file has been renamed](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java)
 * [Show Status](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java)
 * [Store contents of branch into a compressed file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java)

§§--§§
commit b419522521af553ae2752fd1b609f2aa11062243 d469249e90c3bd2ebe992ea054b256e811d9e5a1
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Sat Oct 25 09:11:40 2014 +0200 
Message: Add test for submodules
---§

diff --git a/src/main/java/org/dstadler/jgit/unfinished/TestSubmodules.java b/src/main/java/org/dstadler/jgit/unfinished/TestSubmodules.java
new file mode 100755
index 0000000..4646745
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/TestSubmodules.java
@@ -0,0 +1,98 @@
+package org.dstadler.jgit.unfinished;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to initialize a new repository
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class TestSubmodules {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        File mainRepoDir = createRepository();
+        
+        Repository mainRepo = openMainRepo(mainRepoDir);
+        
+        addSubmodule(mainRepo);
+        
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+
+        Repository subRepo = builder.setGitDir(new File("testrepo/.git"))
+          .readEnvironment() // scan environment GIT_* variables
+          .findGitDir() // scan up the file system tree
+          .build();
+
+        if(subRepo.isBare()) {
+            throw new IllegalStateException("Repository at " + subRepo.getDirectory() + " should not be bare");
+        }
+
+        System.out.println("All done!");
+    }
+
+    private static void addSubmodule(Repository mainRepo) throws GitAPIException {
+        System.out.println("Adding submodule");
+        Repository subRepoInit = new Git(mainRepo).submoduleAdd().
+                setURI("https://github.com/github/testrepo.git").
+                setPath("testrepo").
+                call();
+        if(subRepoInit.isBare()) {
+            throw new IllegalStateException("Repository at " + subRepoInit.getDirectory() + " should not be bare");
+        }
+    }
+
+    private static Repository openMainRepo(File mainRepoDir) throws IOException {
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+
+        Repository mainRepo = builder.setGitDir(new File(mainRepoDir.getAbsolutePath(), ".git"))
+          .readEnvironment() // scan environment GIT_* variables
+          .findGitDir() // scan up the file system tree
+          .build();
+
+        if(mainRepo.isBare()) {
+            throw new IllegalStateException("Repository at " + mainRepoDir + " should not be bare");
+        }
+        return mainRepo;
+    }
+
+    private static File createRepository() throws IOException, GitAPIException {
+        File dir = File.createTempFile("gitinit", ".test");
+        dir.delete();
+
+        Git.init()
+                .setDirectory(dir)
+                .call();
+
+        Repository repository = FileRepositoryBuilder.create(new File(dir.getAbsolutePath(), ".git"));
+
+        System.out.println("Created a new repository at " + repository.getDirectory());
+
+        repository.close();
+        
+        return dir;
+    }
+}

§§--§§
commit dba4d7589cc8c2f9fe450a6f4454c72ff9e1d76d b419522521af553ae2752fd1b609f2aa11062243
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Thu Oct 30 09:04:36 2014 +0100 
Message: Add note about not abusing issues for questions about JGit
---§

diff --git a/README.md b/README.md
index ddf96be..c324be3 100644
--- a/README.md
+++ b/README.md
@@ -8,6 +8,8 @@ The JGit framework is rich and diverse, it has two layers, a low-level _api_ and
 
 This project tries to provide a collection of ready-to-run snippets which try to augment the existing [JavaDoc](http://download.eclipse.org/jgit/docs/latest/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide)
 
+*Note: Please use sites such as http://stackoverflow.com for general questions about JGit usage, not issues in this project. Issues should be used for problems with snippets and suggestions of missing snippets. Snippets from good answers on stackoverflow can then be included here, naturally.*
+
 #### Getting started
 
 ##### Grab it

§§--§§
commit 7245ca5cea397f66b4af568af267925e65ddae80 dba4d7589cc8c2f9fe450a6f4454c72ff9e1d76d
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Thu Oct 30 10:14:32 2014 +0100 
Message: Also add Gradle build files
---§

diff --git a/.gitignore b/.gitignore
index 3f7c223..d49dbd2 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,8 +3,4 @@ target
 .classpath
 .project
 .settings
-
-# Package Files #
-*.jar
-*.war
-*.ear
+.gradle
diff --git a/README.md b/README.md
index c324be3..ef0a08e 100644
--- a/README.md
+++ b/README.md
@@ -18,8 +18,14 @@ This project tries to provide a collection of ready-to-run snippets which try to
 
 ##### Build it and create Eclipse project files
 
+###### When using Maven
+
 	mvn dependency:sources eclipse:eclipse package
 
+###### When using Gradle
+
+	./gradlew eclipse check
+
 #### Run it
 
     Import the project into an Eclipse workspace and execute the snippets there.
diff --git a/build.gradle b/build.gradle
new file mode 100644
index 0000000..48bebb5
--- /dev/null
+++ b/build.gradle
@@ -0,0 +1,20 @@
+apply plugin: 'java'
+//apply plugin: 'idea'
+apply plugin: 'eclipse'
+
+repositories {
+  mavenCentral()
+  maven {
+    url "https://repo.eclipse.org/content/groups/releases/"
+  }
+}
+
+dependencies {
+	compile 'org.eclipse.jgit:org.eclipse.jgit:3.4.1.201406201815-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.4.1.201406201815-r'
+	compile 'commons-io:commons-io:2.4'
+}
+
+task wrapper(type: Wrapper) {
+	gradleVersion = '2.1'
+}
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000..3d0dee6
Binary files /dev/null and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 0000000..dac87ec
--- /dev/null
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Thu Oct 30 10:07:17 CET 2014
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.1-bin.zip
diff --git a/gradlew b/gradlew
new file mode 100755
index 0000000..91a7e26
--- /dev/null
+++ b/gradlew
@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+fi
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >&-
+APP_HOME="`pwd -P`"
+cd "$SAVED" >&-
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100755
index 0000000..8a0b282
--- /dev/null
+++ b/gradlew.bat
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega

§§--§§
commit 1e23e4044b30a354913efb1ffd4a22028544e4f2 7245ca5cea397f66b4af568af267925e65ddae80
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Sun Nov 2 21:43:25 2014 +0100 
Message: New snippet for checking if commits are merged into a specific branch
---§

diff --git a/README.md b/README.md
index ef0a08e..a3b586e 100644
--- a/README.md
+++ b/README.md
@@ -85,6 +85,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [Print out user information from Git](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java)
 * [Read file attributes, e.g. executeable state, file or directory, size, ...](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java)
 * [Use class BranchTrackingStatus to retrieve number of commits ahead/behind compared to remote branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java)
+* [Check if commits on other branches are merged into a given branch](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/CheckMergeStatusOfCommit.java)
 
 #### Missing snippets
 
diff --git a/src/main/java/org/dstadler/jgit/api/CheckMergeStatusOfCommit.java b/src/main/java/org/dstadler/jgit/api/CheckMergeStatusOfCommit.java
new file mode 100644
index 0000000..c3686c9
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/CheckMergeStatusOfCommit.java
@@ -0,0 +1,80 @@
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevWalk;
+
+/**
+ * Snippet which shows how to check if commits are merged into a
+ * given branch. 
+ * 
+ * See also http://stackoverflow.com/questions/26644919/how-to-determine-with-jgit-which-branches-have-been-merged-to-master
+ */
+public class CheckMergeStatusOfCommit {
+
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        RevWalk revWalk = new RevWalk( repository );
+        RevCommit masterHead = revWalk.parseCommit( repository.resolve( "refs/heads/master" ));
+        
+        // first a commit that was merged
+        ObjectId id = repository.resolve("05d18a76875716fbdbd2c200091b40caa06c713d");
+        System.out.println("Had id: " + id);
+        RevCommit otherHead = revWalk.parseCommit( id );
+        
+        if( revWalk.isMergedInto( otherHead, masterHead ) ) {
+            System.out.println("Commit " + otherHead + " is merged into master");
+        } else {
+            System.out.println("Commit " + otherHead + " is NOT merged into master");
+        }
+
+        
+        // then a commit on a test-branch which is not merged
+        id = repository.resolve("ae70dd60a7423eb07893d833600f096617f450d2");
+        System.out.println("Had id: " + id);
+        otherHead = revWalk.parseCommit( id );
+        
+        if( revWalk.isMergedInto( otherHead, masterHead ) ) {
+            System.out.println("Commit " + otherHead + " is merged into master");
+        } else {
+            System.out.println("Commit " + otherHead + " is NOT merged into master");
+        }
+
+        // and finally master-HEAD itself
+        id = repository.resolve("HEAD");
+        System.out.println("Had id: " + id);
+        otherHead = revWalk.parseCommit( id );
+        
+        if( revWalk.isMergedInto( otherHead, masterHead ) ) {
+            System.out.println("Commit " + otherHead + " is merged into master");
+        } else {
+            System.out.println("Commit " + otherHead + " is NOT merged into master");
+        }
+
+        
+        revWalk.dispose();
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/api/ResolveRef.java b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
index 026b2b2..40648fd 100644
--- a/src/main/java/org/dstadler/jgit/api/ResolveRef.java
+++ b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
@@ -40,6 +40,12 @@ public class ResolveRef {
         id = repository.resolve("HEAD^1");
         System.out.println("ObjectId of HEAD: " + id);
 
+        id = repository.resolve("b419522521af553ae2752fd1b609f2aa11062243");
+        System.out.println("ObjectId of specific commit: " + id);
+        
+        id = repository.resolve("05d18a76875716fbdbd2c200091b40caa06c713d");
+        System.out.println("ObjectId of merged commit: " + id);
+
         repository.close();
     }
 }

§§--§§
commit bdea5353c5002509a246f59b8c0714f3a4fed695 1e23e4044b30a354913efb1ffd4a22028544e4f2
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Wed Nov 5 13:05:22 2014 +0100 
Message: Set source compat to 1.5 in gradle, some newline/blank changes
---§

diff --git a/.gitignore b/.gitignore
index d49dbd2..48ce2c0 100644
--- a/.gitignore
+++ b/.gitignore
@@ -4,3 +4,4 @@ target
 .project
 .settings
 .gradle
+/bin/
diff --git a/build.gradle b/build.gradle
index 48bebb5..d059731 100644
--- a/build.gradle
+++ b/build.gradle
@@ -2,6 +2,8 @@ apply plugin: 'java'
 //apply plugin: 'idea'
 apply plugin: 'eclipse'
 
+sourceCompatibility = '1.5'
+
 repositories {
   mavenCentral()
   maven {
diff --git a/pom.xml b/pom.xml
index b28a636..089b562 100644
--- a/pom.xml
+++ b/pom.xml
@@ -40,7 +40,7 @@
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-compiler-plugin</artifactId>
-        <version>3.1</version>
+        <version>3.2</version>
         <configuration>
           <source>1.5</source>
           <target>1.5</target>
diff --git a/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java b/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java
index ea8da5f..bf9a5e4 100644
--- a/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java
+++ b/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java
@@ -2,13 +2,13 @@ package org.dstadler.jgit.api;
 
 /*
  * Copyright 2013, 2014 Dominik Stadler
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -29,9 +29,9 @@ import org.eclipse.jgit.lib.Repository;
 
 /**
  * Snippet which shows how to use BranchTrackingStatus to print
- * how many commits away the local git repository is from the 
+ * how many commits away the local git repository is from the
  * remote branches.
- * 
+ *
  * @author dominik.stadler at gmx.at
  */
 public class ShowBranchTrackingStatus {
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
index 632b5a1..d362f0e 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
@@ -2,13 +2,13 @@ package org.dstadler.jgit.porcelain;
 
 /*
  * Copyright 2013, 2014 Dominik Stadler
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -36,9 +36,9 @@ import org.eclipse.jgit.lib.Repository;
 
 
 /**
- * Simple snippet which shows how to package the contents of a branch into an archive file 
+ * Simple snippet which shows how to package the contents of a branch into an archive file
  * using a custom compression format.
- * 
+ *
  * @author dominik.stadler at gmx.at
  */
 public class CreateCustomFormatArchive {
@@ -48,11 +48,11 @@ public class CreateCustomFormatArchive {
      */
     private static final class ZipArchiveFormat implements Format<ZipOutputStream> {
 
-        public ZipOutputStream createArchiveOutputStream(OutputStream s) throws IOException {
+		public ZipOutputStream createArchiveOutputStream(OutputStream s) throws IOException {
             return new ZipOutputStream(s);
         }
 
-        public void putEntry(ZipOutputStream out, String path, FileMode mode, ObjectLoader loader) throws IOException {
+		public void putEntry(ZipOutputStream out, String path, FileMode mode, ObjectLoader loader) throws IOException {
             // loader is null for directories...
             if (loader != null) {
                 ZipEntry entry = new ZipEntry(path);
@@ -62,7 +62,7 @@ public class CreateCustomFormatArchive {
             }
         }
 
-        public Iterable<String> suffixes() {
+		public Iterable<String> suffixes() {
             return Collections.singleton(".mzip");
         }
     }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
index 1ad54fc..a0537db 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
@@ -29,7 +29,7 @@ import org.eclipse.jgit.revwalk.RevCommit;
 
 /**
  * Snippet which shows how to use PlotWalk to read from a specific commit.
- * 
+ *
  * @author dominik.stadler at gmx.at
  */
 public class ListChildrenOfCommit {

§§--§§
commit 38d51408bdf594a3dbe67c7b53847375f46bf9de bdea5353c5002509a246f59b8c0714f3a4fed695
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Thu Dec 11 23:44:57 2014 +0100 
Message: Update to latest JGit 3.5.2 and Gradle 2.2.1
---§

diff --git a/build.gradle b/build.gradle
index d059731..67d1e04 100644
--- a/build.gradle
+++ b/build.gradle
@@ -12,11 +12,11 @@ repositories {
 }
 
 dependencies {
-	compile 'org.eclipse.jgit:org.eclipse.jgit:3.4.1.201406201815-r'
-	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.4.1.201406201815-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit:3.5.2.201411120430-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.5.2.201411120430-r'
 	compile 'commons-io:commons-io:2.4'
 }
 
 task wrapper(type: Wrapper) {
-	gradleVersion = '2.1'
+	gradleVersion = '2.2.1'
 }
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index dac87ec..5c69a07 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Thu Oct 30 10:07:17 CET 2014
+#Thu Dec 11 23:25:39 CET 2014
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.1-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-bin.zip
diff --git a/pom.xml b/pom.xml
index 089b562..0250fd6 100644
--- a/pom.xml
+++ b/pom.xml
@@ -20,12 +20,12 @@
     <dependency>
       <groupId>org.eclipse.jgit</groupId>
       <artifactId>org.eclipse.jgit</artifactId>
-      <version>3.4.1.201406201815-r</version>
+      <version>3.5.2.201411120430-r</version>
     </dependency>
     <dependency>
       <groupId>org.eclipse.jgit</groupId>
       <artifactId>org.eclipse.jgit.archive</artifactId>
-      <version>3.4.1.201406201815-r</version>
+      <version>3.5.2.201411120430-r</version>
     </dependency>
 
 	<dependency>

§§--§§
commit e9ba2007b15fc612b9a7d95777df8114f6e0c09e 38d51408bdf594a3dbe67c7b53847375f46bf9de
Author: Richard Möhn <richard.moehn@posteo.de>
Date: Fri Dec 12 20:20:19 2014 +0100 
Message: Add snippet for retrieving a commit by its SHA
---§

diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
index e5b2faa..8d5dfb7 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
@@ -19,6 +19,7 @@ package org.dstadler.jgit.api;
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.ObjectId;
 import org.eclipse.jgit.lib.Ref;
 import org.eclipse.jgit.lib.Repository;
 import org.eclipse.jgit.revwalk.RevCommit;
@@ -40,6 +41,12 @@ public class GetRevCommitFromObjectId {
         RevCommit commit = walk.parseCommit(head.getObjectId());
         System.out.println("Found Commit: " + commit);
 
+        // You can also get the commit for an (abbreviated) SHA
+        walk.reset();
+        ObjectId id = repository.resolve("38d51408bd");
+        RevCommit commitAgain = walk.parseCommit(id);
+        System.out.println("Found Commit again: " + commitAgain);
+
         walk.dispose();
 
         repository.close();

§§--§§
commit f991c2d216d337ea1f661dcaec558be235c4a1fb 38d51408bdf594a3dbe67c7b53847375f46bf9de e9ba2007b15fc612b9a7d95777df8114f6e0c09e
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Sun Dec 14 12:01:09 2014 +0100 
Message: Merge pull request #10 from rmoehn/master
---§

§§--§§
commit e6d5eeb172cfd6f1998fbd976059441cf537b00c f991c2d216d337ea1f661dcaec558be235c4a1fb
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Sun Dec 14 12:02:36 2014 +0100 
Message: Add comment for how to read refs
---§

diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
index b2d1f5e..1e6932e 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
@@ -34,6 +34,7 @@ public class GetRevTreeFromObjectId {
     public static void main(String[] args) throws IOException, GitAPIException {
         Repository repository = CookbookHelper.openJGitCookbookRepository();
 
+        // See e.g. GetRevCommitFromObjectId for how to use a SHA-1 directly
         Ref head = repository.getRef("HEAD");
 
         // a RevWalk allows to walk over commits based on some filtering that is defined

§§--§§
commit c2bac90a79aa4086a14b720dcac7cdf79bb3a08f e6d5eeb172cfd6f1998fbd976059441cf537b00c
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Sun Dec 14 12:11:09 2014 +0100 
Message: Issue #9: Add comment about selection of ancestor in this sample
---§

diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java b/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java
index 4c3d19f..db8db05 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java
@@ -41,6 +41,9 @@ public class ShowChangedFilesBetweenCommits {
         Repository repository = CookbookHelper.openJGitCookbookRepository();
 
         // The {tree} will return the underlying tree-id instead of the commit-id itself!
+        // For a description of what the carets do see e.g. http://www.paulboxley.com/blog/2011/06/git-caret-and-tilde
+        // This means we are selecting the parent of the parent of the parent of the parent of current HEAD and
+        // take the tree-ish of it
         ObjectId oldHead = repository.resolve("HEAD^^^^{tree}");
         ObjectId head = repository.resolve("HEAD^{tree}");
 

§§--§§
commit 7a712c5b4c61cdb775c900644fc191bc003d0828 c2bac90a79aa4086a14b720dcac7cdf79bb3a08f
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Sun Dec 21 21:34:55 2014 +0100 
Message: Commit Eclipse project settings, fix Eclipse warnings
---§

diff --git a/.gitignore b/.gitignore
index 48ce2c0..fd46575 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2,6 +2,5 @@
 target
 .classpath
 .project
-.settings
 .gradle
 /bin/
diff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
new file mode 100644
index 0000000..fef0954
--- /dev/null
+++ b/.settings/org.eclipse.jdt.core.prefs
@@ -0,0 +1,380 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.annotation.inheritNullAnnotations=disabled
+org.eclipse.jdt.core.compiler.annotation.missingNonNullByDefaultAnnotation=ignore
+org.eclipse.jdt.core.compiler.annotation.nonnull=org.eclipse.jdt.annotation.NonNull
+org.eclipse.jdt.core.compiler.annotation.nonnullbydefault=org.eclipse.jdt.annotation.NonNullByDefault
+org.eclipse.jdt.core.compiler.annotation.nullable=org.eclipse.jdt.annotation.Nullable
+org.eclipse.jdt.core.compiler.annotation.nullanalysis=disabled
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.methodParameters=do not generate
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.7
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.annotationSuperInterface=warning
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.autoboxing=ignore
+org.eclipse.jdt.core.compiler.problem.comparingIdentical=warning
+org.eclipse.jdt.core.compiler.problem.deadCode=warning
+org.eclipse.jdt.core.compiler.problem.deprecation=warning
+org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode=disabled
+org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod=disabled
+org.eclipse.jdt.core.compiler.problem.discouragedReference=warning
+org.eclipse.jdt.core.compiler.problem.emptyStatement=warning
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.problem.explicitlyClosedAutoCloseable=warning
+org.eclipse.jdt.core.compiler.problem.fallthroughCase=ignore
+org.eclipse.jdt.core.compiler.problem.fatalOptionalError=disabled
+org.eclipse.jdt.core.compiler.problem.fieldHiding=ignore
+org.eclipse.jdt.core.compiler.problem.finalParameterBound=warning
+org.eclipse.jdt.core.compiler.problem.finallyBlockNotCompletingNormally=warning
+org.eclipse.jdt.core.compiler.problem.forbiddenReference=error
+org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock=warning
+org.eclipse.jdt.core.compiler.problem.includeNullInfoFromAsserts=disabled
+org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod=warning
+org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch=warning
+org.eclipse.jdt.core.compiler.problem.indirectStaticAccess=ignore
+org.eclipse.jdt.core.compiler.problem.localVariableHiding=ignore
+org.eclipse.jdt.core.compiler.problem.methodWithConstructorName=warning
+org.eclipse.jdt.core.compiler.problem.missingDefaultCase=ignore
+org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation=warning
+org.eclipse.jdt.core.compiler.problem.missingEnumCaseDespiteDefault=disabled
+org.eclipse.jdt.core.compiler.problem.missingHashCodeMethod=warning
+org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation=warning
+org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotationForInterfaceMethodImplementation=enabled
+org.eclipse.jdt.core.compiler.problem.missingSerialVersion=warning
+org.eclipse.jdt.core.compiler.problem.missingSynchronizedOnInheritedMethod=warning
+org.eclipse.jdt.core.compiler.problem.noEffectAssignment=warning
+org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion=warning
+org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral=ignore
+org.eclipse.jdt.core.compiler.problem.nonnullParameterAnnotationDropped=warning
+org.eclipse.jdt.core.compiler.problem.nullAnnotationInferenceConflict=error
+org.eclipse.jdt.core.compiler.problem.nullReference=warning
+org.eclipse.jdt.core.compiler.problem.nullSpecViolation=error
+org.eclipse.jdt.core.compiler.problem.nullUncheckedConversion=warning
+org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod=warning
+org.eclipse.jdt.core.compiler.problem.parameterAssignment=ignore
+org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment=warning
+org.eclipse.jdt.core.compiler.problem.potentialNullReference=ignore
+org.eclipse.jdt.core.compiler.problem.potentiallyUnclosedCloseable=warning
+org.eclipse.jdt.core.compiler.problem.rawTypeReference=warning
+org.eclipse.jdt.core.compiler.problem.redundantNullAnnotation=warning
+org.eclipse.jdt.core.compiler.problem.redundantNullCheck=warning
+org.eclipse.jdt.core.compiler.problem.redundantSpecificationOfTypeArguments=warning
+org.eclipse.jdt.core.compiler.problem.redundantSuperinterface=ignore
+org.eclipse.jdt.core.compiler.problem.reportMethodCanBePotentiallyStatic=ignore
+org.eclipse.jdt.core.compiler.problem.reportMethodCanBeStatic=ignore
+org.eclipse.jdt.core.compiler.problem.specialParameterHidingField=disabled
+org.eclipse.jdt.core.compiler.problem.staticAccessReceiver=warning
+org.eclipse.jdt.core.compiler.problem.suppressOptionalErrors=disabled
+org.eclipse.jdt.core.compiler.problem.suppressWarnings=enabled
+org.eclipse.jdt.core.compiler.problem.syntacticNullAnalysisForFields=disabled
+org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation=ignore
+org.eclipse.jdt.core.compiler.problem.typeParameterHiding=warning
+org.eclipse.jdt.core.compiler.problem.unavoidableGenericTypeProblems=enabled
+org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation=warning
+org.eclipse.jdt.core.compiler.problem.unclosedCloseable=warning
+org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock=ignore
+org.eclipse.jdt.core.compiler.problem.unhandledWarningToken=warning
+org.eclipse.jdt.core.compiler.problem.unnecessaryElse=warning
+org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck=warning
+org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess=ignore
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException=warning
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionExemptExceptionAndThrowable=enabled
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionIncludeDocCommentReference=enabled
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionWhenOverriding=disabled
+org.eclipse.jdt.core.compiler.problem.unusedImport=warning
+org.eclipse.jdt.core.compiler.problem.unusedLabel=warning
+org.eclipse.jdt.core.compiler.problem.unusedLocal=warning
+org.eclipse.jdt.core.compiler.problem.unusedObjectAllocation=warning
+org.eclipse.jdt.core.compiler.problem.unusedParameter=ignore
+org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference=enabled
+org.eclipse.jdt.core.compiler.problem.unusedParameterWhenImplementingAbstract=disabled
+org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete=disabled
+org.eclipse.jdt.core.compiler.problem.unusedPrivateMember=warning
+org.eclipse.jdt.core.compiler.problem.unusedTypeParameter=warning
+org.eclipse.jdt.core.compiler.problem.unusedWarningToken=warning
+org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast=warning
+org.eclipse.jdt.core.compiler.source=1.7
+org.eclipse.jdt.core.formatter.align_type_members_on_columns=false
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation=48
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression=16
+org.eclipse.jdt.core.formatter.alignment_for_assignment=0
+org.eclipse.jdt.core.formatter.alignment_for_binary_expression=16
+org.eclipse.jdt.core.formatter.alignment_for_compact_if=16
+org.eclipse.jdt.core.formatter.alignment_for_conditional_expression=16
+org.eclipse.jdt.core.formatter.alignment_for_enum_constants=16
+org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer=16
+org.eclipse.jdt.core.formatter.alignment_for_method_declaration=0
+org.eclipse.jdt.core.formatter.alignment_for_multiple_fields=16
+org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_resources_in_try=80
+org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation=0
+org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_union_type_in_multicatch=16
+org.eclipse.jdt.core.formatter.blank_lines_after_imports=1
+org.eclipse.jdt.core.formatter.blank_lines_after_package=1
+org.eclipse.jdt.core.formatter.blank_lines_before_field=0
+org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration=1
+org.eclipse.jdt.core.formatter.blank_lines_before_imports=1
+org.eclipse.jdt.core.formatter.blank_lines_before_member_type=1
+org.eclipse.jdt.core.formatter.blank_lines_before_method=1
+org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk=0
+org.eclipse.jdt.core.formatter.blank_lines_before_package=0
+org.eclipse.jdt.core.formatter.blank_lines_between_import_groups=1
+org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations=1
+org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_array_initializer=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_block=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_block_in_case=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_enum_constant=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_method_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_switch=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_type_declaration=end_of_line
+org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment=false
+org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment=false
+org.eclipse.jdt.core.formatter.comment.format_block_comments=true
+org.eclipse.jdt.core.formatter.comment.format_header=true
+org.eclipse.jdt.core.formatter.comment.format_html=true
+org.eclipse.jdt.core.formatter.comment.format_javadoc_comments=true
+org.eclipse.jdt.core.formatter.comment.format_line_comments=true
+org.eclipse.jdt.core.formatter.comment.format_source_code=true
+org.eclipse.jdt.core.formatter.comment.indent_parameter_description=false
+org.eclipse.jdt.core.formatter.comment.indent_root_tags=true
+org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags=insert
+org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter=do not insert
+org.eclipse.jdt.core.formatter.comment.line_length=130
+org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries=true
+org.eclipse.jdt.core.formatter.comment.new_lines_at_javadoc_boundaries=true
+org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments=false
+org.eclipse.jdt.core.formatter.compact_else_if=true
+org.eclipse.jdt.core.formatter.continuation_indentation=2
+org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer=2
+org.eclipse.jdt.core.formatter.disabling_tag=@formatter\:off
+org.eclipse.jdt.core.formatter.enabling_tag=@formatter\:on
+org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line=false
+org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column=false
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header=true
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header=true
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header=true
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header=true
+org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases=true
+org.eclipse.jdt.core.formatter.indent_empty_lines=false
+org.eclipse.jdt.core.formatter.indent_statements_compare_to_block=true
+org.eclipse.jdt.core.formatter.indent_statements_compare_to_body=true
+org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases=true
+org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch=true
+org.eclipse.jdt.core.formatter.indentation.size=4
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_field=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_type=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_label=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter=insert
+org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_binary_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_ellipsis=insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_try=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_try_resources=insert
+org.eclipse.jdt.core.formatter.insert_space_after_unary_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter=insert
+org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_binary_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_try=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert=insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_ellipsis=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_try=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while=insert
+org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return=insert
+org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw=insert
+org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_semicolon=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_try_resources=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_unary_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.join_lines_in_comments=false
+org.eclipse.jdt.core.formatter.join_wrapped_lines=false
+org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line=false
+org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line=false
+org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line=false
+org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line=false
+org.eclipse.jdt.core.formatter.lineSplit=130
+org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column=false
+org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column=true
+org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body=0
+org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve=3
+org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line=true
+org.eclipse.jdt.core.formatter.tabulation.char=space
+org.eclipse.jdt.core.formatter.tabulation.size=4
+org.eclipse.jdt.core.formatter.use_on_off_tags=true
+org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations=false
+org.eclipse.jdt.core.formatter.wrap_before_binary_operator=false
+org.eclipse.jdt.core.formatter.wrap_before_or_operator_multicatch=true
+org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested=true
diff --git a/.settings/org.eclipse.jdt.ui.prefs b/.settings/org.eclipse.jdt.ui.prefs
new file mode 100644
index 0000000..4175e4b
--- /dev/null
+++ b/.settings/org.eclipse.jdt.ui.prefs
@@ -0,0 +1,3 @@
+eclipse.preferences.version=1
+formatter_profile=_dynaTrace
+formatter_settings_version=12
diff --git a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
index 9f67d2b..f9afc9d 100755
--- a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
+++ b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
@@ -19,7 +19,6 @@ package org.dstadler.jgit.api;
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.errors.GitAPIException;
 import org.eclipse.jgit.errors.AmbiguousObjectException;
 import org.eclipse.jgit.errors.CorruptObjectException;
 import org.eclipse.jgit.errors.IncorrectObjectTypeException;
@@ -43,7 +42,7 @@ import org.eclipse.jgit.treewalk.filter.PathFilter;
  */
 public class GetFileAttributes {
 
-    public static void main(String[] args) throws IOException, GitAPIException {
+    public static void main(String[] args) throws IOException {
         Repository repository = CookbookHelper.openJGitCookbookRepository();
 
         // find the Tree for current HEAD
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
index 1e6932e..b5547cb 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
@@ -19,7 +19,6 @@ package org.dstadler.jgit.api;
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.errors.GitAPIException;
 import org.eclipse.jgit.lib.Ref;
 import org.eclipse.jgit.lib.Repository;
 import org.eclipse.jgit.revwalk.RevCommit;
@@ -31,7 +30,7 @@ import org.eclipse.jgit.revwalk.RevWalk;
  */
 public class GetRevTreeFromObjectId {
 
-    public static void main(String[] args) throws IOException, GitAPIException {
+    public static void main(String[] args) throws IOException {
         Repository repository = CookbookHelper.openJGitCookbookRepository();
 
         // See e.g. GetRevCommitFromObjectId for how to use a SHA-1 directly
diff --git a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
index d231f8b..5275c09 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
@@ -19,7 +19,6 @@ package org.dstadler.jgit.api;
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.errors.GitAPIException;
 import org.eclipse.jgit.lib.Constants;
 import org.eclipse.jgit.lib.ObjectId;
 import org.eclipse.jgit.lib.ObjectLoader;
@@ -38,7 +37,7 @@ import org.eclipse.jgit.treewalk.filter.PathFilter;
  */
 public class ReadFileFromCommit {
 
-    public static void main(String[] args) throws IOException, GitAPIException {
+    public static void main(String[] args) throws IOException {
         Repository repository = CookbookHelper.openJGitCookbookRepository();
 
         // find the HEAD
diff --git a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
index 9774e52..dad0ebf 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
@@ -19,7 +19,6 @@ package org.dstadler.jgit.api;
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.errors.GitAPIException;
 import org.eclipse.jgit.lib.ObjectLoader;
 import org.eclipse.jgit.lib.Ref;
 import org.eclipse.jgit.lib.Repository;
@@ -31,7 +30,7 @@ import org.eclipse.jgit.revwalk.RevWalk;
  */
 public class ReadTagFromName {
 
-    public static void main(String[] args) throws IOException, GitAPIException {
+    public static void main(String[] args) throws IOException {
         Repository repository = CookbookHelper.openJGitCookbookRepository();
 
         // a RevWalk allows to retrieve information from the repository
diff --git a/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java b/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java
index bf9a5e4..90f0920 100644
--- a/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java
+++ b/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java
@@ -53,7 +53,7 @@ public class ShowBranchTrackingStatus {
 
     private static List<Integer> getCounts(org.eclipse.jgit.lib.Repository repository, String branchName) throws IOException {
         BranchTrackingStatus trackingStatus = BranchTrackingStatus.of(repository, branchName);
-        List<Integer> counts = new ArrayList<Integer>();
+        List<Integer> counts = new ArrayList<>();
         if (trackingStatus != null) {
             counts.add(trackingStatus.getAheadCount());
             counts.add(trackingStatus.getBehindCount());
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
index 86269cc..05466a7 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
@@ -57,16 +57,13 @@ public class CreateArchive {
     private static void write(Repository repository, String suffix, String format) throws IOException, GitAPIException {
         // this is the file that we write the archive to
         File file = File.createTempFile("test", suffix);
-        OutputStream out = new FileOutputStream(file);
-        try {
+        try (OutputStream out = new FileOutputStream(file)) {
             // finally call the ArchiveCommand to write out using the various supported formats
             new Git(repository).archive()
                     .setTree(repository.resolve("master"))
                     .setFormat(format)
                     .setOutputStream(out)
                     .call();
-        } finally {
-            out.close();
         }
 
         System.out.println("Wrote " + file.length() + " bytes to " + file);
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
index d362f0e..c268287 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
@@ -48,11 +48,13 @@ public class CreateCustomFormatArchive {
      */
     private static final class ZipArchiveFormat implements Format<ZipOutputStream> {
 
-		public ZipOutputStream createArchiveOutputStream(OutputStream s) throws IOException {
+		@Override
+        public ZipOutputStream createArchiveOutputStream(OutputStream s) throws IOException {
             return new ZipOutputStream(s);
         }
 
-		public void putEntry(ZipOutputStream out, String path, FileMode mode, ObjectLoader loader) throws IOException {
+		@Override
+        public void putEntry(ZipOutputStream out, String path, FileMode mode, ObjectLoader loader) throws IOException {
             // loader is null for directories...
             if (loader != null) {
                 ZipEntry entry = new ZipEntry(path);
@@ -62,7 +64,8 @@ public class CreateCustomFormatArchive {
             }
         }
 
-		public Iterable<String> suffixes() {
+		@Override
+        public Iterable<String> suffixes() {
             return Collections.singleton(".mzip");
         }
     }
@@ -76,16 +79,13 @@ public class CreateCustomFormatArchive {
         ArchiveCommand.registerFormat("myzip", new ZipArchiveFormat());
         try {
             // this is the file that we write the archive to
-            OutputStream out = new FileOutputStream(file);
-            try {
+            try (OutputStream out = new FileOutputStream(file)) {
                 // finally call the ArchiveCommand to write out using the given format
                 new Git(repository).archive()
                         .setTree(repository.resolve("master"))
                         .setFormat("myzip")
                         .setOutputStream(out)
                         .call();
-            } finally {
-                out.close();
             }
         } finally {
             ArchiveCommand.unregisterFormat("myzip");
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
index f3833c5..90dfae2 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
@@ -16,7 +16,6 @@ package org.dstadler.jgit.porcelain;
    limitations under the License.
  */
 
-import java.io.IOException;
 import java.util.Collection;
 
 import org.eclipse.jgit.api.Git;
@@ -37,7 +36,7 @@ public class ListRemoteRepository {
 
     private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
 
-    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+    public static void main(String[] args) throws InvalidRemoteException, TransportException, GitAPIException {
         // then clone
         System.out.println("Listing remote repository " + REMOTE_URL);
         Collection<Ref> refs = Git.lsRemoteRepository()
diff --git a/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java b/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
index 57b3531..be58653 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
@@ -19,7 +19,6 @@ package org.dstadler.jgit.unfinished;
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.errors.GitAPIException;
 import org.eclipse.jgit.lib.Constants;
 import org.eclipse.jgit.lib.ObjectId;
 import org.eclipse.jgit.lib.ObjectLoader;
@@ -34,7 +33,7 @@ import org.eclipse.jgit.treewalk.TreeWalk;
  */
 public class BrowseTree {
 
-    public static void main(String[] args) throws IOException, GitAPIException {
+    public static void main(String[] args) throws IOException {
         Repository repository = CookbookHelper.openJGitCookbookRepository();
 
         ObjectId revId = repository.resolve(Constants.HEAD);
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
index a0537db..577890b 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
@@ -19,7 +19,6 @@ package org.dstadler.jgit.unfinished;
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.errors.GitAPIException;
 import org.eclipse.jgit.lib.ObjectId;
 import org.eclipse.jgit.lib.Repository;
 import org.eclipse.jgit.revplot.PlotCommitList;
@@ -34,14 +33,14 @@ import org.eclipse.jgit.revwalk.RevCommit;
  */
 public class ListChildrenOfCommit {
 
-    public static void main(String[] args) throws IOException, GitAPIException {
+    public static void main(String[] args) throws IOException {
         Repository repository = CookbookHelper.openJGitCookbookRepository();
 
         PlotWalk revWalk = new PlotWalk(repository);
         ObjectId rootId = repository.resolve("refs/heads/master");
         RevCommit root = revWalk.parseCommit(rootId);
         revWalk.markStart(root);
-        PlotCommitList<PlotLane> plotCommitList = new PlotCommitList<PlotLane>();
+        PlotCommitList<PlotLane> plotCommitList = new PlotCommitList<>();
         plotCommitList.source(revWalk);
         plotCommitList.fillTo(Integer.MAX_VALUE);
 
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java b/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
index f3f06c6..a5c39fb 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
@@ -19,7 +19,6 @@ package org.dstadler.jgit.unfinished;
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.errors.GitAPIException;
 import org.eclipse.jgit.dircache.DirCache;
 import org.eclipse.jgit.dircache.DirCacheEntry;
 import org.eclipse.jgit.lib.Repository;
@@ -31,7 +30,7 @@ import org.eclipse.jgit.lib.Repository;
  */
 public class ListIndex {
 
-    public static void main(String[] args) throws IOException, GitAPIException {
+    public static void main(String[] args) throws IOException {
         Repository repository = CookbookHelper.openJGitCookbookRepository();
 
         // DirCache contains all files of the repository
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
index c4354a3..c451d61 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
@@ -58,7 +58,7 @@ public class ListRefLog {
         repository.close();
     }
 
-    private static void listReflog(Repository repository, Ref ref) throws GitAPIException, InvalidRefNameException, IOException {
+    private static void listReflog(Repository repository, Ref ref) throws GitAPIException, InvalidRefNameException {
         /*
          * Ref head = repository.getRef(ref.getName());
          * RevWalk walk = new RevWalk(repository);
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
index b7d3f8e..d6854f5 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
@@ -19,7 +19,6 @@ package org.dstadler.jgit.unfinished;
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.errors.GitAPIException;
 import org.eclipse.jgit.lib.Ref;
 import org.eclipse.jgit.lib.Repository;
 import org.eclipse.jgit.revwalk.RevCommit;
@@ -34,7 +33,7 @@ import org.eclipse.jgit.treewalk.TreeWalk;
  */
 public class WalkTreeNonRecursive {
 
-    public static void main(String[] args) throws IOException, GitAPIException {
+    public static void main(String[] args) throws IOException {
         Repository repository = CookbookHelper.openJGitCookbookRepository();
 
         Ref head = repository.getRef("HEAD");
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
index 1e1f28d..2c1dbf0 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
@@ -19,7 +19,6 @@ package org.dstadler.jgit.unfinished;
 import java.io.IOException;
 
 import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.errors.GitAPIException;
 import org.eclipse.jgit.lib.Ref;
 import org.eclipse.jgit.lib.Repository;
 import org.eclipse.jgit.revwalk.RevCommit;
@@ -34,7 +33,7 @@ import org.eclipse.jgit.treewalk.TreeWalk;
  */
 public class WalkTreeRecursive {
 
-    public static void main(String[] args) throws IOException, GitAPIException {
+    public static void main(String[] args) throws IOException {
         Repository repository = CookbookHelper.openJGitCookbookRepository();
 
         Ref head = repository.getRef("HEAD");

§§--§§
commit d6536e86b3a1e050ec3e3a3e37c60ac076ada90f 7a712c5b4c61cdb775c900644fc191bc003d0828
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Sun Dec 21 21:45:55 2014 +0100 
Message: Switch to Java 7 compatibility and update to latest JGit
---§

diff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
index fef0954..970b79f 100644
--- a/.settings/org.eclipse.jdt.core.prefs
+++ b/.settings/org.eclipse.jdt.core.prefs
@@ -1,380 +1,382 @@
-eclipse.preferences.version=1
-org.eclipse.jdt.core.compiler.annotation.inheritNullAnnotations=disabled
+#
+#Sun Dec 21 21:43:45 CET 2014
+org.eclipse.jdt.core.compiler.problem.unavoidableGenericTypeProblems=enabled
 org.eclipse.jdt.core.compiler.annotation.missingNonNullByDefaultAnnotation=ignore
-org.eclipse.jdt.core.compiler.annotation.nonnull=org.eclipse.jdt.annotation.NonNull
-org.eclipse.jdt.core.compiler.annotation.nonnullbydefault=org.eclipse.jdt.annotation.NonNullByDefault
-org.eclipse.jdt.core.compiler.annotation.nullable=org.eclipse.jdt.annotation.Nullable
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits=do not insert
+org.eclipse.jdt.core.formatter.brace_position_for_block=end_of_line
+org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_try_resources=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws=do not insert
 org.eclipse.jdt.core.compiler.annotation.nullanalysis=disabled
-org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
-org.eclipse.jdt.core.compiler.codegen.methodParameters=do not generate
+org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration=end_of_line
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional=insert
+org.eclipse.jdt.core.compiler.problem.localVariableHiding=ignore
+org.eclipse.jdt.core.formatter.alignment_for_assignment=0
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression=do not insert
+org.eclipse.jdt.core.compiler.problem.staticAccessReceiver=warning
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block=insert
+org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_try_resources=insert
 org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
-org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
-org.eclipse.jdt.core.compiler.compliance=1.7
-org.eclipse.jdt.core.compiler.debug.lineNumber=generate
-org.eclipse.jdt.core.compiler.debug.localVariable=generate
-org.eclipse.jdt.core.compiler.debug.sourceFile=generate
-org.eclipse.jdt.core.compiler.problem.annotationSuperInterface=warning
-org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
-org.eclipse.jdt.core.compiler.problem.autoboxing=ignore
-org.eclipse.jdt.core.compiler.problem.comparingIdentical=warning
-org.eclipse.jdt.core.compiler.problem.deadCode=warning
-org.eclipse.jdt.core.compiler.problem.deprecation=warning
-org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode=disabled
-org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod=disabled
-org.eclipse.jdt.core.compiler.problem.discouragedReference=warning
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.compiler.problem.unusedPrivateMember=warning
+org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment=false
+org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column=true
+org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.indent_statements_compare_to_body=true
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces=insert
 org.eclipse.jdt.core.compiler.problem.emptyStatement=warning
-org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
-org.eclipse.jdt.core.compiler.problem.explicitlyClosedAutoCloseable=warning
-org.eclipse.jdt.core.compiler.problem.fallthroughCase=ignore
-org.eclipse.jdt.core.compiler.problem.fatalOptionalError=disabled
+org.eclipse.jdt.core.compiler.problem.reportMethodCanBePotentiallyStatic=ignore
+org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement=do not insert
+org.eclipse.jdt.core.compiler.problem.indirectStaticAccess=ignore
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw=insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant=do not insert
 org.eclipse.jdt.core.compiler.problem.fieldHiding=ignore
-org.eclipse.jdt.core.compiler.problem.finalParameterBound=warning
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while=do not insert
+org.eclipse.jdt.core.compiler.problem.annotationSuperInterface=warning
+org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral=ignore
+org.eclipse.jdt.core.formatter.insert_space_after_unary_operator=do not insert
+org.eclipse.jdt.core.formatter.blank_lines_after_imports=1
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation=48
+org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference=do not insert
 org.eclipse.jdt.core.compiler.problem.finallyBlockNotCompletingNormally=warning
-org.eclipse.jdt.core.compiler.problem.forbiddenReference=error
-org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock=warning
-org.eclipse.jdt.core.compiler.problem.includeNullInfoFromAsserts=disabled
-org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod=warning
-org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch=warning
-org.eclipse.jdt.core.compiler.problem.indirectStaticAccess=ignore
-org.eclipse.jdt.core.compiler.problem.localVariableHiding=ignore
-org.eclipse.jdt.core.compiler.problem.methodWithConstructorName=warning
-org.eclipse.jdt.core.compiler.problem.missingDefaultCase=ignore
-org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation=warning
-org.eclipse.jdt.core.compiler.problem.missingEnumCaseDespiteDefault=disabled
-org.eclipse.jdt.core.compiler.problem.missingHashCodeMethod=warning
-org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation=warning
-org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotationForInterfaceMethodImplementation=enabled
-org.eclipse.jdt.core.compiler.problem.missingSerialVersion=warning
-org.eclipse.jdt.core.compiler.problem.missingSynchronizedOnInheritedMethod=warning
-org.eclipse.jdt.core.compiler.problem.noEffectAssignment=warning
 org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion=warning
-org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral=ignore
-org.eclipse.jdt.core.compiler.problem.nonnullParameterAnnotationDropped=warning
-org.eclipse.jdt.core.compiler.problem.nullAnnotationInferenceConflict=error
-org.eclipse.jdt.core.compiler.problem.nullReference=warning
-org.eclipse.jdt.core.compiler.problem.nullSpecViolation=error
-org.eclipse.jdt.core.compiler.problem.nullUncheckedConversion=warning
-org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod=warning
 org.eclipse.jdt.core.compiler.problem.parameterAssignment=ignore
-org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment=warning
-org.eclipse.jdt.core.compiler.problem.potentialNullReference=ignore
-org.eclipse.jdt.core.compiler.problem.potentiallyUnclosedCloseable=warning
-org.eclipse.jdt.core.compiler.problem.rawTypeReference=warning
-org.eclipse.jdt.core.compiler.problem.redundantNullAnnotation=warning
-org.eclipse.jdt.core.compiler.problem.redundantNullCheck=warning
-org.eclipse.jdt.core.compiler.problem.redundantSpecificationOfTypeArguments=warning
-org.eclipse.jdt.core.compiler.problem.redundantSuperinterface=ignore
-org.eclipse.jdt.core.compiler.problem.reportMethodCanBePotentiallyStatic=ignore
-org.eclipse.jdt.core.compiler.problem.reportMethodCanBeStatic=ignore
-org.eclipse.jdt.core.compiler.problem.specialParameterHidingField=disabled
-org.eclipse.jdt.core.compiler.problem.staticAccessReceiver=warning
-org.eclipse.jdt.core.compiler.problem.suppressOptionalErrors=disabled
-org.eclipse.jdt.core.compiler.problem.suppressWarnings=enabled
-org.eclipse.jdt.core.compiler.problem.syntacticNullAnalysisForFields=disabled
-org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation=ignore
-org.eclipse.jdt.core.compiler.problem.typeParameterHiding=warning
-org.eclipse.jdt.core.compiler.problem.unavoidableGenericTypeProblems=enabled
-org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation=warning
-org.eclipse.jdt.core.compiler.problem.unclosedCloseable=warning
+org.eclipse.jdt.core.formatter.comment.format_source_code=true
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters=insert
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header=true
+org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package=insert
+org.eclipse.jdt.core.formatter.blank_lines_before_member_type=1
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_try=insert
 org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock=ignore
-org.eclipse.jdt.core.compiler.problem.unhandledWarningToken=warning
-org.eclipse.jdt.core.compiler.problem.unnecessaryElse=warning
-org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck=warning
-org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess=ignore
-org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException=warning
-org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionExemptExceptionAndThrowable=enabled
-org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionIncludeDocCommentReference=enabled
-org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionWhenOverriding=disabled
-org.eclipse.jdt.core.compiler.problem.unusedImport=warning
-org.eclipse.jdt.core.compiler.problem.unusedLabel=warning
-org.eclipse.jdt.core.compiler.problem.unusedLocal=warning
-org.eclipse.jdt.core.compiler.problem.unusedObjectAllocation=warning
-org.eclipse.jdt.core.compiler.problem.unusedParameter=ignore
-org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference=enabled
-org.eclipse.jdt.core.compiler.problem.unusedParameterWhenImplementingAbstract=disabled
-org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete=disabled
-org.eclipse.jdt.core.compiler.problem.unusedPrivateMember=warning
-org.eclipse.jdt.core.compiler.problem.unusedTypeParameter=warning
-org.eclipse.jdt.core.compiler.problem.unusedWarningToken=warning
-org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast=warning
-org.eclipse.jdt.core.compiler.source=1.7
-org.eclipse.jdt.core.formatter.align_type_members_on_columns=false
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression=16
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation=48
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant=16
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable=insert
+org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line=false
+org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation=ignore
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments=insert
+org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column=false
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations=insert
+org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk=0
 org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call=16
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation=16
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression=16
-org.eclipse.jdt.core.formatter.alignment_for_assignment=0
-org.eclipse.jdt.core.formatter.alignment_for_binary_expression=16
-org.eclipse.jdt.core.formatter.alignment_for_compact_if=16
-org.eclipse.jdt.core.formatter.alignment_for_conditional_expression=16
-org.eclipse.jdt.core.formatter.alignment_for_enum_constants=16
-org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer=16
-org.eclipse.jdt.core.formatter.alignment_for_method_declaration=0
-org.eclipse.jdt.core.formatter.alignment_for_multiple_fields=16
-org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_resources_in_try=80
-org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation=0
+org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve=3
+org.eclipse.jdt.core.compiler.problem.nullUncheckedConversion=warning
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration=insert
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.formatter.brace_position_for_switch=end_of_line
+org.eclipse.jdt.core.formatter.comment.format_header=true
+org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws=insert
+org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard=do not insert
 org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration=16
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case=insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for=do not insert
+org.eclipse.jdt.core.compiler.problem.unusedTypeParameter=warning
+org.eclipse.jdt.core.formatter.insert_space_before_semicolon=do not insert
+org.eclipse.jdt.core.compiler.problem.nonnullParameterAnnotationDropped=warning
+org.eclipse.jdt.core.compiler.problem.comparingIdentical=warning
 org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_union_type_in_multicatch=16
-org.eclipse.jdt.core.formatter.blank_lines_after_imports=1
-org.eclipse.jdt.core.formatter.blank_lines_after_package=1
-org.eclipse.jdt.core.formatter.blank_lines_before_field=0
-org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration=1
-org.eclipse.jdt.core.formatter.blank_lines_before_imports=1
-org.eclipse.jdt.core.formatter.blank_lines_before_member_type=1
+org.eclipse.jdt.core.formatter.comment.line_length=130
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch=do not insert
+org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases=true
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments=insert
+org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference=enabled
+org.eclipse.jdt.core.formatter.insert_space_after_binary_operator=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block=insert
+org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator=do not insert
+org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration=end_of_line
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments=insert
+org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock=warning
+org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer=insert
+org.eclipse.jdt.core.compiler.problem.unusedParameterWhenImplementingAbstract=disabled
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration=insert
+org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation=warning
+org.eclipse.jdt.core.compiler.codegen.methodParameters=do not generate
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters=insert
+org.eclipse.jdt.core.formatter.comment.format_javadoc_comments=true
+org.eclipse.jdt.core.formatter.continuation_indentation=2
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_field=insert
+org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags=insert
+org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation=0
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference=insert
+org.eclipse.jdt.core.compiler.problem.specialParameterHidingField=disabled
+org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator=insert
 org.eclipse.jdt.core.formatter.blank_lines_before_method=1
-org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk=0
-org.eclipse.jdt.core.formatter.blank_lines_before_package=0
-org.eclipse.jdt.core.formatter.blank_lines_between_import_groups=1
+org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line=true
+org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration=16
 org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations=1
-org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_array_initializer=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_block=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_block_in_case=end_of_line
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast=insert
 org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_enum_constant=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_method_declaration=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_switch=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_type_declaration=end_of_line
-org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment=false
-org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment=false
+org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration=insert
+org.eclipse.jdt.core.compiler.problem.reportMethodCanBeStatic=ignore
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression=16
+org.eclipse.jdt.core.formatter.join_lines_in_comments=false
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header=true
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.compiler.problem.missingHashCodeMethod=warning
+org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration=1
 org.eclipse.jdt.core.formatter.comment.format_block_comments=true
-org.eclipse.jdt.core.formatter.comment.format_header=true
+org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional=insert
+org.eclipse.jdt.core.formatter.alignment_for_multiple_fields=16
+org.eclipse.jdt.core.compiler.annotation.nonnullbydefault=org.eclipse.jdt.annotation.NonNullByDefault
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case=do not insert
+org.eclipse.jdt.core.formatter.alignment_for_union_type_in_multicatch=16
 org.eclipse.jdt.core.formatter.comment.format_html=true
-org.eclipse.jdt.core.formatter.comment.format_javadoc_comments=true
-org.eclipse.jdt.core.formatter.comment.format_line_comments=true
-org.eclipse.jdt.core.formatter.comment.format_source_code=true
-org.eclipse.jdt.core.formatter.comment.indent_parameter_description=false
-org.eclipse.jdt.core.formatter.comment.indent_root_tags=true
-org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags=insert
-org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter=do not insert
-org.eclipse.jdt.core.formatter.comment.line_length=130
-org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries=true
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration=do not insert
+org.eclipse.jdt.core.compiler.problem.syntacticNullAnalysisForFields=disabled
+org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration=16
+org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized=do not insert
+org.eclipse.jdt.core.compiler.problem.redundantSuperinterface=ignore
+org.eclipse.jdt.core.compiler.problem.autoboxing=ignore
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.problem.fallthroughCase=ignore
+org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer=insert
+org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode=disabled
+org.eclipse.jdt.core.compiler.problem.fatalOptionalError=disabled
+org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator=insert
+org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment=warning
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces=do not insert
+org.eclipse.jdt.core.formatter.brace_position_for_method_declaration=end_of_line
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException=warning
+org.eclipse.jdt.core.compiler.annotation.nonnull=org.eclipse.jdt.annotation.NonNull
+org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments=do not insert
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression=16
+org.eclipse.jdt.core.compiler.problem.unnecessaryElse=warning
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration=insert
+org.eclipse.jdt.core.compiler.problem.potentiallyUnclosedCloseable=warning
+org.eclipse.jdt.core.compiler.problem.redundantNullCheck=warning
+org.eclipse.jdt.core.compiler.problem.methodWithConstructorName=warning
+org.eclipse.jdt.core.compiler.problem.forbiddenReference=error
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if=insert
 org.eclipse.jdt.core.formatter.comment.new_lines_at_javadoc_boundaries=true
-org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments=false
-org.eclipse.jdt.core.formatter.compact_else_if=true
-org.eclipse.jdt.core.formatter.continuation_indentation=2
-org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer=2
-org.eclipse.jdt.core.formatter.disabling_tag=@formatter\:off
-org.eclipse.jdt.core.formatter.enabling_tag=@formatter\:on
-org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line=false
-org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column=false
-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header=true
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer=do not insert
+org.eclipse.jdt.core.compiler.problem.unclosedCloseable=warning
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations=do not insert
+org.eclipse.jdt.core.compiler.problem.suppressWarnings=enabled
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration=do not insert
 org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header=true
-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header=true
-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header=true
-org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases=true
-org.eclipse.jdt.core.formatter.indent_empty_lines=false
-org.eclipse.jdt.core.formatter.indent_statements_compare_to_block=true
-org.eclipse.jdt.core.formatter.indent_statements_compare_to_body=true
-org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases=true
-org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch=true
-org.eclipse.jdt.core.formatter.indentation.size=4
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_field=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_type=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_label=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement=do not insert
+org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter=do not insert
+org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration=16
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation=insert
+org.eclipse.jdt.core.formatter.insert_space_after_ellipsis=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration=do not insert
 org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter=insert
-org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator=insert
+org.eclipse.jdt.core.compiler.problem.redundantNullAnnotation=warning
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if=do not insert
 org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_binary_operator=insert
-org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters=insert
-org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block=insert
-org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast=insert
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert=insert
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case=insert
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional=insert
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_try=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch=do not insert
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant=16
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch=insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration=insert
+org.eclipse.jdt.core.formatter.brace_position_for_enum_constant=end_of_line
+org.eclipse.jdt.core.formatter.wrap_before_or_operator_multicatch=true
 org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters=insert
-org.eclipse.jdt.core.formatter.insert_space_after_ellipsis=insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer=insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation=do not insert
+org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch=warning
+org.eclipse.jdt.core.compiler.problem.missingDefaultCase=ignore
 org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_try=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration=do not insert
+org.eclipse.jdt.core.formatter.alignment_for_enum_constants=16
+org.eclipse.jdt.core.formatter.alignment_for_method_declaration=0
+org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck=warning
+org.eclipse.jdt.core.formatter.tabulation.char=space
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression=insert
+org.eclipse.jdt.core.compiler.problem.includeNullInfoFromAsserts=disabled
+org.eclipse.jdt.core.formatter.wrap_before_binary_operator=false
+org.eclipse.jdt.core.compiler.problem.suppressOptionalErrors=disabled
 org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for=insert
-org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_try_resources=insert
-org.eclipse.jdt.core.formatter.insert_space_after_unary_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter=insert
-org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator=insert
-org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_binary_operator=insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer=insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line=false
+org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line=false
+org.eclipse.jdt.core.formatter.compact_else_if=true
+org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return=insert
+org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference=do not insert
+org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration=end_of_line
+org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment=false
+org.eclipse.jdt.core.compiler.problem.missingSerialVersion=warning
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionExemptExceptionAndThrowable=enabled
+org.eclipse.jdt.core.formatter.disabling_tag=@formatter\:off
+org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod=warning
+org.eclipse.jdt.core.formatter.align_type_members_on_columns=false
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_type=insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement=do not insert
 org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_try=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert=insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case=do not insert
+org.eclipse.jdt.core.compiler.problem.finalParameterBound=warning
+org.eclipse.jdt.core.formatter.join_wrapped_lines=false
+org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator=do not insert
 org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional=insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for=insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments=do not insert
 org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_ellipsis=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.compiler.problem.nullAnnotationInferenceConflict=error
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header=true
+org.eclipse.jdt.core.formatter.use_on_off_tags=true
+org.eclipse.jdt.core.compiler.problem.discouragedReference=warning
+org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer=16
+org.eclipse.jdt.core.compiler.problem.missingEnumCaseDespiteDefault=disabled
+org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column=false
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch=insert
+org.eclipse.jdt.core.formatter.comment.format_line_comments=true
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch=insert
+org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line=false
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters=insert
 org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration=insert
+org.eclipse.jdt.core.formatter.comment.indent_parameter_description=false
+org.eclipse.jdt.core.formatter.indentation.size=4
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionWhenOverriding=disabled
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant=do not insert
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionIncludeDocCommentReference=enabled
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for=insert
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.formatter.insert_space_before_ellipsis=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for=insert
+org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration=16
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration=do not insert
 org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration=insert
+org.eclipse.jdt.core.compiler.problem.deprecation=warning
+org.eclipse.jdt.core.compiler.problem.potentialNullReference=ignore
+org.eclipse.jdt.core.formatter.comment.indent_root_tags=true
+org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation=warning
 org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant=insert
+org.eclipse.jdt.core.formatter.alignment_for_binary_expression=16
+org.eclipse.jdt.core.formatter.brace_position_for_type_declaration=end_of_line
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws=insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete=disabled
+org.eclipse.jdt.core.formatter.insert_space_before_binary_operator=insert
+org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations=false
+org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases=true
+org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator=do not insert
+org.eclipse.jdt.core.formatter.blank_lines_before_package=0
 org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference=do not insert
+org.eclipse.jdt.core.formatter.indent_empty_lines=false
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation=16
+org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested=true
+org.eclipse.jdt.core.compiler.problem.redundantSpecificationOfTypeArguments=warning
+org.eclipse.jdt.core.compiler.problem.missingSynchronizedOnInheritedMethod=warning
+org.eclipse.jdt.core.compiler.problem.deadCode=warning
 org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws=do not insert
+org.eclipse.jdt.core.compiler.problem.noEffectAssignment=warning
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments=do not insert
+org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation=warning
+org.eclipse.jdt.core.formatter.brace_position_for_block_in_case=end_of_line
+org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body=0
+org.eclipse.jdt.core.compiler.problem.unusedImport=warning
+org.eclipse.jdt.core.formatter.alignment_for_conditional_expression=16
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert=insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line=false
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits=insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized=do not insert
+org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch=true
 org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_try=insert
+org.eclipse.jdt.core.compiler.problem.unusedLabel=warning
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for=insert
+org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess=ignore
+org.eclipse.jdt.core.formatter.alignment_for_resources_in_try=80
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.compiler.problem.nullReference=warning
 org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while=insert
-org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return=insert
-org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw=insert
-org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional=insert
-org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_semicolon=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_try_resources=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation=do not insert
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.formatter.blank_lines_before_imports=1
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.formatter.alignment_for_compact_if=16
+org.eclipse.jdt.core.compiler.annotation.nullable=org.eclipse.jdt.annotation.Nullable
+org.eclipse.jdt.core.compiler.problem.typeParameterHiding=warning
+org.eclipse.jdt.core.formatter.insert_new_line_after_label=do not insert
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch=do not insert
+org.eclipse.jdt.core.compiler.problem.unhandledWarningToken=warning
+org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments=insert
+org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments=false
 org.eclipse.jdt.core.formatter.insert_space_before_unary_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.join_lines_in_comments=false
-org.eclipse.jdt.core.formatter.join_wrapped_lines=false
-org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line=false
-org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line=false
-org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line=false
-org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line=false
+org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_try=do not insert
+org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer=2
+org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotationForInterfaceMethodImplementation=enabled
 org.eclipse.jdt.core.formatter.lineSplit=130
-org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column=false
-org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column=true
-org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body=0
-org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve=3
-org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line=true
-org.eclipse.jdt.core.formatter.tabulation.char=space
+org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod=disabled
+org.eclipse.jdt.core.compiler.source=1.7
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration=insert
 org.eclipse.jdt.core.formatter.tabulation.size=4
-org.eclipse.jdt.core.formatter.use_on_off_tags=true
-org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations=false
-org.eclipse.jdt.core.formatter.wrap_before_binary_operator=false
-org.eclipse.jdt.core.formatter.wrap_before_or_operator_multicatch=true
-org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested=true
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.formatter.brace_position_for_array_initializer=end_of_line
+org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast=warning
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments=do not insert
+org.eclipse.jdt.core.formatter.blank_lines_between_import_groups=1
+org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries=true
+org.eclipse.jdt.core.compiler.problem.explicitlyClosedAutoCloseable=warning
+org.eclipse.jdt.core.compiler.problem.unusedWarningToken=warning
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional=insert
+org.eclipse.jdt.core.compiler.problem.unusedObjectAllocation=warning
+org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default=do not insert
+org.eclipse.jdt.core.compiler.problem.nullSpecViolation=error
+org.eclipse.jdt.core.compiler.problem.unusedParameter=ignore
+org.eclipse.jdt.core.compiler.annotation.inheritNullAnnotations=disabled
+org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod=warning
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration=insert
+org.eclipse.jdt.core.compiler.problem.unusedLocal=warning
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.indent_statements_compare_to_block=true
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments=do not insert
+org.eclipse.jdt.core.compiler.problem.rawTypeReference=warning
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation=do not insert
+eclipse.preferences.version=1
+org.eclipse.jdt.core.formatter.enabling_tag=@formatter\:on
+org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.compiler.compliance=1.7
+org.eclipse.jdt.core.formatter.blank_lines_after_package=1
+org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration=16
+org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing=do not insert
+org.eclipse.jdt.core.formatter.blank_lines_before_field=0
diff --git a/build.gradle b/build.gradle
index 67d1e04..4568ba1 100644
--- a/build.gradle
+++ b/build.gradle
@@ -2,7 +2,7 @@ apply plugin: 'java'
 //apply plugin: 'idea'
 apply plugin: 'eclipse'
 
-sourceCompatibility = '1.5'
+sourceCompatibility = '1.7'
 
 repositories {
   mavenCentral()
@@ -12,8 +12,8 @@ repositories {
 }
 
 dependencies {
-	compile 'org.eclipse.jgit:org.eclipse.jgit:3.5.2.201411120430-r'
-	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.5.2.201411120430-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit:3.5.3.201412180710-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.5.3.201412180710-r'
 	compile 'commons-io:commons-io:2.4'
 }
 

§§--§§
commit 510a5b3583995baca1a82468fc95765a1a52898d d6536e86b3a1e050ec3e3a3e37c60ac076ada90f
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Sun Dec 21 22:13:10 2014 +0100 
Message: Also adjust maven build to Java 1.7 and latest JGit
---§

diff --git a/pom.xml b/pom.xml
index 0250fd6..7282eab 100644
--- a/pom.xml
+++ b/pom.xml
@@ -20,12 +20,12 @@
     <dependency>
       <groupId>org.eclipse.jgit</groupId>
       <artifactId>org.eclipse.jgit</artifactId>
-      <version>3.5.2.201411120430-r</version>
+      <version>3.5.3.201412180710-r</version>
     </dependency>
     <dependency>
       <groupId>org.eclipse.jgit</groupId>
       <artifactId>org.eclipse.jgit.archive</artifactId>
-      <version>3.5.2.201411120430-r</version>
+      <version>3.5.3.201412180710-r</version>
     </dependency>
 
 	<dependency>
@@ -42,8 +42,8 @@
         <artifactId>maven-compiler-plugin</artifactId>
         <version>3.2</version>
         <configuration>
-          <source>1.5</source>
-          <target>1.5</target>
+          <source>1.7</source>
+          <target>1.7</target>
         </configuration>
       </plugin>
     </plugins>

§§--§§
commit 283d9b5d72b627911516f00ba35bfc546667c78d 510a5b3583995baca1a82468fc95765a1a52898d
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Fri Jan 2 21:09:30 2015 +0100 
Message: Update to JGit 3.6.0
---§

diff --git a/build.gradle b/build.gradle
index 4568ba1..12749b7 100644
--- a/build.gradle
+++ b/build.gradle
@@ -12,8 +12,8 @@ repositories {
 }
 
 dependencies {
-	compile 'org.eclipse.jgit:org.eclipse.jgit:3.5.3.201412180710-r'
-	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.5.3.201412180710-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit:3.6.0.201412230720-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.6.0.201412230720-r'
 	compile 'commons-io:commons-io:2.4'
 }
 
diff --git a/pom.xml b/pom.xml
index 7282eab..e3d10ac 100644
--- a/pom.xml
+++ b/pom.xml
@@ -20,12 +20,12 @@
     <dependency>
       <groupId>org.eclipse.jgit</groupId>
       <artifactId>org.eclipse.jgit</artifactId>
-      <version>3.5.3.201412180710-r</version>
+      <version>3.6.0.201412230720-r</version>
     </dependency>
     <dependency>
       <groupId>org.eclipse.jgit</groupId>
       <artifactId>org.eclipse.jgit.archive</artifactId>
-      <version>3.5.3.201412180710-r</version>
+      <version>3.6.0.201412230720-r</version>
     </dependency>
 
 	<dependency>

§§--§§
commit a1de79c38a30fa1d09333e4a64391ae59f15514f 283d9b5d72b627911516f00ba35bfc546667c78d
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Thu Feb 19 09:49:56 2015 +0100 
Message: Update to latest JGit 3.6.2
---§

diff --git a/build.gradle b/build.gradle
index 12749b7..a819813 100644
--- a/build.gradle
+++ b/build.gradle
@@ -12,8 +12,8 @@ repositories {
 }
 
 dependencies {
-	compile 'org.eclipse.jgit:org.eclipse.jgit:3.6.0.201412230720-r'
-	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.6.0.201412230720-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit:3.6.2.201501210735-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.6.2.201501210735-r'
 	compile 'commons-io:commons-io:2.4'
 }
 
diff --git a/pom.xml b/pom.xml
index e3d10ac..09ae396 100644
--- a/pom.xml
+++ b/pom.xml
@@ -20,12 +20,12 @@
     <dependency>
       <groupId>org.eclipse.jgit</groupId>
       <artifactId>org.eclipse.jgit</artifactId>
-      <version>3.6.0.201412230720-r</version>
+      <version>3.6.2.201501210735-r</version>
     </dependency>
     <dependency>
       <groupId>org.eclipse.jgit</groupId>
       <artifactId>org.eclipse.jgit.archive</artifactId>
-      <version>3.6.0.201412230720-r</version>
+      <version>3.6.2.201501210735-r</version>
     </dependency>
 
 	<dependency>

§§--§§
commit ac2c096383cb06e91655ae7b253015d49e930c47 a1de79c38a30fa1d09333e4a64391ae59f15514f
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Thu Feb 19 09:50:04 2015 +0100 
Message: Enhance ListTags to also list commits for each tag
---§

diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
index 9e9a3e1..3949403 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
@@ -21,15 +21,17 @@ import java.util.List;
 
 import org.dstadler.jgit.helper.CookbookHelper;
 import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.LogCommand;
 import org.eclipse.jgit.api.errors.GitAPIException;
 import org.eclipse.jgit.lib.Ref;
 import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
 
 
 
 /**
  * Simple snippet which shows how to list all Tags
- * 
+ *
  * @author dominik.stadler at gmx.at
  */
 public class ListTags {
@@ -40,6 +42,21 @@ public class ListTags {
         List<Ref> call = new Git(repository).tagList().call();
         for (Ref ref : call) {
             System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+
+            // fetch all commits for this tag
+            LogCommand log = new Git(repository).log();
+
+            Ref peeledRef = repository.peel(ref);
+            if(peeledRef.getPeeledObjectId() != null) {
+            	log.add(peeledRef.getPeeledObjectId());
+            } else {
+            	log.add(ref.getObjectId());
+            }
+
+			Iterable<RevCommit> logs = log.call();
+			for (RevCommit rev : logs) {
+				System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+			}
         }
 
         repository.close();

§§--§§
commit 7769ad420e3e2a3eb93383c4f5c4afcefafbd36a ac2c096383cb06e91655ae7b253015d49e930c47
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon Mar 16 12:37:10 2015 +0100 
Message: Update to JGit 3.7.0 and Gradle 2.3.0
---§

diff --git a/.settings/org.eclipse.core.resources.prefs b/.settings/org.eclipse.core.resources.prefs
new file mode 100755
index 0000000..4824b80
--- /dev/null
+++ b/.settings/org.eclipse.core.resources.prefs
@@ -0,0 +1,2 @@
+eclipse.preferences.version=1
+encoding/<project>=UTF-8
diff --git a/.settings/org.eclipse.core.runtime.prefs b/.settings/org.eclipse.core.runtime.prefs
new file mode 100755
index 0000000..c522e1f
--- /dev/null
+++ b/.settings/org.eclipse.core.runtime.prefs
@@ -0,0 +1,2 @@
+eclipse.preferences.version=1
+line.separator=\n
diff --git a/build.gradle b/build.gradle
index a819813..3d771a2 100644
--- a/build.gradle
+++ b/build.gradle
@@ -12,11 +12,11 @@ repositories {
 }
 
 dependencies {
-	compile 'org.eclipse.jgit:org.eclipse.jgit:3.6.2.201501210735-r'
-	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.6.2.201501210735-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit:3.7.0.201502260915-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.7.0.201502260915-r'
 	compile 'commons-io:commons-io:2.4'
 }
 
 task wrapper(type: Wrapper) {
-	gradleVersion = '2.2.1'
+	gradleVersion = '2.3'
 }
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 3d0dee6..c97a8bd 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 5c69a07..6568c98 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Thu Dec 11 23:25:39 CET 2014
-distributionBase=GRADLE_USER_HOME
-distributionPath=wrapper/dists
-zipStoreBase=GRADLE_USER_HOME
-zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-bin.zip
+#Mon Mar 16 12:31:08 CET 2015
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.3-bin.zip
diff --git a/gradlew.bat b/gradlew.bat
index 8a0b282..aec9973 100755
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -1,90 +1,90 @@
-@if "%DEBUG%" == "" @echo off
-@rem ##########################################################################
-@rem
-@rem  Gradle startup script for Windows
-@rem
-@rem ##########################################################################
-
-@rem Set local scope for the variables with windows NT shell
-if "%OS%"=="Windows_NT" setlocal
-
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
-set DIRNAME=%~dp0
-if "%DIRNAME%" == "" set DIRNAME=.
-set APP_BASE_NAME=%~n0
-set APP_HOME=%DIRNAME%
-
-@rem Find java.exe
-if defined JAVA_HOME goto findJavaFromJavaHome
-
-set JAVA_EXE=java.exe
-%JAVA_EXE% -version >NUL 2>&1
-if "%ERRORLEVEL%" == "0" goto init
-
-echo.
-echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:findJavaFromJavaHome
-set JAVA_HOME=%JAVA_HOME:"=%
-set JAVA_EXE=%JAVA_HOME%/bin/java.exe
-
-if exist "%JAVA_EXE%" goto init
-
-echo.
-echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:init
-@rem Get command-line arguments, handling Windowz variants
-
-if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
-
-:win9xME_args
-@rem Slurp the command line arguments.
-set CMD_LINE_ARGS=
-set _SKIP=2
-
-:win9xME_args_slurp
-if "x%~1" == "x" goto execute
-
-set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
-
-:execute
-@rem Setup the command line
-
-set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
-
-@rem Execute Gradle
-"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
-
-:end
-@rem End local scope for the variables with windows NT shell
-if "%ERRORLEVEL%"=="0" goto mainEnd
-
-:fail
-rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
-rem the _cmd.exe /c_ return code!
-if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
-exit /b 1
-
-:mainEnd
-if "%OS%"=="Windows_NT" endlocal
-
-:omega
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/pom.xml b/pom.xml
index 09ae396..56fd28b 100644
--- a/pom.xml
+++ b/pom.xml
@@ -20,12 +20,12 @@
     <dependency>
       <groupId>org.eclipse.jgit</groupId>
       <artifactId>org.eclipse.jgit</artifactId>
-      <version>3.6.2.201501210735-r</version>
+      <version>3.7.0.201502260915-r</version>
     </dependency>
     <dependency>
       <groupId>org.eclipse.jgit</groupId>
       <artifactId>org.eclipse.jgit.archive</artifactId>
-      <version>3.6.2.201501210735-r</version>
+      <version>3.7.0.201502260915-r</version>
     </dependency>
 
 	<dependency>

§§--§§
commit 83a763d07e8f74162be92af684a6506cdd03bbff 7769ad420e3e2a3eb93383c4f5c4afcefafbd36a
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon Apr 13 23:21:30 2015 +0200 
Message: Add slf4j-simple as it seems some parts of JGit use slf4j
---§

diff --git a/build.gradle b/build.gradle
index 3d771a2..1c3c5c2 100644
--- a/build.gradle
+++ b/build.gradle
@@ -15,6 +15,7 @@ dependencies {
 	compile 'org.eclipse.jgit:org.eclipse.jgit:3.7.0.201502260915-r'
 	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.7.0.201502260915-r'
 	compile 'commons-io:commons-io:2.4'
+	compile 'org.slf4j:slf4j-simple:1.7.12'
 }
 
 task wrapper(type: Wrapper) {
diff --git a/pom.xml b/pom.xml
index 56fd28b..8092f37 100644
--- a/pom.xml
+++ b/pom.xml
@@ -33,6 +33,11 @@
 		<artifactId>commons-io</artifactId>
 		<version>2.4</version>
 	</dependency>
+	<dependency>
+		<groupId>org.slf4j</groupId>
+		<artifactId>slf4j-simple</artifactId>
+		<version>1.7.12</version>
+	</dependency>
   </dependencies>
 
   <build>

§§--§§
commit ed8eff82faf70c36c6129d1f6951f5cec6609012 83a763d07e8f74162be92af684a6506cdd03bbff
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon Apr 13 23:21:56 2015 +0200 
Message: Rewrite example to use preferred way of creating a new repository
---§

diff --git a/src/main/java/org/dstadler/jgit/CreateNewRepository.java b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
index 7fe2080..d930761 100644
--- a/src/main/java/org/dstadler/jgit/CreateNewRepository.java
+++ b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
@@ -20,28 +20,27 @@ import java.io.File;
 import java.io.IOException;
 
 import org.apache.commons.io.FileUtils;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
 
 /**
  * Simple snippet which shows how to create a new repository
- * 
+ *
  * @author dominik.stadler at gmx.at
  */
 public class CreateNewRepository {
 
-    public static void main(String[] args) throws IOException {
+    public static void main(String[] args) throws IOException, IllegalStateException, GitAPIException {
         // prepare a new folder
         File localPath = File.createTempFile("TestGitRepository", "");
         localPath.delete();
 
         // create the directory
-        Repository repository = FileRepositoryBuilder.create(new File(localPath, ".git"));
-        repository.create();
+        Git git = Git.init().setDirectory(localPath).call();
 
-        System.out.println("Having repository: " + repository.getDirectory());
+        System.out.println("Having repository: " + git.getRepository().getDirectory());
 
-        repository.close();
+        git.close();
 
         FileUtils.deleteDirectory(localPath);
     }

§§--§§
commit d8cdb7596fe6c2c40c7166007ff66e6725b4782d ed8eff82faf70c36c6129d1f6951f5cec6609012
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon Apr 13 23:30:46 2015 +0200 
Message: Update introduction somewhat
---§

diff --git a/README.md b/README.md
index a3b586e..09a784d 100644
--- a/README.md
+++ b/README.md
@@ -4,9 +4,9 @@ jgit-cookbook
 
 Provides examples and code snippets for the [JGit](http://wiki.eclipse.org/JGit/) Java Git implementation. 
 
-The JGit framework is rich and diverse, it has two layers, a low-level _api_ and a higher-level set of _porcelain_ commands. 
+The JGit framework is rich and diverse, it has two layers, a low-level _api_ and a higher-level set of _porcelain_ commands. This can be a bit intimidating at first as there are lots of classes, some of which are not relevant for most tasks.
 
-This project tries to provide a collection of ready-to-run snippets which try to augment the existing [JavaDoc](http://download.eclipse.org/jgit/docs/latest/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide)
+This project tries to provide a collection of ready-to-run snippets which try to provide a quick start into building functionality using JGit. Please make sure to also use the existing [JavaDoc](http://download.eclipse.org/jgit/docs/latest/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide) as well, as they are well done and provide detailed information and a general overview of JGit respectively.
 
 *Note: Please use sites such as http://stackoverflow.com for general questions about JGit usage, not issues in this project. Issues should be used for problems with snippets and suggestions of missing snippets. Snippets from good answers on stackoverflow can then be included here, naturally.*
 
@@ -20,11 +20,11 @@ This project tries to provide a collection of ready-to-run snippets which try to
 
 ###### When using Maven
 
-	mvn dependency:sources eclipse:eclipse package
+    mvn dependency:sources eclipse:eclipse package
 
 ###### When using Gradle
 
-	./gradlew eclipse check
+    ./gradlew eclipse check
 
 #### Run it
 

§§--§§
commit e4879bc2faf00f796e81a1af20d87e7344633ce5 d8cdb7596fe6c2c40c7166007ff66e6725b4782d
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon May 11 12:50:22 2015 +0200 
Message: Update to Gradle 2.4
---§

diff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
index 970b79f..8867e29 100644
--- a/.settings/org.eclipse.jdt.core.prefs
+++ b/.settings/org.eclipse.jdt.core.prefs
@@ -1,382 +1,380 @@
-#
-#Sun Dec 21 21:43:45 CET 2014
-org.eclipse.jdt.core.compiler.problem.unavoidableGenericTypeProblems=enabled
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.annotation.inheritNullAnnotations=disabled
 org.eclipse.jdt.core.compiler.annotation.missingNonNullByDefaultAnnotation=ignore
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits=do not insert
-org.eclipse.jdt.core.formatter.brace_position_for_block=end_of_line
-org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_try_resources=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws=do not insert
+org.eclipse.jdt.core.compiler.annotation.nonnull=org.eclipse.jdt.annotation.NonNull
+org.eclipse.jdt.core.compiler.annotation.nonnullbydefault=org.eclipse.jdt.annotation.NonNullByDefault
+org.eclipse.jdt.core.compiler.annotation.nullable=org.eclipse.jdt.annotation.Nullable
 org.eclipse.jdt.core.compiler.annotation.nullanalysis=disabled
-org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration=end_of_line
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional=insert
-org.eclipse.jdt.core.compiler.problem.localVariableHiding=ignore
-org.eclipse.jdt.core.formatter.alignment_for_assignment=0
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression=do not insert
-org.eclipse.jdt.core.compiler.problem.staticAccessReceiver=warning
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block=insert
-org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_try_resources=insert
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.methodParameters=do not generate
 org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters=do not insert
-org.eclipse.jdt.core.compiler.problem.unusedPrivateMember=warning
-org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment=false
-org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column=true
-org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer=do not insert
-org.eclipse.jdt.core.formatter.indent_statements_compare_to_body=true
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces=insert
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.7
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.annotationSuperInterface=warning
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.autoboxing=ignore
+org.eclipse.jdt.core.compiler.problem.comparingIdentical=warning
+org.eclipse.jdt.core.compiler.problem.deadCode=warning
+org.eclipse.jdt.core.compiler.problem.deprecation=warning
+org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode=disabled
+org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod=disabled
+org.eclipse.jdt.core.compiler.problem.discouragedReference=warning
 org.eclipse.jdt.core.compiler.problem.emptyStatement=warning
-org.eclipse.jdt.core.compiler.problem.reportMethodCanBePotentiallyStatic=ignore
-org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement=do not insert
-org.eclipse.jdt.core.compiler.problem.indirectStaticAccess=ignore
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw=insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant=do not insert
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.problem.explicitlyClosedAutoCloseable=warning
+org.eclipse.jdt.core.compiler.problem.fallthroughCase=ignore
+org.eclipse.jdt.core.compiler.problem.fatalOptionalError=disabled
 org.eclipse.jdt.core.compiler.problem.fieldHiding=ignore
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while=do not insert
-org.eclipse.jdt.core.compiler.problem.annotationSuperInterface=warning
-org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral=ignore
-org.eclipse.jdt.core.formatter.insert_space_after_unary_operator=do not insert
-org.eclipse.jdt.core.formatter.blank_lines_after_imports=1
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation=48
-org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.compiler.problem.finalParameterBound=warning
 org.eclipse.jdt.core.compiler.problem.finallyBlockNotCompletingNormally=warning
+org.eclipse.jdt.core.compiler.problem.forbiddenReference=error
+org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock=warning
+org.eclipse.jdt.core.compiler.problem.includeNullInfoFromAsserts=disabled
+org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod=warning
+org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch=warning
+org.eclipse.jdt.core.compiler.problem.indirectStaticAccess=ignore
+org.eclipse.jdt.core.compiler.problem.localVariableHiding=ignore
+org.eclipse.jdt.core.compiler.problem.methodWithConstructorName=warning
+org.eclipse.jdt.core.compiler.problem.missingDefaultCase=ignore
+org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation=warning
+org.eclipse.jdt.core.compiler.problem.missingEnumCaseDespiteDefault=disabled
+org.eclipse.jdt.core.compiler.problem.missingHashCodeMethod=warning
+org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation=warning
+org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotationForInterfaceMethodImplementation=enabled
+org.eclipse.jdt.core.compiler.problem.missingSerialVersion=warning
+org.eclipse.jdt.core.compiler.problem.missingSynchronizedOnInheritedMethod=warning
+org.eclipse.jdt.core.compiler.problem.noEffectAssignment=warning
 org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion=warning
+org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral=ignore
+org.eclipse.jdt.core.compiler.problem.nonnullParameterAnnotationDropped=warning
+org.eclipse.jdt.core.compiler.problem.nullAnnotationInferenceConflict=error
+org.eclipse.jdt.core.compiler.problem.nullReference=warning
+org.eclipse.jdt.core.compiler.problem.nullSpecViolation=error
+org.eclipse.jdt.core.compiler.problem.nullUncheckedConversion=warning
+org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod=warning
 org.eclipse.jdt.core.compiler.problem.parameterAssignment=ignore
-org.eclipse.jdt.core.formatter.comment.format_source_code=true
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters=insert
-org.eclipse.jdt.core.compiler.debug.localVariable=generate
-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header=true
-org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package=insert
-org.eclipse.jdt.core.formatter.blank_lines_before_member_type=1
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_try=insert
-org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock=ignore
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable=insert
-org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line=false
+org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment=warning
+org.eclipse.jdt.core.compiler.problem.potentialNullReference=ignore
+org.eclipse.jdt.core.compiler.problem.potentiallyUnclosedCloseable=warning
+org.eclipse.jdt.core.compiler.problem.rawTypeReference=warning
+org.eclipse.jdt.core.compiler.problem.redundantNullAnnotation=warning
+org.eclipse.jdt.core.compiler.problem.redundantNullCheck=warning
+org.eclipse.jdt.core.compiler.problem.redundantSpecificationOfTypeArguments=warning
+org.eclipse.jdt.core.compiler.problem.redundantSuperinterface=ignore
+org.eclipse.jdt.core.compiler.problem.reportMethodCanBePotentiallyStatic=ignore
+org.eclipse.jdt.core.compiler.problem.reportMethodCanBeStatic=ignore
+org.eclipse.jdt.core.compiler.problem.specialParameterHidingField=disabled
+org.eclipse.jdt.core.compiler.problem.staticAccessReceiver=warning
+org.eclipse.jdt.core.compiler.problem.suppressOptionalErrors=disabled
+org.eclipse.jdt.core.compiler.problem.suppressWarnings=enabled
+org.eclipse.jdt.core.compiler.problem.syntacticNullAnalysisForFields=disabled
 org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation=ignore
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments=insert
-org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column=false
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations=insert
-org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk=0
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call=16
-org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve=3
-org.eclipse.jdt.core.compiler.problem.nullUncheckedConversion=warning
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration=insert
-org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
-org.eclipse.jdt.core.formatter.brace_position_for_switch=end_of_line
-org.eclipse.jdt.core.formatter.comment.format_header=true
-org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws=insert
-org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard=do not insert
-org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration=16
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case=insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for=do not insert
-org.eclipse.jdt.core.compiler.problem.unusedTypeParameter=warning
-org.eclipse.jdt.core.formatter.insert_space_before_semicolon=do not insert
-org.eclipse.jdt.core.compiler.problem.nonnullParameterAnnotationDropped=warning
-org.eclipse.jdt.core.compiler.problem.comparingIdentical=warning
-org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration=16
-org.eclipse.jdt.core.formatter.comment.line_length=130
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch=do not insert
-org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases=true
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments=insert
+org.eclipse.jdt.core.compiler.problem.typeParameterHiding=warning
+org.eclipse.jdt.core.compiler.problem.unavoidableGenericTypeProblems=enabled
+org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation=warning
+org.eclipse.jdt.core.compiler.problem.unclosedCloseable=warning
+org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock=ignore
+org.eclipse.jdt.core.compiler.problem.unhandledWarningToken=warning
+org.eclipse.jdt.core.compiler.problem.unnecessaryElse=warning
+org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck=warning
+org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess=ignore
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException=warning
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionExemptExceptionAndThrowable=enabled
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionIncludeDocCommentReference=enabled
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionWhenOverriding=disabled
+org.eclipse.jdt.core.compiler.problem.unusedImport=warning
+org.eclipse.jdt.core.compiler.problem.unusedLabel=warning
+org.eclipse.jdt.core.compiler.problem.unusedLocal=warning
+org.eclipse.jdt.core.compiler.problem.unusedObjectAllocation=warning
+org.eclipse.jdt.core.compiler.problem.unusedParameter=ignore
 org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference=enabled
-org.eclipse.jdt.core.formatter.insert_space_after_binary_operator=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block=insert
-org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator=do not insert
-org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration=end_of_line
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments=insert
-org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock=warning
-org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer=insert
 org.eclipse.jdt.core.compiler.problem.unusedParameterWhenImplementingAbstract=disabled
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration=insert
-org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation=warning
-org.eclipse.jdt.core.compiler.codegen.methodParameters=do not generate
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters=insert
-org.eclipse.jdt.core.formatter.comment.format_javadoc_comments=true
-org.eclipse.jdt.core.formatter.continuation_indentation=2
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_field=insert
-org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags=insert
+org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete=disabled
+org.eclipse.jdt.core.compiler.problem.unusedPrivateMember=warning
+org.eclipse.jdt.core.compiler.problem.unusedTypeParameter=warning
+org.eclipse.jdt.core.compiler.problem.unusedWarningToken=warning
+org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast=warning
+org.eclipse.jdt.core.compiler.source=1.7
+org.eclipse.jdt.core.formatter.align_type_members_on_columns=false
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation=48
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression=16
+org.eclipse.jdt.core.formatter.alignment_for_assignment=0
+org.eclipse.jdt.core.formatter.alignment_for_binary_expression=16
+org.eclipse.jdt.core.formatter.alignment_for_compact_if=16
+org.eclipse.jdt.core.formatter.alignment_for_conditional_expression=16
+org.eclipse.jdt.core.formatter.alignment_for_enum_constants=16
+org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer=16
+org.eclipse.jdt.core.formatter.alignment_for_method_declaration=0
+org.eclipse.jdt.core.formatter.alignment_for_multiple_fields=16
+org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_resources_in_try=80
 org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation=0
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference=insert
-org.eclipse.jdt.core.compiler.problem.specialParameterHidingField=disabled
-org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator=insert
+org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_union_type_in_multicatch=16
+org.eclipse.jdt.core.formatter.blank_lines_after_imports=1
+org.eclipse.jdt.core.formatter.blank_lines_after_package=1
+org.eclipse.jdt.core.formatter.blank_lines_before_field=0
+org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration=1
+org.eclipse.jdt.core.formatter.blank_lines_before_imports=1
+org.eclipse.jdt.core.formatter.blank_lines_before_member_type=1
 org.eclipse.jdt.core.formatter.blank_lines_before_method=1
-org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line=true
-org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration=16
+org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk=0
+org.eclipse.jdt.core.formatter.blank_lines_before_package=0
+org.eclipse.jdt.core.formatter.blank_lines_between_import_groups=1
 org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations=1
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations=insert
-org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast=insert
+org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_array_initializer=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_block=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_block_in_case=end_of_line
 org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration=end_of_line
-org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration=insert
-org.eclipse.jdt.core.compiler.problem.reportMethodCanBeStatic=ignore
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression=16
-org.eclipse.jdt.core.formatter.join_lines_in_comments=false
-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header=true
-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.compiler.problem.missingHashCodeMethod=warning
-org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration=1
+org.eclipse.jdt.core.formatter.brace_position_for_enum_constant=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_method_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_switch=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_type_declaration=end_of_line
+org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment=false
+org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment=false
 org.eclipse.jdt.core.formatter.comment.format_block_comments=true
-org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional=insert
-org.eclipse.jdt.core.formatter.alignment_for_multiple_fields=16
-org.eclipse.jdt.core.compiler.annotation.nonnullbydefault=org.eclipse.jdt.annotation.NonNullByDefault
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case=do not insert
-org.eclipse.jdt.core.formatter.alignment_for_union_type_in_multicatch=16
+org.eclipse.jdt.core.formatter.comment.format_header=true
 org.eclipse.jdt.core.formatter.comment.format_html=true
-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration=do not insert
-org.eclipse.jdt.core.compiler.problem.syntacticNullAnalysisForFields=disabled
-org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration=16
-org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized=do not insert
-org.eclipse.jdt.core.compiler.problem.redundantSuperinterface=ignore
-org.eclipse.jdt.core.compiler.problem.autoboxing=ignore
-org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
-org.eclipse.jdt.core.compiler.problem.fallthroughCase=ignore
-org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer=insert
-org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode=disabled
-org.eclipse.jdt.core.compiler.problem.fatalOptionalError=disabled
-org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for=insert
-org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator=insert
-org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment=warning
-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces=do not insert
-org.eclipse.jdt.core.formatter.brace_position_for_method_declaration=end_of_line
-org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException=warning
-org.eclipse.jdt.core.compiler.annotation.nonnull=org.eclipse.jdt.annotation.NonNull
-org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments=do not insert
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression=16
-org.eclipse.jdt.core.compiler.problem.unnecessaryElse=warning
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration=insert
-org.eclipse.jdt.core.compiler.problem.potentiallyUnclosedCloseable=warning
-org.eclipse.jdt.core.compiler.problem.redundantNullCheck=warning
-org.eclipse.jdt.core.compiler.problem.methodWithConstructorName=warning
-org.eclipse.jdt.core.compiler.problem.forbiddenReference=error
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if=insert
+org.eclipse.jdt.core.formatter.comment.format_javadoc_comments=true
+org.eclipse.jdt.core.formatter.comment.format_line_comments=true
+org.eclipse.jdt.core.formatter.comment.format_source_code=true
+org.eclipse.jdt.core.formatter.comment.indent_parameter_description=false
+org.eclipse.jdt.core.formatter.comment.indent_root_tags=true
+org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags=insert
+org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter=do not insert
+org.eclipse.jdt.core.formatter.comment.line_length=130
+org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries=true
 org.eclipse.jdt.core.formatter.comment.new_lines_at_javadoc_boundaries=true
-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer=do not insert
-org.eclipse.jdt.core.compiler.problem.unclosedCloseable=warning
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations=do not insert
-org.eclipse.jdt.core.compiler.problem.suppressWarnings=enabled
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments=false
+org.eclipse.jdt.core.formatter.compact_else_if=true
+org.eclipse.jdt.core.formatter.continuation_indentation=2
+org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer=2
+org.eclipse.jdt.core.formatter.disabling_tag=@formatter\:off
+org.eclipse.jdt.core.formatter.enabling_tag=@formatter\:on
+org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line=false
+org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column=false
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header=true
 org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header=true
-org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter=do not insert
-org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration=16
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation=insert
-org.eclipse.jdt.core.formatter.insert_space_after_ellipsis=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration=do not insert
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header=true
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header=true
+org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases=true
+org.eclipse.jdt.core.formatter.indent_empty_lines=false
+org.eclipse.jdt.core.formatter.indent_statements_compare_to_block=true
+org.eclipse.jdt.core.formatter.indent_statements_compare_to_body=true
+org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases=true
+org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch=true
+org.eclipse.jdt.core.formatter.indentation.size=4
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_field=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_type=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_label=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement=do not insert
 org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement=do not insert
-org.eclipse.jdt.core.compiler.problem.redundantNullAnnotation=warning
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter=insert
+org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator=insert
 org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_try=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch=do not insert
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant=16
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch=insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration=insert
-org.eclipse.jdt.core.formatter.brace_position_for_enum_constant=end_of_line
-org.eclipse.jdt.core.formatter.wrap_before_or_operator_multicatch=true
+org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_binary_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for=insert
 org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement=insert
-org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch=warning
-org.eclipse.jdt.core.compiler.problem.missingDefaultCase=ignore
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer=insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration=do not insert
-org.eclipse.jdt.core.formatter.alignment_for_enum_constants=16
-org.eclipse.jdt.core.formatter.alignment_for_method_declaration=0
-org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck=warning
-org.eclipse.jdt.core.formatter.tabulation.char=space
 org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression=insert
-org.eclipse.jdt.core.compiler.problem.includeNullInfoFromAsserts=disabled
-org.eclipse.jdt.core.formatter.wrap_before_binary_operator=false
-org.eclipse.jdt.core.compiler.problem.suppressOptionalErrors=disabled
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_ellipsis=insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_try=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional=insert
 org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line=false
-org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line=false
-org.eclipse.jdt.core.formatter.compact_else_if=true
-org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return=insert
-org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference=do not insert
-org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration=end_of_line
-org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment=false
-org.eclipse.jdt.core.compiler.problem.missingSerialVersion=warning
-org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionExemptExceptionAndThrowable=enabled
-org.eclipse.jdt.core.formatter.disabling_tag=@formatter\:off
-org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod=warning
-org.eclipse.jdt.core.formatter.align_type_members_on_columns=false
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_type=insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_try_resources=insert
+org.eclipse.jdt.core.formatter.insert_space_after_unary_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter=insert
+org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_binary_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference=do not insert
 org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation=do not insert
-org.eclipse.jdt.core.compiler.problem.finalParameterBound=warning
-org.eclipse.jdt.core.formatter.join_wrapped_lines=false
-org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_try=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert=insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case=do not insert
 org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional=insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations=do not insert
-org.eclipse.jdt.core.compiler.problem.nullAnnotationInferenceConflict=error
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header=true
-org.eclipse.jdt.core.formatter.use_on_off_tags=true
-org.eclipse.jdt.core.compiler.problem.discouragedReference=warning
-org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer=16
-org.eclipse.jdt.core.compiler.problem.missingEnumCaseDespiteDefault=disabled
-org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column=false
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch=insert
-org.eclipse.jdt.core.formatter.comment.format_line_comments=true
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch=insert
-org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line=false
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations=insert
-org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments=do not insert
-org.eclipse.jdt.core.formatter.comment.indent_parameter_description=false
-org.eclipse.jdt.core.formatter.indentation.size=4
-org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionWhenOverriding=disabled
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant=do not insert
-org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionIncludeDocCommentReference=enabled
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default=do not insert
 org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for=insert
-org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters=do not insert
 org.eclipse.jdt.core.formatter.insert_space_before_ellipsis=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for=insert
-org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration=16
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration=insert
 org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer=insert
-org.eclipse.jdt.core.compiler.problem.deprecation=warning
-org.eclipse.jdt.core.compiler.problem.potentialNullReference=ignore
-org.eclipse.jdt.core.formatter.comment.indent_root_tags=true
-org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation=warning
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration=insert
 org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant=insert
-org.eclipse.jdt.core.formatter.alignment_for_binary_expression=16
-org.eclipse.jdt.core.formatter.brace_position_for_type_declaration=end_of_line
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws=insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression=do not insert
-org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete=disabled
-org.eclipse.jdt.core.formatter.insert_space_before_binary_operator=insert
-org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations=false
-org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases=true
-org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator=do not insert
-org.eclipse.jdt.core.formatter.blank_lines_before_package=0
 org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration=insert
-org.eclipse.jdt.core.formatter.indent_empty_lines=false
-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments=do not insert
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation=16
-org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested=true
-org.eclipse.jdt.core.compiler.problem.redundantSpecificationOfTypeArguments=warning
-org.eclipse.jdt.core.compiler.problem.missingSynchronizedOnInheritedMethod=warning
-org.eclipse.jdt.core.compiler.problem.deadCode=warning
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference=do not insert
 org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws=do not insert
-org.eclipse.jdt.core.compiler.problem.noEffectAssignment=warning
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments=do not insert
-org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation=warning
-org.eclipse.jdt.core.formatter.brace_position_for_block_in_case=end_of_line
-org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body=0
-org.eclipse.jdt.core.compiler.problem.unusedImport=warning
-org.eclipse.jdt.core.formatter.alignment_for_conditional_expression=16
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert=insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration=do not insert
-org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line=false
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits=insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized=do not insert
-org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch=true
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized=insert
-org.eclipse.jdt.core.compiler.problem.unusedLabel=warning
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters=insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant=do not insert
 org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for=insert
-org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess=ignore
-org.eclipse.jdt.core.formatter.alignment_for_resources_in_try=80
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.compiler.problem.nullReference=warning
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration=do not insert
 org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation=do not insert
-org.eclipse.jdt.core.compiler.debug.lineNumber=generate
-org.eclipse.jdt.core.formatter.blank_lines_before_imports=1
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression=do not insert
-org.eclipse.jdt.core.formatter.alignment_for_compact_if=16
-org.eclipse.jdt.core.compiler.annotation.nullable=org.eclipse.jdt.annotation.Nullable
-org.eclipse.jdt.core.compiler.problem.typeParameterHiding=warning
-org.eclipse.jdt.core.formatter.insert_new_line_after_label=do not insert
-org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch=do not insert
-org.eclipse.jdt.core.compiler.problem.unhandledWarningToken=warning
-org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments=insert
-org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments=false
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_try=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while=insert
+org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return=insert
+org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw=insert
+org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_semicolon=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_try_resources=do not insert
 org.eclipse.jdt.core.formatter.insert_space_before_unary_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_try=do not insert
-org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer=2
-org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotationForInterfaceMethodImplementation=enabled
+org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.join_lines_in_comments=false
+org.eclipse.jdt.core.formatter.join_wrapped_lines=false
+org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line=false
+org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line=false
+org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line=false
+org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line=false
 org.eclipse.jdt.core.formatter.lineSplit=130
-org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod=disabled
-org.eclipse.jdt.core.compiler.source=1.7
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration=insert
+org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column=false
+org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column=true
+org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body=0
+org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve=3
+org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line=true
+org.eclipse.jdt.core.formatter.tabulation.char=space
 org.eclipse.jdt.core.formatter.tabulation.size=4
-org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
-org.eclipse.jdt.core.formatter.brace_position_for_array_initializer=end_of_line
-org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast=warning
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments=do not insert
-org.eclipse.jdt.core.formatter.blank_lines_between_import_groups=1
-org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries=true
-org.eclipse.jdt.core.compiler.problem.explicitlyClosedAutoCloseable=warning
-org.eclipse.jdt.core.compiler.problem.unusedWarningToken=warning
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional=insert
-org.eclipse.jdt.core.compiler.problem.unusedObjectAllocation=warning
-org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default=do not insert
-org.eclipse.jdt.core.compiler.problem.nullSpecViolation=error
-org.eclipse.jdt.core.compiler.problem.unusedParameter=ignore
-org.eclipse.jdt.core.compiler.annotation.inheritNullAnnotations=disabled
-org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod=warning
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration=insert
-org.eclipse.jdt.core.compiler.problem.unusedLocal=warning
-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.formatter.indent_statements_compare_to_block=true
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments=do not insert
-org.eclipse.jdt.core.compiler.problem.rawTypeReference=warning
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation=do not insert
-eclipse.preferences.version=1
-org.eclipse.jdt.core.formatter.enabling_tag=@formatter\:on
-org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference=do not insert
-org.eclipse.jdt.core.compiler.compliance=1.7
-org.eclipse.jdt.core.formatter.blank_lines_after_package=1
-org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration=16
-org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing=do not insert
-org.eclipse.jdt.core.formatter.blank_lines_before_field=0
+org.eclipse.jdt.core.formatter.use_on_off_tags=true
+org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations=false
+org.eclipse.jdt.core.formatter.wrap_before_binary_operator=false
+org.eclipse.jdt.core.formatter.wrap_before_or_operator_multicatch=true
+org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested=true
\ No newline at end of file
diff --git a/build.gradle b/build.gradle
index 1c3c5c2..51dc62a 100644
--- a/build.gradle
+++ b/build.gradle
@@ -18,6 +18,19 @@ dependencies {
 	compile 'org.slf4j:slf4j-simple:1.7.12'
 }
 
+// work around unnecessary timestamp in generated file which always causes dirty files in version control
+// https://issues.gradle.org/browse/GRADLE-2293
+task adjustEclipseSettingsFile << {
+   ant.replaceregexp(match:'^#.*', replace:'', flags:'g', byline:true) {
+      fileset(dir: project.projectDir, includes: '.settings/org.eclipse.jdt.core.prefs')
+   }
+}
+task sortEclipseSettingsFile << {
+   new File(project.projectDir, '.settings/org.eclipse.jdt.core.prefs').with { it.text = it.readLines().findAll { it }.sort().join('\n') }
+}
+eclipseJdt.finalizedBy adjustEclipseSettingsFile
+eclipseJdt.finalizedBy sortEclipseSettingsFile
+
 task wrapper(type: Wrapper) {
-	gradleVersion = '2.3'
+	gradleVersion = '2.4'
 }
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index c97a8bd..b5166da 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 6568c98..101f5ac 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon Mar 16 12:31:08 CET 2015
+#Mon May 11 12:45:46 CEST 2015
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.3-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.4-bin.zip

§§--§§
commit 1bf1b54ec4bb8dc033a6db743653261cc3685a1c e4879bc2faf00f796e81a1af20d87e7344633ce5
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon May 11 20:14:21 2015 +0200 
Message: Print out full message of stash
---§

diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java b/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
index 492e81b..afb1333 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
@@ -32,7 +32,7 @@ import org.eclipse.jgit.revwalk.RevCommit;
 
 /**
  * Simple snippet which shows how to use commands for stashing changes.
- * 
+ *
  * @author dominik.stadler at gmx.at
  */
 public class CreateListApplyAndDropStash {
@@ -47,7 +47,7 @@ public class CreateListApplyAndDropStash {
         FileUtils.writeStringToFile(file1, "some text");
         File file2 = new File(repository.getDirectory().getParent(), "testfile2");
         FileUtils.writeStringToFile(file2, "some text");
-        
+
         // add and commit the file
         git.add()
                 .addFilepattern("testfile")
@@ -61,7 +61,7 @@ public class CreateListApplyAndDropStash {
 
         // then modify the file
         FileUtils.writeStringToFile(file1, "some more text", true);
-        
+
         // push the changes to a new stash
         RevCommit stash = git.stashCreate()
                 .call();
@@ -70,7 +70,7 @@ public class CreateListApplyAndDropStash {
 
         // then modify the 2nd file
         FileUtils.writeStringToFile(file2, "some more text", true);
-        
+
         // push the changes to a new stash
         stash = git.stashCreate()
                 .call();
@@ -80,13 +80,13 @@ public class CreateListApplyAndDropStash {
         // list the stashes
         Collection<RevCommit> stashes = git.stashList().call();
         for(RevCommit rev : stashes) {
-            System.out.println("Found stash: " + rev);
+            System.out.println("Found stash: " + rev + ": " + rev.getFullMessage());
         }
-        
+
         // drop the 1st stash without applying it
         ObjectId call = git.stashDrop().setStashRef(0).call();
         System.out.println("StashDrop returned: " + call);
-        
+
         ObjectId applied = git.stashApply().setStashRef(stash.getName()).call();
         System.out.println("Applied 2nd stash as: " + applied);
 

§§--§§
commit fc27cf1bb938c2afc7c00d5178a52dc4fdc4564c 1bf1b54ec4bb8dc033a6db743653261cc3685a1c
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon May 25 08:54:46 2015 +0200 
Message: Update to jgit 3.7.1
---§

diff --git a/build.gradle b/build.gradle
index 51dc62a..3b904b7 100644
--- a/build.gradle
+++ b/build.gradle
@@ -12,8 +12,8 @@ repositories {
 }
 
 dependencies {
-	compile 'org.eclipse.jgit:org.eclipse.jgit:3.7.0.201502260915-r'
-	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.7.0.201502260915-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit:3.7.1.201504261725-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.7.1.201504261725-r'
 	compile 'commons-io:commons-io:2.4'
 	compile 'org.slf4j:slf4j-simple:1.7.12'
 }
diff --git a/pom.xml b/pom.xml
index 8092f37..00e2503 100644
--- a/pom.xml
+++ b/pom.xml
@@ -20,12 +20,12 @@
     <dependency>
       <groupId>org.eclipse.jgit</groupId>
       <artifactId>org.eclipse.jgit</artifactId>
-      <version>3.7.0.201502260915-r</version>
+      <version>3.7.1.201504261725-r</version>
     </dependency>
     <dependency>
       <groupId>org.eclipse.jgit</groupId>
       <artifactId>org.eclipse.jgit.archive</artifactId>
-      <version>3.7.0.201502260915-r</version>
+      <version>3.7.1.201504261725-r</version>
     </dependency>
 
 	<dependency>

§§--§§
commit 7380fcab6a482d92106f8129fd087857e9876f95 fc27cf1bb938c2afc7c00d5178a52dc4fdc4564c
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Thu Jun 25 13:31:50 2015 +0200 
Message: Fix link to JGit official pages and current JavaDoc
---§

diff --git a/README.md b/README.md
index 09a784d..1b01190 100644
--- a/README.md
+++ b/README.md
@@ -2,11 +2,11 @@ jgit-cookbook
 =============
 [![Build Status](https://buildhive.cloudbees.com/job/centic9/job/jgit-cookbook/badge/icon)](https://buildhive.cloudbees.com/job/centic9/job/jgit-cookbook/)
 
-Provides examples and code snippets for the [JGit](http://wiki.eclipse.org/JGit/) Java Git implementation. 
+Provides examples and code snippets for the [JGit](https://eclipse.org/jgit/) Java Git implementation. 
 
 The JGit framework is rich and diverse, it has two layers, a low-level _api_ and a higher-level set of _porcelain_ commands. This can be a bit intimidating at first as there are lots of classes, some of which are not relevant for most tasks.
 
-This project tries to provide a collection of ready-to-run snippets which try to provide a quick start into building functionality using JGit. Please make sure to also use the existing [JavaDoc](http://download.eclipse.org/jgit/docs/latest/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide) as well, as they are well done and provide detailed information and a general overview of JGit respectively.
+This project tries to provide a collection of ready-to-run snippets which try to provide a quick start into building functionality using JGit. Please make sure to also use the existing [JavaDoc](http://download.eclipse.org/jgit/site/3.7.1.201504261725-r/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide) as well, as they are well done and provide detailed information and a general overview of JGit respectively.
 
 *Note: Please use sites such as http://stackoverflow.com for general questions about JGit usage, not issues in this project. Issues should be used for problems with snippets and suggestions of missing snippets. Snippets from good answers on stackoverflow can then be included here, naturally.*
 
@@ -106,7 +106,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 
 The following sources were used to build the snippets
 
-* [JGit JavaDoc](http://download.eclipse.org/jgit/docs/latest/apidocs/)
+* [JGit JavaDoc](http://download.eclipse.org/jgit/site/3.7.1.201504261725-r/apidocs/)
 * [JGit User Guide](http://wiki.eclipse.org/JGit/User_Guide)
 * [JGit related questions on Stackoverflow](http://stackoverflow.com/questions/tagged/jgit)
 * [AlBlue's Blog: Embedding JGit](http://alblue.bandlem.com/2013/11/embedding-jgit.html)

§§--§§
commit eb0216916865c23f02e1cf77c6857fe6e067a902 7380fcab6a482d92106f8129fd087857e9876f95
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Thu Jun 25 13:32:15 2015 +0200 
Message: Update copyright/licensing
---§

diff --git a/README.md b/README.md
index 1b01190..5329442 100644
--- a/README.md
+++ b/README.md
@@ -118,7 +118,7 @@ Please note that the list of snippets is not yet complete, probably never will.
 
 #### Licensing
 
-   Copyright 2013, 2014 Dominik Stadler
+   Copyright 2013, 2014, 2015 Dominik Stadler
 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.

§§--§§
commit 7f71d0d00d237e903c60fb0774760e4fdf1f0058 eb0216916865c23f02e1cf77c6857fe6e067a902
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Wed Jul 8 22:36:29 2015 +0200 
Message: Update to JGit 4.0.1 and fix code that broke as a result, also fix sample for creating branches to always run fine
---§

diff --git a/build.gradle b/build.gradle
index 3b904b7..19e2587 100644
--- a/build.gradle
+++ b/build.gradle
@@ -12,8 +12,8 @@ repositories {
 }
 
 dependencies {
-	compile 'org.eclipse.jgit:org.eclipse.jgit:3.7.1.201504261725-r'
-	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.7.1.201504261725-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit:4.0.1.201506240215-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.0.1.201506240215-r'
 	compile 'commons-io:commons-io:2.4'
 	compile 'org.slf4j:slf4j-simple:1.7.12'
 }
diff --git a/pom.xml b/pom.xml
index 00e2503..cd290f5 100644
--- a/pom.xml
+++ b/pom.xml
@@ -20,12 +20,12 @@
     <dependency>
       <groupId>org.eclipse.jgit</groupId>
       <artifactId>org.eclipse.jgit</artifactId>
-      <version>3.7.1.201504261725-r</version>
+      <version>4.0.1.201506240215-r</version>
     </dependency>
     <dependency>
       <groupId>org.eclipse.jgit</groupId>
       <artifactId>org.eclipse.jgit.archive</artifactId>
-      <version>3.7.1.201504261725-r</version>
+      <version>4.0.1.201506240215-r</version>
     </dependency>
 
 	<dependency>
diff --git a/src/main/java/org/dstadler/jgit/CreateNewRepository.java b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
index d930761..6990256 100644
--- a/src/main/java/org/dstadler/jgit/CreateNewRepository.java
+++ b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
@@ -36,11 +36,9 @@ public class CreateNewRepository {
         localPath.delete();
 
         // create the directory
-        Git git = Git.init().setDirectory(localPath).call();
-
-        System.out.println("Having repository: " + git.getRepository().getDirectory());
-
-        git.close();
+        try (Git git = Git.init().setDirectory(localPath).call()) {
+            System.out.println("Having repository: " + git.getRepository().getDirectory());
+        }
 
         FileUtils.deleteDirectory(localPath);
     }
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
index c5e959b..d43cde5 100644
--- a/src/main/java/org/dstadler/jgit/api/WalkRev.java
+++ b/src/main/java/org/dstadler/jgit/api/WalkRev.java
@@ -32,27 +32,25 @@ import org.eclipse.jgit.revwalk.RevWalk;
 public class WalkRev {
 
     public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Ref head = repository.getRef("refs/heads/master");
-
-        // a RevWalk allows to walk over commits based on some filtering that is defined
-        RevWalk walk = new RevWalk(repository);
-
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        System.out.println("Start-Commit: " + commit);
-
-        System.out.println("Walking all commits starting at HEAD");
-        walk.markStart(commit);
-        int count = 0;
-        for (RevCommit rev : walk) {
-            System.out.println("Commit: " + rev);
-            count++;
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            Ref head = repository.getRef("refs/heads/master");
+    
+            // a RevWalk allows to walk over commits based on some filtering that is defined
+            try (RevWalk walk = new RevWalk(repository)) {
+                RevCommit commit = walk.parseCommit(head.getObjectId());
+                System.out.println("Start-Commit: " + commit);
+        
+                System.out.println("Walking all commits starting at HEAD");
+                walk.markStart(commit);
+                int count = 0;
+                for (RevCommit rev : walk) {
+                    System.out.println("Commit: " + rev);
+                    count++;
+                }
+                System.out.println(count);
+        
+                walk.dispose();
+            }
         }
-        System.out.println(count);
-
-        walk.dispose();
-
-        repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
index a877932..dd0a132 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
@@ -44,6 +44,21 @@ public class CreateAndDeleteBranch {
             System.out.println("Branch-Before: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
         }
 
+        // make sure the branch is not there
+        List<Ref> refs = git.branchList().call();
+        for(Ref ref : refs) {
+            System.out.println("Had branch: " + ref.getName());
+            if(ref.getName().equals("refs/heads/testbranch")) {
+                System.out.println("Removing branch before");
+                git.branchDelete()
+                .setBranchNames("testbranch")
+                .setForce(true)
+                .call();
+                
+                break;
+            }
+        }
+        
         // run the add-call
         git.branchCreate()
                 .setName("testbranch")
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
index c268287..e51f824 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
@@ -21,6 +21,7 @@ import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.util.Collections;
+import java.util.Map;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipOutputStream;
 
@@ -68,31 +69,33 @@ public class CreateCustomFormatArchive {
         public Iterable<String> suffixes() {
             return Collections.singleton(".mzip");
         }
+
+        @Override
+        public ZipOutputStream createArchiveOutputStream(OutputStream s, Map<String, Object> o) throws IOException {
+            return new ZipOutputStream(s);
+        }
     }
 
     public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-
-        File file = File.createTempFile("test", ".mzip");
-        // make the archive format known
-        ArchiveCommand.registerFormat("myzip", new ZipArchiveFormat());
-        try {
-            // this is the file that we write the archive to
-            try (OutputStream out = new FileOutputStream(file)) {
-                // finally call the ArchiveCommand to write out using the given format
-                new Git(repository).archive()
-                        .setTree(repository.resolve("master"))
-                        .setFormat("myzip")
-                        .setOutputStream(out)
-                        .call();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            File file = File.createTempFile("test", ".mzip");
+            // make the archive format known
+            ArchiveCommand.registerFormat("myzip", new ZipArchiveFormat());
+            try {
+                // this is the file that we write the archive to
+                try (OutputStream out = new FileOutputStream(file)) {
+                    // finally call the ArchiveCommand to write out using the given format
+                    new Git(repository).archive()
+                            .setTree(repository.resolve("master"))
+                            .setFormat("myzip")
+                            .setOutputStream(out)
+                            .call();
+                }
+            } finally {
+                ArchiveCommand.unregisterFormat("myzip");
             }
-        } finally {
-            ArchiveCommand.unregisterFormat("myzip");
+    
+            System.out.println("Wrote " + file.length() + " bytes to " + file);
         }
-
-        System.out.println("Wrote " + file.length() + " bytes to " + file);
-
-        repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java b/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java
index 4dddf63..1e64de1 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java
@@ -34,11 +34,8 @@ public class DiffRenamedFile {
 		RevTree tree = walk.parseTree(commit.getTree().getId());
 
 		CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
-		ObjectReader oldReader = repository.newObjectReader();
-		try {
+		try (ObjectReader oldReader = repository.newObjectReader()) {
 			oldTreeParser.reset(oldReader, tree.getId());
-		} finally {
-			oldReader.release();
 		}
 
 		walk.dispose();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
index 4ba96cf..61df9c5 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
@@ -69,11 +69,8 @@ public class ShowBranchDiff {
         RevTree tree = walk.parseTree(commit.getTree().getId());
 
         CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
-        ObjectReader oldReader = repository.newObjectReader();
-        try {
+        try (ObjectReader oldReader = repository.newObjectReader()) {
             oldTreeParser.reset(oldReader, tree.getId());
-        } finally {
-            oldReader.release();
         }
 
         walk.dispose();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
index 6d520e7..400ccf6 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
@@ -77,11 +77,8 @@ public class ShowFileDiff {
         RevTree tree = walk.parseTree(commit.getTree().getId());
 
         CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
-        ObjectReader oldReader = repository.newObjectReader();
-        try {
+        try (ObjectReader oldReader = repository.newObjectReader()) {
             oldTreeParser.reset(oldReader, tree.getId());
-        } finally {
-            oldReader.release();
         }
         
         walk.dispose();

§§--§§
commit a6586bfdd433c5470dcc489503a7829e9d0aa0ce 7f71d0d00d237e903c60fb0774760e4fdf1f0058
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Thu Jul 23 12:30:14 2015 +0200 
Message: Add snippet for cloning from an SSH source with username/password
---§

diff --git a/README.md b/README.md
index 5329442..404a518 100644
--- a/README.md
+++ b/README.md
@@ -69,6 +69,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [Iterate remote references in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java)
 * [List remote heads/tags without a local clone](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java)
 * [Fetch from remote repositories](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommits.java)
+* [Clone a remote reppository via SSH protocol and username/password credentials](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java)
 
 ##### Low-level API
 
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java
new file mode 100755
index 0000000..b07b622
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java
@@ -0,0 +1,89 @@
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2015 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.errors.UnsupportedCredentialItem;
+import org.eclipse.jgit.transport.CredentialItem;
+import org.eclipse.jgit.transport.CredentialsProvider;
+import org.eclipse.jgit.transport.URIish;
+
+
+
+/**
+ * Simple snippet which shows how to clone a repository from a remote source
+ * via ssh protocol and username/password authentication.
+ *
+ * @author dominik.stadler at gmx.at
+ */
+public class CloneRemoteRepositoryWithAuthentication {
+    private static final String REMOTE_URL = "ssh://<user>:<pwd>@<host>:22/<path-to-remote-repo>/";
+
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        // this is necessary when the remote host does not have a valid certificate, ideally we would install the certificate in the JVM
+        // instead of this unsecure workaround!
+        CredentialsProvider allowHosts = new CredentialsProvider() {
+
+            @Override
+            public boolean supports(CredentialItem... items) {
+                for(CredentialItem item : items) {
+                    if((item instanceof CredentialItem.YesNoType)) {
+                        return true;
+                    }
+                }
+                return false;
+            }
+
+            @Override
+            public boolean get(URIish uri, CredentialItem... items) throws UnsupportedCredentialItem {
+                for(CredentialItem item : items) {
+                    if(item instanceof CredentialItem.YesNoType) {
+                        ((CredentialItem.YesNoType)item).setValue(true);
+                        return true;
+                    }
+                }
+                return false;
+            }
+
+            @Override
+            public boolean isInteractive() {
+                return false;
+            }
+        };
+
+        // prepare a new folder for the cloned repository
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // then clone
+        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+        try (Git result = Git.cloneRepository()
+                .setURI(REMOTE_URL)
+                .setDirectory(localPath)
+                .setCredentialsProvider(allowHosts)
+                .call()) {
+	        // Note: the call() returns an opened repository already which needs to be closed to avoid file handle leaks!
+	        System.out.println("Having repository: " + result.getRepository().getDirectory());
+        }
+    }
+}

§§--§§
commit d25358cde70cdaa511c0fa6674c3164a0f590b4e 7f71d0d00d237e903c60fb0774760e4fdf1f0058
Author: Brad Wood <brad@bradwood.com>
Date: Sat Aug 1 22:56:46 2015 -0500 
Message: Fix for file system locks
---§

diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
index 89e5aac..d1ce016 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
@@ -51,6 +51,7 @@ public class CloneRemoteRepository {
 	        // Note: the call() returns an opened repository already which needs to be closed to avoid file handle leaks!
 	        System.out.println("Having repository: " + result.getRepository().getDirectory());
         } finally {
+        	result.getRepository().close();
         	result.close();
         }
     }

§§--§§
commit 766869389980f912ec17d27884fc79325260eb97 a6586bfdd433c5470dcc489503a7829e9d0aa0ce d25358cde70cdaa511c0fa6674c3164a0f590b4e
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Sun Aug 2 10:28:28 2015 +0200 
Message: Merge pull request #12 from bdw429s/bdw429s-patch-1
---§

§§--§§
commit 2c11ab452269e5c27290548cdf403df53fea2620 766869389980f912ec17d27884fc79325260eb97
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon Aug 10 07:36:04 2015 +0200 
Message: Update to Gradle 2.5
---§

diff --git a/build.gradle b/build.gradle
index 19e2587..8c53bb7 100644
--- a/build.gradle
+++ b/build.gradle
@@ -32,5 +32,5 @@ eclipseJdt.finalizedBy adjustEclipseSettingsFile
 eclipseJdt.finalizedBy sortEclipseSettingsFile
 
 task wrapper(type: Wrapper) {
-	gradleVersion = '2.4'
+	gradleVersion = '2.5'
 }

§§--§§
commit b51658199fb6921e8d359af0e7fa06c50049c3c4 2c11ab452269e5c27290548cdf403df53fea2620
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon Aug 10 07:49:22 2015 +0200 
Message: Update to Gradle 2.5
---§

diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 101f5ac..3f70722 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon May 11 12:45:46 CEST 2015
-distributionBase=GRADLE_USER_HOME
-distributionPath=wrapper/dists
-zipStoreBase=GRADLE_USER_HOME
-zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.4-bin.zip
+#Mon Aug 10 07:49:07 CEST 2015
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.5-bin.zip

§§--§§
commit 4390251e7cd02ca1a9b4c4b912951c2779791de1 b51658199fb6921e8d359af0e7fa06c50049c3c4
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon Aug 17 13:29:43 2015 +0200 
Message: Add workaround to close all file handles until the fix for Eclipse Bug 474093 is released
---§

diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
index d1ce016..33d1bb4 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
@@ -42,17 +42,15 @@ public class CloneRemoteRepository {
 
         // then clone
         System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
-        Git result = Git.cloneRepository()
+        try (Git result = Git.cloneRepository()
                 .setURI(REMOTE_URL)
                 .setDirectory(localPath)
-                .call();
-
-        try {
+                .call()) {
 	        // Note: the call() returns an opened repository already which needs to be closed to avoid file handle leaks!
 	        System.out.println("Having repository: " + result.getRepository().getDirectory());
-        } finally {
-        	result.getRepository().close();
-        	result.close();
+
+            // workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=474093
+	        result.getRepository().close();
         }
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java
index b07b622..7966242 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java
@@ -84,6 +84,9 @@ public class CloneRemoteRepositoryWithAuthentication {
                 .call()) {
 	        // Note: the call() returns an opened repository already which needs to be closed to avoid file handle leaks!
 	        System.out.println("Having repository: " + result.getRepository().getDirectory());
+
+            // workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=474093
+            result.getRepository().close();
         }
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
index 2f2f187..0d15f20 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
@@ -42,21 +42,21 @@ public class PullFromRemoteRepository {
 
         // then clone
         System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
-        Git result = Git.cloneRepository()
+        try (Git result = Git.cloneRepository()
                 .setURI(REMOTE_URL)
                 .setDirectory(localPath)
-                .call();
-
-        try {
+                .call()) {
 	        // Note: the call() returns an opened repository already which needs to be closed to avoid file handle leaks!
 	        System.out.println("Having repository: " + result.getRepository().getDirectory());
-	        Git git = new Git(result.getRepository());
-	        git.pull()
-	        .call();
+	        try (Git git = new Git(result.getRepository())) {
+                git.pull()
+                .call();
+	        }
 
 	        System.out.println("Pulled from remote repository to local repository at " + result.getRepository().getDirectory());
-        } finally {
-        	result.close();
+
+            // workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=474093
+            result.getRepository().close();
         }
     }
 }

§§--§§
commit aadec18ad448b9bc3357ec5e9327a39da992c2f7 4390251e7cd02ca1a9b4c4b912951c2779791de1
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Sun Sep 20 15:15:47 2015 +0200 
Message: Update to Gradle 2.7 Avoid duplicate lines in .classpath
---§

diff --git a/build.gradle b/build.gradle
index 8c53bb7..5b274fb 100644
--- a/build.gradle
+++ b/build.gradle
@@ -27,10 +27,11 @@ task adjustEclipseSettingsFile << {
 }
 task sortEclipseSettingsFile << {
    new File(project.projectDir, '.settings/org.eclipse.jdt.core.prefs').with { it.text = it.readLines().findAll { it }.sort().join('\n') }
+   new File(project.projectDir, '.classpath').with { it.text = it.readLines().findAll { it }.unique().join('\n') }
 }
 eclipseJdt.finalizedBy adjustEclipseSettingsFile
 eclipseJdt.finalizedBy sortEclipseSettingsFile
 
 task wrapper(type: Wrapper) {
-	gradleVersion = '2.5'
+	gradleVersion = '2.7'
 }
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index b5166da..e8c6bf7 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 3f70722..8126aa4 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon Aug 10 07:49:07 CEST 2015
+#Sun Sep 20 14:44:43 CEST 2015
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.5-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.7-bin.zip
diff --git a/gradlew b/gradlew
index 91a7e26..97fac78 100755
--- a/gradlew
+++ b/gradlew
@@ -42,11 +42,6 @@ case "`uname`" in
     ;;
 esac
 
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
 # Attempt to set APP_HOME
 # Resolve links: $0 may be a link
 PRG="$0"
@@ -114,6 +109,7 @@ fi
 if $cygwin ; then
     APP_HOME=`cygpath --path --mixed "$APP_HOME"`
     CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
 
     # We build the pattern for arguments to be converted via cygpath
     ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`

§§--§§
commit d32a7246123bc848b8801076f9c742a54c16cef9 aadec18ad448b9bc3357ec5e9327a39da992c2f7
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Tue Sep 29 09:10:29 2015 +0200 
Message: Update JGit to 4.0.2
---§

diff --git a/build.gradle b/build.gradle
index 5b274fb..f4dbb73 100644
--- a/build.gradle
+++ b/build.gradle
@@ -12,8 +12,8 @@ repositories {
 }
 
 dependencies {
-	compile 'org.eclipse.jgit:org.eclipse.jgit:4.0.1.201506240215-r'
-	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.0.1.201506240215-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit:4.0.2.201509141540-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.0.2.201509141540-r'
 	compile 'commons-io:commons-io:2.4'
 	compile 'org.slf4j:slf4j-simple:1.7.12'
 }

§§--§§
commit c9dbf35527101c8d0a3b43c57dc4ae2a892f6905 d32a7246123bc848b8801076f9c742a54c16cef9
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Mon Oct 5 13:31:07 2015 +0200 
Message: Update to JGit 4.1.0
---§

diff --git a/build.gradle b/build.gradle
index f4dbb73..a221537 100644
--- a/build.gradle
+++ b/build.gradle
@@ -12,8 +12,8 @@ repositories {
 }
 
 dependencies {
-	compile 'org.eclipse.jgit:org.eclipse.jgit:4.0.2.201509141540-r'
-	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.0.2.201509141540-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit:4.1.0.201509280440-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.1.0.201509280440-r'
 	compile 'commons-io:commons-io:2.4'
 	compile 'org.slf4j:slf4j-simple:1.7.12'
 }
diff --git a/pom.xml b/pom.xml
index cd290f5..40ea43a 100644
--- a/pom.xml
+++ b/pom.xml
@@ -20,12 +20,12 @@
     <dependency>
       <groupId>org.eclipse.jgit</groupId>
       <artifactId>org.eclipse.jgit</artifactId>
-      <version>4.0.1.201506240215-r</version>
+      <version>4.1.0.201509280440-r</version>
     </dependency>
     <dependency>
       <groupId>org.eclipse.jgit</groupId>
       <artifactId>org.eclipse.jgit.archive</artifactId>
-      <version>4.0.1.201506240215-r</version>
+      <version>4.1.0.201509280440-r</version>
     </dependency>
 
 	<dependency>

§§--§§
commit a87569a9377986e633f1b362d2d328cb55805718 c9dbf35527101c8d0a3b43c57dc4ae2a892f6905
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Wed Oct 7 12:56:42 2015 +0200 
Message: Remove useles line in README
---§

diff --git a/README.md b/README.md
index 404a518..75da612 100644
--- a/README.md
+++ b/README.md
@@ -132,4 +132,3 @@ Please note that the list of snippets is not yet complete, probably never will.
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-some more text

§§--§§
commit d9b0ae0e1608f7c62e703b99bd912ea1487aada1 a87569a9377986e633f1b362d2d328cb55805718
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Wed Oct 7 13:03:45 2015 +0200 
Message: linkify license
---§

diff --git a/README.md b/README.md
index 75da612..a56ee15 100644
--- a/README.md
+++ b/README.md
@@ -123,9 +123,7 @@ Please note that the list of snippets is not yet complete, probably never will.
 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
+   You may obtain a copy of the License at [http://www.apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,

§§--§§
commit b0ad2e4e4ab901f0b391c1427a604b4eab8cbe22 d9b0ae0e1608f7c62e703b99bd912ea1487aada1
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Fri Oct 9 12:44:00 2015 +0200 
Message: Start adding some tests which for now simply execute the snippets. This allows to check for missing file handles et.al.
---§

diff --git a/build.gradle b/build.gradle
index a221537..081f52a 100644
--- a/build.gradle
+++ b/build.gradle
@@ -16,6 +16,8 @@ dependencies {
 	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.1.0.201509280440-r'
 	compile 'commons-io:commons-io:2.4'
 	compile 'org.slf4j:slf4j-simple:1.7.12'
+
+    testCompile "junit:junit:4+"
 }
 
 // work around unnecessary timestamp in generated file which always causes dirty files in version control
diff --git a/src/test/java/org/dstadler/jgit/api/ApiTest.java b/src/test/java/org/dstadler/jgit/api/ApiTest.java
new file mode 100644
index 0000000..660102c
--- /dev/null
+++ b/src/test/java/org/dstadler/jgit/api/ApiTest.java
@@ -0,0 +1,23 @@
+package org.dstadler.jgit.api;
+
+import org.junit.Test;
+
+
+public class ApiTest {
+    @Test
+    public void runSamples() throws Exception {
+        // simply call all the samples to see any severe problems with the samples
+        CheckMergeStatusOfCommit.main(null);
+        GetCommitMessage.main(null);
+        GetFileAttributes.main(null);
+        GetRefFromName.main(null);
+        GetRevCommitFromObjectId.main(null);
+        GetRevTreeFromObjectId.main(null);
+        PrintRemotes.main(null);
+        ReadBlobContents.main(null);
+        ReadUserConfig.main(null);
+        ResolveRef.main(null);
+        ShowBranchTrackingStatus.main(null);
+        WalkRev.main(null);
+    }
+}

§§--§§
commit cf00333b00c4e835b0d17a5b96b093a41429c983 b0ad2e4e4ab901f0b391c1427a604b4eab8cbe22
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Fri Oct 9 12:44:00 2015 +0200 
Message: Update Eclipse settings
---§

diff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
index 8867e29..92849b0 100644
--- a/.settings/org.eclipse.jdt.core.prefs
+++ b/.settings/org.eclipse.jdt.core.prefs
@@ -85,6 +85,7 @@ org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException=warning
 org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionExemptExceptionAndThrowable=enabled
 org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionIncludeDocCommentReference=enabled
 org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionWhenOverriding=disabled
+org.eclipse.jdt.core.compiler.problem.unusedExceptionParameter=ignore
 org.eclipse.jdt.core.compiler.problem.unusedImport=warning
 org.eclipse.jdt.core.compiler.problem.unusedLabel=warning
 org.eclipse.jdt.core.compiler.problem.unusedLocal=warning
diff --git a/.settings/org.moreunit.prefs b/.settings/org.moreunit.prefs
new file mode 100644
index 0000000..206cf3d
--- /dev/null
+++ b/.settings/org.moreunit.prefs
@@ -0,0 +1,4 @@
+eclipse.preferences.version=1
+org.moreunit.preferences.version=2
+org.moreunit.unitsourcefolder=jgit-cookbook\:src/main/java\:jgit-cookbook\:src/test/java
+org.moreunit.useprojectsettings=true

§§--§§
commit 98d1eaa267bc78d2c603ce58ef298b7b986df907 cf00333b00c4e835b0d17a5b96b093a41429c983
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Fri Oct 9 12:44:00 2015 +0200 
Message: Add missing closing of Repository
---§

diff --git a/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java b/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java
index 1e64de1..8b7d1f0 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java
@@ -29,18 +29,19 @@ public class DiffRenamedFile {
 			MissingObjectException,
 			IncorrectObjectTypeException {
 		// from the commit we can build the tree which allows us to construct the TreeParser
-		RevWalk walk = new RevWalk(repository);
-		RevCommit commit = walk.parseCommit(ObjectId.fromString(objectId));
-		RevTree tree = walk.parseTree(commit.getTree().getId());
+		try (RevWalk walk = new RevWalk(repository)) {
+    		RevCommit commit = walk.parseCommit(ObjectId.fromString(objectId));
+    		RevTree tree = walk.parseTree(commit.getTree().getId());
 
-		CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
-		try (ObjectReader oldReader = repository.newObjectReader()) {
-			oldTreeParser.reset(oldReader, tree.getId());
-		}
+    		CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
+    		try (ObjectReader oldReader = repository.newObjectReader()) {
+    			oldTreeParser.reset(oldReader, tree.getId());
+    		}
 
-		walk.dispose();
+    		walk.dispose();
 
-		return oldTreeParser;
+    		return oldTreeParser;
+		}
 	}
 
 	private static DiffEntry diffFile(Repository repo, String oldCommit,
@@ -48,33 +49,36 @@ public class DiffRenamedFile {
 		Config config = new Config();
 		config.setBoolean("diff", null, "renames", true);
 		DiffConfig diffConfig = config.get(DiffConfig.KEY);
-		List<DiffEntry> diffList = new Git(repo).diff().
-			setOldTree(prepareTreeParser(repo, oldCommit)).
-			setNewTree(prepareTreeParser(repo, newCommit)).
-			setPathFilter(FollowFilter.create(path, diffConfig)).
-			call();
-		if (diffList.size() == 0)
-			return null;
-		if (diffList.size() > 1)
-			throw new RuntimeException("invalid diff");
-		return diffList.get(0);
+		try (Git git = new Git(repo)) {
+            List<DiffEntry> diffList = git.diff().
+    			setOldTree(prepareTreeParser(repo, oldCommit)).
+    			setNewTree(prepareTreeParser(repo, newCommit)).
+    			setPathFilter(FollowFilter.create(path, diffConfig)).
+    			call();
+    		if (diffList.size() == 0)
+    			return null;
+    		if (diffList.size() > 1)
+    			throw new RuntimeException("invalid diff");
+    		return diffList.get(0);
+		}
 	}
 
 	public static void main(String args[])
 		throws IOException, GitAPIException {
-		Repository repo = CookbookHelper.openJGitCookbookRepository();
+		try (Repository repo = CookbookHelper.openJGitCookbookRepository()) {
+    		// Diff README.md between two commits. The file is named README.md in
+    		// the new commit (5a10bd6e), but was named "jgit-cookbook README.md" in
+    		// the old commit (2e1d65e4).
+    		DiffEntry diff = diffFile(repo,
+    			"2e1d65e4cf6c5e267e109aa20fd68ae119fa5ec9",
+    			"5a10bd6ee431e362facb03cfe763b9a3d9dfd02d",
+    			"README.md");
 
-		// Diff README.md between two commits. The file is named README.md in
-		// the new commit (5a10bd6e), but was named "jgit-cookbook README.md" in
-		// the old commit (2e1d65e4).
-		DiffEntry diff = diffFile(repo,
-			"2e1d65e4cf6c5e267e109aa20fd68ae119fa5ec9",
-			"5a10bd6ee431e362facb03cfe763b9a3d9dfd02d",
-			"README.md");
-
-		// Display the diff.
-		DiffFormatter formatter = new DiffFormatter(System.out);
-		formatter.setRepository(repo);
-		formatter.format(diff);
+    		// Display the diff.
+    		try (DiffFormatter formatter = new DiffFormatter(System.out)) {
+        		formatter.setRepository(repo);
+        		formatter.format(diff);
+    		}
+		}
 	}
 }

§§--§§
commit 360ee9b676611cb24d41692d2ae8461abcd7ae19 98d1eaa267bc78d2c603ce58ef298b7b986df907
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Fri Oct 9 12:44:01 2015 +0200 
Message: Ensure that the remote testbranch is mapped to a local branch
---§

diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
index 61df9c5..9e2511d 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
@@ -38,25 +38,32 @@ import org.eclipse.jgit.treewalk.CanonicalTreeParser;
 
 /**
  * Simple snippet which shows how to show diffs between branches
- * 
+ *
  * @author dominik.stadler at gmx.at
  */
 public class ShowBranchDiff {
 
     public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // the diff works on TreeIterators, we prepare two for the two branches
-        AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "refs/heads/testbranch");
-        AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "refs/heads/master");
-
-        // then the procelain diff-command returns a list of diff entries
-        List<DiffEntry> diff = new Git(repository).diff().setOldTree(oldTreeParser).setNewTree(newTreeParser).call();
-        for (DiffEntry entry : diff) {
-            System.out.println("Entry: " + entry);
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (Git git = new Git(repository)) {
+                if(repository.getRef("refs/heads/testbranch") == null) {
+                    // first we need to ensure that the remote branch is visible locally
+                    Ref ref = git.branchCreate().setName("testbranch").setStartPoint("origin/testbranch").call();
+
+                    System.out.println("Created local testbranch with ref: " + ref);
+                }
+
+                // the diff works on TreeIterators, we prepare two for the two branches
+                AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "refs/heads/testbranch");
+                AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "refs/heads/master");
+
+                // then the procelain diff-command returns a list of diff entries
+                List<DiffEntry> diff = git.diff().setOldTree(oldTreeParser).setNewTree(newTreeParser).call();
+                for (DiffEntry entry : diff) {
+                    System.out.println("Entry: " + entry);
+                }
+            }
         }
-
-        repository.close();
     }
 
     private static AbstractTreeIterator prepareTreeParser(Repository repository, String ref) throws IOException,
@@ -64,17 +71,18 @@ public class ShowBranchDiff {
             IncorrectObjectTypeException {
         // from the commit we can build the tree which allows us to construct the TreeParser
         Ref head = repository.getRef(ref);
-        RevWalk walk = new RevWalk(repository);
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        RevTree tree = walk.parseTree(commit.getTree().getId());
+        try (RevWalk walk = new RevWalk(repository)) {
+            RevCommit commit = walk.parseCommit(head.getObjectId());
+            RevTree tree = walk.parseTree(commit.getTree().getId());
 
-        CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
-        try (ObjectReader oldReader = repository.newObjectReader()) {
-            oldTreeParser.reset(oldReader, tree.getId());
-        }
+            CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
+            try (ObjectReader oldReader = repository.newObjectReader()) {
+                oldTreeParser.reset(oldReader, tree.getId());
+            }
 
-        walk.dispose();
+            walk.dispose();
 
-        return oldTreeParser;
+            return oldTreeParser;
+        }
     }
 }

§§--§§
commit f0d1bf162930d050b77b814ffdd7e211833ab5e1 360ee9b676611cb24d41692d2ae8461abcd7ae19
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Fri Oct 9 12:44:01 2015 +0200 
Message: Add more simple tests and a try at writing a reproducer for bugs reported upstream to Eclipse JGit
---§

diff --git a/src/test/java/org/dstadler/jgit/JGitBugTest.java b/src/test/java/org/dstadler/jgit/JGitBugTest.java
new file mode 100644
index 0000000..c1c32a1
--- /dev/null
+++ b/src/test/java/org/dstadler/jgit/JGitBugTest.java
@@ -0,0 +1,35 @@
+package org.dstadler.jgit;
+
+import static org.junit.Assert.assertNotNull;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.ObjectReader;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.junit.Test;
+
+/**
+ * Tests which show issues with JGit that we reported upstream.
+ */
+public class JGitBugTest {
+    @Test
+    public void testRevWalkDisposeClosesReader() throws IOException {
+        try (Repository repo = CookbookHelper.openJGitCookbookRepository()) {
+            try (ObjectReader reader = repo.newObjectReader()) {
+                try (RevWalk walk = new RevWalk(reader)) {
+                    walk.dispose();
+
+                    Ref head = repo.getRef("refs/heads/master");
+                    System.out.println("Found head: " + head);
+
+                    ObjectLoader loader = reader.open(head.getObjectId());
+                    assertNotNull(loader);
+                }
+            }
+        }
+    }
+}
diff --git a/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java b/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
new file mode 100644
index 0000000..609d21f
--- /dev/null
+++ b/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
@@ -0,0 +1,39 @@
+package org.dstadler.jgit.porcelain;
+
+import org.junit.Test;
+
+
+public class PorcelainTest {
+    @Test
+    public void runSamples() throws Exception {
+        // simply call all the samples to see any severe problems with the samples
+        AddAndListNoteOfCommit.main(null);
+        AddFile.main(null);
+        CleanUntrackedFiles.main(null);
+        CloneRemoteRepository.main(null);
+        // does not run without changes: CloneRemoteRepositoryWithAuthentication.main(null);
+        // TODO: sometimes fails because there are still files open?!: CollectGarbage.main(null);
+        CommitAll.main(null);
+        CommitFile.main(null);
+        CreateAndDeleteBranch.main(null);
+        CreateAndDeleteTag.main(null);
+        CreateArchive.main(null);
+        CreateCustomFormatArchive.main(null);
+        CreateListApplyAndDropStash.main(null);
+        DiffRenamedFile.main(null);
+        FetchRemoteCommits.main(null);
+        InitRepository.main(null);
+        ListBranches.main(null);
+        ListNotes.main(null);
+        ListRemoteRepository.main(null);
+        ListRemotes.main(null);
+        ListTags.main(null);
+        ShowBlame.main(null);
+        ShowBranchDiff.main(null);
+        ShowChangedFilesBetweenCommits.main(null);
+        ShowFileDiff.main(null);
+        ShowLog.main(null);
+        ShowStatus.main(null);
+        WalkAllCommits.main(null);
+    }
+}

§§--§§
commit a51ba8b290f2acb81edb665dc33d75f582791026 f0d1bf162930d050b77b814ffdd7e211833ab5e1
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Fri Oct 9 12:44:01 2015 +0200 
Message: Start adjusting snippets to use try-with-resources to close resources correctly in all cases
---§

diff --git a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
index dad0ebf..dee9ae7 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
@@ -31,28 +31,26 @@ import org.eclipse.jgit.revwalk.RevWalk;
 public class ReadTagFromName {
 
     public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // a RevWalk allows to retrieve information from the repository
-        RevWalk walk = new RevWalk(repository);
-
-        // a simple tag that is not annotated
-        Ref simpleTag = repository.getRef("initialtag");
-        RevObject any = walk.parseAny(simpleTag.getObjectId());
-        System.out.println("Commit: " + any);
-
-        // an annotated tag
-        Ref annotatedTag = repository.getRef("secondtag");
-        any = walk.parseAny(annotatedTag.getObjectId());
-        System.out.println("Tag: " + any);
-
-        // finally try to print out the tag-content
-        System.out.println("\nTag-Content: \n");
-        ObjectLoader loader = repository.open(annotatedTag.getObjectId());
-        loader.copyTo(System.out);
-
-        walk.dispose();
-
-        repository.close();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // a RevWalk allows to retrieve information from the repository
+            try (RevWalk walk = new RevWalk(repository)) {
+                // a simple tag that is not annotated
+                Ref simpleTag = repository.getRef("initialtag");
+                RevObject any = walk.parseAny(simpleTag.getObjectId());
+                System.out.println("Commit: " + any);
+
+                // an annotated tag
+                Ref annotatedTag = repository.getRef("secondtag");
+                any = walk.parseAny(annotatedTag.getObjectId());
+                System.out.println("Tag: " + any);
+
+                // finally try to print out the tag-content
+                System.out.println("\nTag-Content: \n");
+                ObjectLoader loader = repository.open(annotatedTag.getObjectId());
+                loader.copyTo(System.out);
+
+                walk.dispose();
+            }
+        }
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java b/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
index 618d57b..67a0bea 100755
--- a/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
@@ -28,22 +28,20 @@ import org.eclipse.jgit.lib.Repository;
 public class ReadUserConfig {
 
     public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Config config = repository.getConfig();
-        String name = config.getString("user", null, "name");
-        String email = config.getString("user", null, "email");
-        if (name == null || email == null) {
-            System.out.println("User identity is unknown!");
-        } else {
-            System.out.println("User identity is " + name + " <" + email + ">");
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            Config config = repository.getConfig();
+            String name = config.getString("user", null, "name");
+            String email = config.getString("user", null, "email");
+            if (name == null || email == null) {
+                System.out.println("User identity is unknown!");
+            } else {
+                System.out.println("User identity is " + name + " <" + email + ">");
+            }
+
+            String url = config.getString("remote", "origin", "url");
+            if (url != null) {
+                    System.out.println("Origin comes from " + url);
+            }
         }
-        
-        String url = config.getString("remote", "origin", "url");
-        if (url != null) {
-                System.out.println("Origin comes from " + url);
-        }
-        
-        repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/ResolveRef.java b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
index 40648fd..ea80776 100644
--- a/src/main/java/org/dstadler/jgit/api/ResolveRef.java
+++ b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
@@ -30,22 +30,20 @@ import org.eclipse.jgit.lib.Repository;
 public class ResolveRef {
 
     public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // basic syntax is similar to getRef()
+            ObjectId id = repository.resolve("HEAD");
+            System.out.println("ObjectId of HEAD: " + id);
 
-        // basic syntax is similar to getRef()
-        ObjectId id = repository.resolve("HEAD");
-        System.out.println("ObjectId of HEAD: " + id);
+            // however resolve() supports almost all of the git-syntax, where getRef() only works on names
+            id = repository.resolve("HEAD^1");
+            System.out.println("ObjectId of HEAD: " + id);
 
-        // however resolve() supports almost all of the git-syntax, where getRef() only works on names
-        id = repository.resolve("HEAD^1");
-        System.out.println("ObjectId of HEAD: " + id);
+            id = repository.resolve("b419522521af553ae2752fd1b609f2aa11062243");
+            System.out.println("ObjectId of specific commit: " + id);
 
-        id = repository.resolve("b419522521af553ae2752fd1b609f2aa11062243");
-        System.out.println("ObjectId of specific commit: " + id);
-        
-        id = repository.resolve("05d18a76875716fbdbd2c200091b40caa06c713d");
-        System.out.println("ObjectId of merged commit: " + id);
-
-        repository.close();
+            id = repository.resolve("05d18a76875716fbdbd2c200091b40caa06c713d");
+            System.out.println("ObjectId of merged commit: " + id);
+        }
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java b/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java
index 90f0920..b428cd6 100644
--- a/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java
+++ b/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java
@@ -37,18 +37,18 @@ import org.eclipse.jgit.lib.Repository;
 public class ShowBranchTrackingStatus {
 
     public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        List<Ref> call = new Git(repository).branchList().call();
-        for (Ref ref : call) {
-            List<Integer> counts = getCounts(repository, ref.getName());
-            System.out.println("For branch: " + ref.getName());
-            System.out.println("Commits ahead : " + counts.get(0));
-            System.out.println("Commits behind : " + counts.get(1));
-            System.out.println();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (Git git = new Git(repository)) {
+                List<Ref> call = git.branchList().call();
+                for (Ref ref : call) {
+                    List<Integer> counts = getCounts(repository, ref.getName());
+                    System.out.println("For branch: " + ref.getName());
+                    System.out.println("Commits ahead : " + counts.get(0));
+                    System.out.println("Commits behind : " + counts.get(1));
+                    System.out.println();
+                }
+            }
         }
-
-        repository.close();
     }
 
     private static List<Integer> getCounts(org.eclipse.jgit.lib.Repository repository, String branchName) throws IOException {
diff --git a/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommits.java b/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommits.java
index cb7c394..11e1415 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommits.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommits.java
@@ -28,18 +28,18 @@ import org.eclipse.jgit.transport.FetchResult;
 
 /**
  * Simple snippet which shows how to fetch commits from a remote Git repository
- * 
+ *
  * @author dominik.stadler at gmx.at
  */
 public class FetchRemoteCommits {
 
     public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        System.out.println("Starting fetch");
-        FetchResult result = new Git(repository).fetch().setCheckFetchedObjects(true).call();
-        System.out.println("Messages: " + result.getMessages());
-
-        repository.close();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            System.out.println("Starting fetch");
+            try (Git git = new Git(repository)) {
+                FetchResult result = git.fetch().setCheckFetchedObjects(true).call();
+                System.out.println("Messages: " + result.getMessages());
+            }
+        }
     }
 }

§§--§§
commit 83548c524a6f065db533dcdd2a7041e656fcd60b a51ba8b290f2acb81edb665dc33d75f582791026
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Fri Oct 9 20:16:46 2015 +0200 
Message: Add junit-dependency for the added test cases.
---§

diff --git a/pom.xml b/pom.xml
index 40ea43a..af4def9 100644
--- a/pom.xml
+++ b/pom.xml
@@ -38,6 +38,13 @@
 		<artifactId>slf4j-simple</artifactId>
 		<version>1.7.12</version>
 	</dependency>
+
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <version>4.12</version>
+      <scope>test</scope>
+    </dependency>
   </dependencies>
 
   <build>

§§--§§
commit be8850c9e379359f5c9133f23e1f361155aeba8b 83548c524a6f065db533dcdd2a7041e656fcd60b
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Fri Oct 9 20:42:49 2015 +0200 
Message: Adjust all snippets to use try-with-resource to get rid of all Eclipse warnings
---§

diff --git a/src/main/java/org/dstadler/jgit/OpenRepository.java b/src/main/java/org/dstadler/jgit/OpenRepository.java
index 3c7c1b9..7d99d4b 100644
--- a/src/main/java/org/dstadler/jgit/OpenRepository.java
+++ b/src/main/java/org/dstadler/jgit/OpenRepository.java
@@ -41,46 +41,44 @@ public class OpenRepository {
         
         // now open the resulting repository with a FileRepositoryBuilder
         FileRepositoryBuilder builder = new FileRepositoryBuilder();
-        Repository repository = builder.setGitDir(repoDir)
+        try (Repository repository = builder.setGitDir(repoDir)
                 .readEnvironment() // scan environment GIT_* variables
                 .findGitDir() // scan up the file system tree
-                .build();
-
-        System.out.println("Having repository: " + repository.getDirectory());
-
-        // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
-        Ref head = repository.getRef("refs/heads/master");
-        System.out.println("Ref of refs/heads/master: " + head);
-
-        repository.close();
+                .build()) {
+            System.out.println("Having repository: " + repository.getDirectory());
+    
+            // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
+            Ref head = repository.getRef("refs/heads/master");
+            System.out.println("Ref of refs/heads/master: " + head);
+        }
     }
 
     private static File createSampleGitRepo() throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.createNewRepository();
-        
-        System.out.println("Temporary repository at " + repository.getDirectory());
-
-        // create the file
-        File myfile = new File(repository.getDirectory().getParent(), "testfile");
-        myfile.createNewFile();
-
-        // run the add-call
-        new Git(repository).add()
-                .addFilepattern("testfile")
-                .call();
-
-
-        // and then commit the changes
-        new Git(repository).commit()
-                .setMessage("Added testfile")
-                .call();
-        
-        System.out.println("Added file " + myfile + " to repository at " + repository.getDirectory());
-        
-        File dir = repository.getDirectory();
+        try (Repository repository = CookbookHelper.createNewRepository()) {
+            System.out.println("Temporary repository at " + repository.getDirectory());
+    
+            // create the file
+            File myfile = new File(repository.getDirectory().getParent(), "testfile");
+            myfile.createNewFile();
+    
+            // run the add-call
+            try (Git git = new Git(repository)) {
+                git.add()
+                        .addFilepattern("testfile")
+                        .call();
         
-        repository.close();
         
-        return dir;
+                // and then commit the changes
+                git.commit()
+                        .setMessage("Added testfile")
+                        .call();
+            }
+            
+            System.out.println("Added file " + myfile + " to repository at " + repository.getDirectory());
+            
+            File dir = repository.getDirectory();
+            
+            return dir;
+        }
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/CheckMergeStatusOfCommit.java b/src/main/java/org/dstadler/jgit/api/CheckMergeStatusOfCommit.java
index c3686c9..5550c00 100644
--- a/src/main/java/org/dstadler/jgit/api/CheckMergeStatusOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/api/CheckMergeStatusOfCommit.java
@@ -33,48 +33,46 @@ import org.eclipse.jgit.revwalk.RevWalk;
 public class CheckMergeStatusOfCommit {
 
     public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        RevWalk revWalk = new RevWalk( repository );
-        RevCommit masterHead = revWalk.parseCommit( repository.resolve( "refs/heads/master" ));
-        
-        // first a commit that was merged
-        ObjectId id = repository.resolve("05d18a76875716fbdbd2c200091b40caa06c713d");
-        System.out.println("Had id: " + id);
-        RevCommit otherHead = revWalk.parseCommit( id );
-        
-        if( revWalk.isMergedInto( otherHead, masterHead ) ) {
-            System.out.println("Commit " + otherHead + " is merged into master");
-        } else {
-            System.out.println("Commit " + otherHead + " is NOT merged into master");
-        }
-
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (RevWalk revWalk = new RevWalk( repository )) {
+                RevCommit masterHead = revWalk.parseCommit( repository.resolve( "refs/heads/master" ));
+                
+                // first a commit that was merged
+                ObjectId id = repository.resolve("05d18a76875716fbdbd2c200091b40caa06c713d");
+                System.out.println("Had id: " + id);
+                RevCommit otherHead = revWalk.parseCommit( id );
+                
+                if( revWalk.isMergedInto( otherHead, masterHead ) ) {
+                    System.out.println("Commit " + otherHead + " is merged into master");
+                } else {
+                    System.out.println("Commit " + otherHead + " is NOT merged into master");
+                }
         
-        // then a commit on a test-branch which is not merged
-        id = repository.resolve("ae70dd60a7423eb07893d833600f096617f450d2");
-        System.out.println("Had id: " + id);
-        otherHead = revWalk.parseCommit( id );
+                
+                // then a commit on a test-branch which is not merged
+                id = repository.resolve("ae70dd60a7423eb07893d833600f096617f450d2");
+                System.out.println("Had id: " + id);
+                otherHead = revWalk.parseCommit( id );
+                
+                if( revWalk.isMergedInto( otherHead, masterHead ) ) {
+                    System.out.println("Commit " + otherHead + " is merged into master");
+                } else {
+                    System.out.println("Commit " + otherHead + " is NOT merged into master");
+                }
         
-        if( revWalk.isMergedInto( otherHead, masterHead ) ) {
-            System.out.println("Commit " + otherHead + " is merged into master");
-        } else {
-            System.out.println("Commit " + otherHead + " is NOT merged into master");
-        }
-
-        // and finally master-HEAD itself
-        id = repository.resolve("HEAD");
-        System.out.println("Had id: " + id);
-        otherHead = revWalk.parseCommit( id );
+                // and finally master-HEAD itself
+                id = repository.resolve("HEAD");
+                System.out.println("Had id: " + id);
+                otherHead = revWalk.parseCommit( id );
+                
+                if( revWalk.isMergedInto( otherHead, masterHead ) ) {
+                    System.out.println("Commit " + otherHead + " is merged into master");
+                } else {
+                    System.out.println("Commit " + otherHead + " is NOT merged into master");
+                }
         
-        if( revWalk.isMergedInto( otherHead, masterHead ) ) {
-            System.out.println("Commit " + otherHead + " is merged into master");
-        } else {
-            System.out.println("Commit " + otherHead + " is NOT merged into master");
+                revWalk.dispose();
+            }
         }
-
-        
-        revWalk.dispose();
-
-        repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java b/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java
index 4a526e9..bb06ca7 100644
--- a/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java
+++ b/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java
@@ -30,19 +30,18 @@ import org.eclipse.jgit.revwalk.RevWalk;
 public class GetCommitMessage {
 
     public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Ref head = repository.getRef("refs/heads/master");
-        System.out.println("Found head: " + head);
-
-        // a RevWalk allows to walk over commits based on some filtering that is defined
-        RevWalk walk = new RevWalk(repository);
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        
-        System.out.println("\nCommit-Message: " + commit.getFullMessage());
-        
-        walk.dispose();
-
-        repository.close();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            Ref head = repository.getRef("refs/heads/master");
+            System.out.println("Found head: " + head);
+    
+            // a RevWalk allows to walk over commits based on some filtering that is defined
+            try (RevWalk walk = new RevWalk(repository)) {
+                RevCommit commit = walk.parseCommit(head.getObjectId());
+                
+                System.out.println("\nCommit-Message: " + commit.getFullMessage());
+                
+                walk.dispose();
+            }
+        }
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
index f9afc9d..5c0e1ee 100755
--- a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
+++ b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
@@ -43,18 +43,16 @@ import org.eclipse.jgit.treewalk.filter.PathFilter;
 public class GetFileAttributes {
 
     public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // find the Tree for current HEAD
-        RevTree tree = getTree(repository);
-
-        printFile(repository, tree);
-
-        printDirectory(repository, tree);
-
-        // there is also FileMode.SYMLINK for symbolic links, but this is not handled here yet
-
-        repository.close();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // find the Tree for current HEAD
+            RevTree tree = getTree(repository);
+    
+            printFile(repository, tree);
+    
+            printDirectory(repository, tree);
+    
+            // there is also FileMode.SYMLINK for symbolic links, but this is not handled here yet
+        }
     }
 
     private static RevTree getTree(Repository repository) throws AmbiguousObjectException, IncorrectObjectTypeException,
@@ -62,50 +60,53 @@ public class GetFileAttributes {
         ObjectId lastCommitId = repository.resolve(Constants.HEAD);
 
         // a RevWalk allows to walk over commits based on some filtering
-        RevWalk revWalk = new RevWalk(repository);
-        RevCommit commit = revWalk.parseCommit(lastCommitId);
-
-        System.out.println("Time of commit (seconds since epoch): " + commit.getCommitTime());
-
-        // and using commit's tree find the path
-        RevTree tree = commit.getTree();
-        System.out.println("Having tree: " + tree);
-        return tree;
+        try (RevWalk revWalk = new RevWalk(repository)) {
+            RevCommit commit = revWalk.parseCommit(lastCommitId);
+    
+            System.out.println("Time of commit (seconds since epoch): " + commit.getCommitTime());
+    
+            // and using commit's tree find the path
+            RevTree tree = commit.getTree();
+            System.out.println("Having tree: " + tree);
+            return tree;
+        }
     }
 
     private static void printFile(Repository repository, RevTree tree) throws MissingObjectException,
             IncorrectObjectTypeException, CorruptObjectException, IOException {
         // now try to find a specific file
-        TreeWalk treeWalk = new TreeWalk(repository);
-        treeWalk.addTree(tree);
-        treeWalk.setRecursive(false);
-        treeWalk.setFilter(PathFilter.create("README.md"));
-        if (!treeWalk.next()) {
-            throw new IllegalStateException("Did not find expected file 'README.md'");
+        try (TreeWalk treeWalk = new TreeWalk(repository)) {
+            treeWalk.addTree(tree);
+            treeWalk.setRecursive(false);
+            treeWalk.setFilter(PathFilter.create("README.md"));
+            if (!treeWalk.next()) {
+                throw new IllegalStateException("Did not find expected file 'README.md'");
+            }
+    
+            // FileMode specifies the type of file, FileMode.REGULAR_FILE for normal file, FileMode.EXECUTABLE_FILE for executable bit
+    // set
+            FileMode fileMode = treeWalk.getFileMode(0);
+            ObjectLoader loader = repository.open(treeWalk.getObjectId(0));
+            System.out.println("README.md: " + getFileMode(fileMode) + ", type: " + fileMode.getObjectType() + ", mode: " + fileMode +
+                    " size: " + loader.getSize());
         }
-
-        // FileMode specifies the type of file, FileMode.REGULAR_FILE for normal file, FileMode.EXECUTABLE_FILE for executable bit
-// set
-        FileMode fileMode = treeWalk.getFileMode(0);
-        ObjectLoader loader = repository.open(treeWalk.getObjectId(0));
-        System.out.println("README.md: " + getFileMode(fileMode) + ", type: " + fileMode.getObjectType() + ", mode: " + fileMode +
-                " size: " + loader.getSize());
     }
 
     private static void printDirectory(Repository repository, RevTree tree) throws MissingObjectException,
             IncorrectObjectTypeException, CorruptObjectException, IOException {
         // look at directory, this has FileMode.TREE
-        TreeWalk treeWalk = new TreeWalk(repository);
-        treeWalk.addTree(tree);
-        treeWalk.setRecursive(false);
-        treeWalk.setFilter(PathFilter.create("src"));
-        if (!treeWalk.next()) {
-            throw new IllegalStateException("Did not find expected file 'README.md'");
+        try (TreeWalk treeWalk = new TreeWalk(repository)) {
+            treeWalk.addTree(tree);
+            treeWalk.setRecursive(false);
+            treeWalk.setFilter(PathFilter.create("src"));
+            if (!treeWalk.next()) {
+                throw new IllegalStateException("Did not find expected file 'README.md'");
+            }
+    
+            // FileMode now indicates that this is a directory, i.e. FileMode.TREE.equals(fileMode) holds true
+            FileMode fileMode = treeWalk.getFileMode(0);
+            System.out.println("src: " + getFileMode(fileMode) + ", type: " + fileMode.getObjectType() + ", mode: " + fileMode);
         }
-
-        // FileMode now indicates that this is a directory, i.e. FileMode.TREE.equals(fileMode) holds true
-        FileMode fileMode = treeWalk.getFileMode(0);
-        System.out.println("src: " + getFileMode(fileMode) + ", type: " + fileMode.getObjectType() + ", mode: " + fileMode);
     }
 
     private static String getFileMode(FileMode fileMode) {
diff --git a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
index befddf6..eb9c509 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
@@ -28,12 +28,10 @@ import org.eclipse.jgit.lib.Repository;
 public class GetRefFromName {
 
     public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
-        Ref head = repository.getRef("refs/heads/master");
-        System.out.println("Ref of refs/heads/master: " + head);
-
-        repository.close();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
+            Ref head = repository.getRef("refs/heads/master");
+            System.out.println("Ref of refs/heads/master: " + head);
+        }
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
index 8d5dfb7..240f00a 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
@@ -31,24 +31,23 @@ import org.eclipse.jgit.revwalk.RevWalk;
 public class GetRevCommitFromObjectId {
 
     public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Ref head = repository.getRef("refs/heads/master");
-        System.out.println("Found head: " + head);
-
-        // a RevWalk allows to walk over commits based on some filtering that is defined
-        RevWalk walk = new RevWalk(repository);
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        System.out.println("Found Commit: " + commit);
-
-        // You can also get the commit for an (abbreviated) SHA
-        walk.reset();
-        ObjectId id = repository.resolve("38d51408bd");
-        RevCommit commitAgain = walk.parseCommit(id);
-        System.out.println("Found Commit again: " + commitAgain);
-
-        walk.dispose();
-
-        repository.close();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            Ref head = repository.getRef("refs/heads/master");
+            System.out.println("Found head: " + head);
+    
+            // a RevWalk allows to walk over commits based on some filtering that is defined
+            try (RevWalk walk = new RevWalk(repository)) {
+                RevCommit commit = walk.parseCommit(head.getObjectId());
+                System.out.println("Found Commit: " + commit);
+        
+                // You can also get the commit for an (abbreviated) SHA
+                walk.reset();
+                ObjectId id = repository.resolve("38d51408bd");
+                RevCommit commitAgain = walk.parseCommit(id);
+                System.out.println("Found Commit again: " + commitAgain);
+        
+                walk.dispose();
+            }
+        }
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
index b5547cb..118b1a9 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
@@ -31,23 +31,21 @@ import org.eclipse.jgit.revwalk.RevWalk;
 public class GetRevTreeFromObjectId {
 
     public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // See e.g. GetRevCommitFromObjectId for how to use a SHA-1 directly
-        Ref head = repository.getRef("HEAD");
-
-        // a RevWalk allows to walk over commits based on some filtering that is defined
-        RevWalk walk = new RevWalk(repository);
-
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        System.out.println("Commit: " + commit);
-
-        // a commit points to a tree
-        RevTree tree = walk.parseTree(commit.getTree().getId());
-        System.out.println("Found Tree: " + tree);
-
-        walk.dispose();
-
-        repository.close();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // See e.g. GetRevCommitFromObjectId for how to use a SHA-1 directly
+            Ref head = repository.getRef("HEAD");
+    
+            // a RevWalk allows to walk over commits based on some filtering that is defined
+            try (RevWalk walk = new RevWalk(repository)) {
+                RevCommit commit = walk.parseCommit(head.getObjectId());
+                System.out.println("Commit: " + commit);
+        
+                // a commit points to a tree
+                RevTree tree = walk.parseTree(commit.getTree().getId());
+                System.out.println("Found Tree: " + tree);
+        
+                walk.dispose();
+            }
+        }
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/PrintRemotes.java b/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
index c333d78..831ee4b 100755
--- a/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
+++ b/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
@@ -29,16 +29,14 @@ import org.eclipse.jgit.lib.Repository;
 public class PrintRemotes {
 
     public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Config storedConfig = repository.getConfig();
-        Set<String> remotes = storedConfig.getSubsections("remote");
-
-        for (String remoteName : remotes) {
-            String url = storedConfig.getString("remote", remoteName, "url");
-            System.out.println(remoteName + " " + url);
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            Config storedConfig = repository.getConfig();
+            Set<String> remotes = storedConfig.getSubsections("remote");
+    
+            for (String remoteName : remotes) {
+                String url = storedConfig.getString("remote", remoteName, "url");
+                System.out.println(remoteName + " " + url);
+            }
         }
-
-        repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
index c422b4a..e30863b 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
@@ -32,28 +32,27 @@ import org.eclipse.jgit.revwalk.RevWalk;
 public class ReadBlobContents {
 
     public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
-        Ref head = repository.getRef("refs/heads/master");
-        System.out.println("Ref of refs/heads/master: " + head);
-
-        System.out.println("\nPrint contents of head of master branch, i.e. the latest commit information");
-        ObjectLoader loader = repository.open(head.getObjectId());
-        loader.copyTo(System.out);
-
-        System.out.println("\nPrint contents of tree of head of master branch, i.e. the latest binary tree information");
-
-        // a commit points to a tree
-        RevWalk walk = new RevWalk(repository);
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        RevTree tree = walk.parseTree(commit.getTree().getId());
-        System.out.println("Found Tree: " + tree);
-        loader = repository.open(tree.getId());
-        loader.copyTo(System.out);
-
-        walk.dispose();
-
-        repository.close();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
+            Ref head = repository.getRef("refs/heads/master");
+            System.out.println("Ref of refs/heads/master: " + head);
+    
+            System.out.println("\nPrint contents of head of master branch, i.e. the latest commit information");
+            ObjectLoader loader = repository.open(head.getObjectId());
+            loader.copyTo(System.out);
+    
+            System.out.println("\nPrint contents of tree of head of master branch, i.e. the latest binary tree information");
+    
+            // a commit points to a tree
+            try (RevWalk walk = new RevWalk(repository)) {
+                RevCommit commit = walk.parseCommit(head.getObjectId());
+                RevTree tree = walk.parseTree(commit.getTree().getId());
+                System.out.println("Found Tree: " + tree);
+                loader = repository.open(tree.getId());
+                loader.copyTo(System.out);
+        
+                walk.dispose();
+            }
+        }
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
index 5275c09..e38e0c1 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
@@ -38,35 +38,35 @@ import org.eclipse.jgit.treewalk.filter.PathFilter;
 public class ReadFileFromCommit {
 
     public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // find the HEAD
-        ObjectId lastCommitId = repository.resolve(Constants.HEAD);
-
-        // a RevWalk allows to walk over commits based on some filtering that is defined
-        RevWalk revWalk = new RevWalk(repository);
-        RevCommit commit = revWalk.parseCommit(lastCommitId);
-        // and using commit's tree find the path
-        RevTree tree = commit.getTree();
-        System.out.println("Having tree: " + tree);
-
-        // now try to find a specific file
-        TreeWalk treeWalk = new TreeWalk(repository);
-        treeWalk.addTree(tree);
-        treeWalk.setRecursive(true);
-        treeWalk.setFilter(PathFilter.create("README.md"));
-        if (!treeWalk.next()) {
-            throw new IllegalStateException("Did not find expected file 'README.md'");
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // find the HEAD
+            ObjectId lastCommitId = repository.resolve(Constants.HEAD);
+    
+            // a RevWalk allows to walk over commits based on some filtering that is defined
+            try (RevWalk revWalk = new RevWalk(repository)) {
+                RevCommit commit = revWalk.parseCommit(lastCommitId);
+                // and using commit's tree find the path
+                RevTree tree = commit.getTree();
+                System.out.println("Having tree: " + tree);
+        
+                // now try to find a specific file
+                try (TreeWalk treeWalk = new TreeWalk(repository)) {
+                    treeWalk.addTree(tree);
+                    treeWalk.setRecursive(true);
+                    treeWalk.setFilter(PathFilter.create("README.md"));
+                    if (!treeWalk.next()) {
+                        throw new IllegalStateException("Did not find expected file 'README.md'");
+                    }
+            
+                    ObjectId objectId = treeWalk.getObjectId(0);
+                    ObjectLoader loader = repository.open(objectId);
+            
+                    // and then one can the loader to read the file
+                    loader.copyTo(System.out);
+                }
+        
+                revWalk.dispose();
+            }
         }
-
-        ObjectId objectId = treeWalk.getObjectId(0);
-        ObjectLoader loader = repository.open(objectId);
-
-        // and then one can the loader to read the file
-        loader.copyTo(System.out);
-
-        revWalk.dispose();
-
-        repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java b/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
index 3873974..043510a 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
@@ -39,35 +39,36 @@ import org.eclipse.jgit.revwalk.RevWalk;
 public class AddAndListNoteOfCommit {
 
 	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-		Ref head = repository.getRef("refs/heads/master");
-		System.out.println("Found head: " + head);
-
-        RevWalk walk = new RevWalk(repository);
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        System.out.println("Found Commit: " + commit);
-
-        new Git(repository).notesAdd().setMessage("some note message").setObjectId(commit).call();
-        System.out.println("Added Note to commit " + commit);
-
-		List<Note> call = new Git(repository).notesList().call();
-		System.out.println("Listing " + call.size() + " notes");
-		for(Note note : call) {
-			// check if we found the note for this commit
-			if(!note.getName().equals(head.getObjectId().getName())) {
-				System.out.println("Note " + note + " did not match commit " + head);
-				continue;
-			}
-			System.out.println("Found note: " + note + " for commit " + head);
-
-			// displaying the contents of the note is done via a simple blob-read
-			ObjectLoader loader = repository.open(note.getData());
-			loader.copyTo(System.out);
+		try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+    		Ref head = repository.getRef("refs/heads/master");
+    		System.out.println("Found head: " + head);
+    
+            try (RevWalk walk = new RevWalk(repository)) {
+                RevCommit commit = walk.parseCommit(head.getObjectId());
+                System.out.println("Found Commit: " + commit);
+        
+                try (Git git = new Git(repository)) {
+                    git.notesAdd().setMessage("some note message").setObjectId(commit).call();
+                    System.out.println("Added Note to commit " + commit);
+            
+            		List<Note> call = git.notesList().call();
+            		System.out.println("Listing " + call.size() + " notes");
+            		for(Note note : call) {
+            			// check if we found the note for this commit
+            			if(!note.getName().equals(head.getObjectId().getName())) {
+            				System.out.println("Note " + note + " did not match commit " + head);
+            				continue;
+            			}
+            			System.out.println("Found note: " + note + " for commit " + head);
+            
+            			// displaying the contents of the note is done via a simple blob-read
+            			ObjectLoader loader = repository.open(note.getData());
+            			loader.copyTo(System.out);
+            		}
+                }
+        
+                walk.dispose();
+            }
 		}
-
-        walk.dispose();
-
-		repository.close();
 	}
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
index c4ccddb..17960ef 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
@@ -35,20 +35,19 @@ public class AddFile {
 
     public static void main(String[] args) throws IOException, GitAPIException {
         // prepare a new test-repository
-        Repository repository = CookbookHelper.createNewRepository();
-        Git git = new Git(repository);
-
-        // create the file
-        File myfile = new File(repository.getDirectory().getParent(), "testfile");
-        myfile.createNewFile();
-
-        // run the add-call
-        git.add()
-                .addFilepattern("testfile")
-                .call();
-
-        System.out.println("Added file " + myfile + " to repository at " + repository.getDirectory());
-
-        repository.close();
+        try (Repository repository = CookbookHelper.createNewRepository()) {
+            try (Git git = new Git(repository)) {
+                // create the file
+                File myfile = new File(repository.getDirectory().getParent(), "testfile");
+                myfile.createNewFile();
+        
+                // run the add-call
+                git.add()
+                        .addFilepattern("testfile")
+                        .call();
+        
+                System.out.println("Added file " + myfile + " to repository at " + repository.getDirectory());
+            }
+        }
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java b/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
index fef582f..1cca979 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
@@ -35,25 +35,25 @@ import org.eclipse.jgit.lib.Repository;
 public class CleanUntrackedFiles {
 
     public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.createNewRepository();
-
-        System.out.println("Repository at " + repository.getWorkTree());
-
-        File untrackedFile = File.createTempFile("untracked", ".txt", repository.getWorkTree());
-        File untrackedDir = File.createTempFile("untrackedDir", "", repository.getWorkTree());
-        untrackedDir.delete();
-        untrackedDir.mkdirs();
-
-        System.out.println("Untracked exists: " + untrackedFile.exists() + " Dir: " + untrackedDir.exists() + "/" + untrackedDir.isDirectory());
-
-        Set<String> removed = new Git(repository).clean().setCleanDirectories(true).call();
-        for(String item : removed) {
-        	System.out.println("Removed: " + item);
+        try (Repository repository = CookbookHelper.createNewRepository()) {
+            System.out.println("Repository at " + repository.getWorkTree());
+    
+            File untrackedFile = File.createTempFile("untracked", ".txt", repository.getWorkTree());
+            File untrackedDir = File.createTempFile("untrackedDir", "", repository.getWorkTree());
+            untrackedDir.delete();
+            untrackedDir.mkdirs();
+    
+            System.out.println("Untracked exists: " + untrackedFile.exists() + " Dir: " + untrackedDir.exists() + "/" + untrackedDir.isDirectory());
+    
+            try (Git git = new Git(repository)) {
+                Set<String> removed = git.clean().setCleanDirectories(true).call();
+                for(String item : removed) {
+                	System.out.println("Removed: " + item);
+                }
+                System.out.println("Removed " + removed.size() + " items");
+            }
+
+            System.out.println("Untracked after: " + untrackedFile.exists() + " Dir: " + untrackedDir.exists() + "/" + untrackedDir.isDirectory());
         }
-        System.out.println("Removed " + removed.size() + " items");
-
-        System.out.println("Untracked after: " + untrackedFile.exists() + " Dir: " + untrackedDir.exists() + "/" + untrackedDir.isDirectory());
-
-        repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java b/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java
index eb1c10c..b5d5a31 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java
@@ -36,13 +36,13 @@ import org.eclipse.jgit.lib.Repository;
 public class CollectGarbage {
 
     public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Properties ret = new Git(repository).gc().call();
-        for(Map.Entry<Object, Object> entry : ret.entrySet()) {
-            System.out.println("Ret: " + entry.getKey() + ": " + entry.getValue());
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (Git git = new Git(repository)) {
+                Properties ret = git.gc().call();
+                for(Map.Entry<Object, Object> entry : ret.entrySet()) {
+                    System.out.println("Ret: " + entry.getKey() + ": " + entry.getValue());
+                }
+            }
         }
-
-        repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java b/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java
index 7c84129..3b1466b 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java
@@ -19,21 +19,20 @@ public class CommitAll {
 
     public static void main(String[] args) throws IOException, GitAPIException {
         // prepare a new test-repository
-        Repository repository = CookbookHelper.createNewRepository();
-        Git git = new Git(repository);
-
-        // create the file
-        File myfile = new File(repository.getDirectory().getParent(), "testfile");
-        myfile.createNewFile();
-
-        // and then commit the changes
-        git.commit()
-        		.setAll(true)
-                .setMessage("Commit all")
-                .call();
-
-        System.out.println("Committed all changes to repository at " + repository.getDirectory());
-
-        repository.close();
+        try (Repository repository = CookbookHelper.createNewRepository()) {
+            try (Git git = new Git(repository)) {
+                // create the file
+                File myfile = new File(repository.getDirectory().getParent(), "testfile");
+                myfile.createNewFile();
+        
+                // and then commit the changes
+                git.commit()
+                		.setAll(true)
+                        .setMessage("Commit all")
+                        .call();
+        
+                System.out.println("Committed all changes to repository at " + repository.getDirectory());
+            }
+        }
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
index 9ab7f1b..4904ca5 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
@@ -35,25 +35,24 @@ public class CommitFile {
 
     public static void main(String[] args) throws IOException, GitAPIException {
         // prepare a new test-repository
-        Repository repository = CookbookHelper.createNewRepository();
-        Git git = new Git(repository);
-
-        // create the file
-        File myfile = new File(repository.getDirectory().getParent(), "testfile");
-        myfile.createNewFile();
-
-        // run the add
-        git.add()
-                .addFilepattern("testfile")
-                .call();
-
-        // and then commit the changes
-        git.commit()
-                .setMessage("Added testfile")
-                .call();
-
-        System.out.println("Committed file " + myfile + " to repository at " + repository.getDirectory());
-
-        repository.close();
+        try (Repository repository = CookbookHelper.createNewRepository()) {
+            try (Git git = new Git(repository)) {
+                // create the file
+                File myfile = new File(repository.getDirectory().getParent(), "testfile");
+                myfile.createNewFile();
+        
+                // run the add
+                git.add()
+                        .addFilepattern("testfile")
+                        .call();
+        
+                // and then commit the changes
+                git.commit()
+                        .setMessage("Added testfile")
+                        .call();
+        
+                System.out.println("Committed file " + myfile + " to repository at " + repository.getDirectory());
+            }
+        }
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
index dd0a132..ee877bb 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
@@ -36,49 +36,48 @@ public class CreateAndDeleteBranch {
 
     public static void main(String[] args) throws IOException, GitAPIException {
         // prepare test-repository
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-        Git git = new Git(repository);
-
-        List<Ref> call = new Git(repository).branchList().call();
-        for (Ref ref : call) {
-            System.out.println("Branch-Before: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-        }
-
-        // make sure the branch is not there
-        List<Ref> refs = git.branchList().call();
-        for(Ref ref : refs) {
-            System.out.println("Had branch: " + ref.getName());
-            if(ref.getName().equals("refs/heads/testbranch")) {
-                System.out.println("Removing branch before");
-                git.branchDelete()
-                .setBranchNames("testbranch")
-                .setForce(true)
-                .call();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (Git git = new Git(repository)) {
+                List<Ref> call = git.branchList().call();
+                for (Ref ref : call) {
+                    System.out.println("Branch-Before: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+                }
+        
+                // make sure the branch is not there
+                List<Ref> refs = git.branchList().call();
+                for(Ref ref : refs) {
+                    System.out.println("Had branch: " + ref.getName());
+                    if(ref.getName().equals("refs/heads/testbranch")) {
+                        System.out.println("Removing branch before");
+                        git.branchDelete()
+                        .setBranchNames("testbranch")
+                        .setForce(true)
+                        .call();
+                        
+                        break;
+                    }
+                }
                 
-                break;
-            }
-        }
+                // run the add-call
+                git.branchCreate()
+                        .setName("testbranch")
+                        .call();
         
-        // run the add-call
-        git.branchCreate()
-                .setName("testbranch")
-                .call();
-
-        call = new Git(repository).branchList().call();
-        for (Ref ref : call) {
-            System.out.println("Branch-Created: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-        }
-
-        // run the delete-call
-        git.branchDelete()
-                .setBranchNames("testbranch")
-                .call();
-
-        call = new Git(repository).branchList().call();
-        for (Ref ref : call) {
-            System.out.println("Branch-After: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+                call = git.branchList().call();
+                for (Ref ref : call) {
+                    System.out.println("Branch-Created: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+                }
+        
+                // run the delete-call
+                git.branchDelete()
+                        .setBranchNames("testbranch")
+                        .call();
+        
+                call = git.branchList().call();
+                for (Ref ref : call) {
+                    System.out.println("Branch-After: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+                }
+            }
         }
-
-        repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
index f83f2de..5465385 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
@@ -38,38 +38,38 @@ public class CreateAndDeleteTag {
 
     public static void main(String[] args) throws IOException, GitAPIException {
         // prepare test-repository
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-        Git git = new Git(repository);
-
-        // remove the tag before creating it
-        git.tagDelete().setTags("tag_for_testing").call();
-
-        // set it on the current HEAD
-        Ref tag = git.tag().setName("tag_for_testing").call();
-        System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
-
-        // remove the tag again
-        git.tagDelete().setTags("tag_for_testing").call();
-
-        // read some other commit and set the tag on it
-        ObjectId id = repository.resolve("HEAD^");
-        RevWalk walk = new RevWalk(repository);
-        RevCommit commit = walk.parseCommit(id);
-        tag = git.tag().setObjectId(commit).setName("tag_for_testing").call();
-        System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
-
-        // remove the tag again
-        git.tagDelete().setTags("tag_for_testing").call();
-
-        // create an annotated tag
-        tag = git.tag().setName("tag_for_testing").setAnnotated(true).call();
-        System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
-
-        // remove the tag again
-        git.tagDelete().setTags("tag_for_testing").call();
-
-        walk.dispose();
-
-        repository.close();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (Git git = new Git(repository)) {
+                // remove the tag before creating it
+                git.tagDelete().setTags("tag_for_testing").call();
+        
+                // set it on the current HEAD
+                Ref tag = git.tag().setName("tag_for_testing").call();
+                System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
+        
+                // remove the tag again
+                git.tagDelete().setTags("tag_for_testing").call();
+        
+                // read some other commit and set the tag on it
+                ObjectId id = repository.resolve("HEAD^");
+                try (RevWalk walk = new RevWalk(repository)) {
+                    RevCommit commit = walk.parseCommit(id);
+                    tag = git.tag().setObjectId(commit).setName("tag_for_testing").call();
+                    System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
+            
+                    // remove the tag again
+                    git.tagDelete().setTags("tag_for_testing").call();
+            
+                    // create an annotated tag
+                    tag = git.tag().setName("tag_for_testing").setAnnotated(true).call();
+                    System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
+            
+                    // remove the tag again
+                    git.tagDelete().setTags("tag_for_testing").call();
+            
+                    walk.dispose();
+                }
+            }
+        }
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
index 05466a7..4b29e96 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
@@ -37,21 +37,18 @@ import org.eclipse.jgit.lib.Repository;
  */
 public class CreateArchive {
     public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-
-        // make the included archive formats known
-        ArchiveFormats.registerAll();
-        try {
-            write(repository, ".zip", "zip");
-            write(repository, ".tar.gz", "tgz");
-            write(repository, ".tar.bz2", "tbz2");
-            write(repository, ".tar.xz", "txz");
-        } finally {
-            ArchiveFormats.unregisterAll();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // make the included archive formats known
+            ArchiveFormats.registerAll();
+            try {
+                write(repository, ".zip", "zip");
+                write(repository, ".tar.gz", "tgz");
+                write(repository, ".tar.bz2", "tbz2");
+                write(repository, ".tar.xz", "txz");
+            } finally {
+                ArchiveFormats.unregisterAll();
+            }
         }
-
-        repository.close();
     }
 
     private static void write(Repository repository, String suffix, String format) throws IOException, GitAPIException {
@@ -59,11 +56,13 @@ public class CreateArchive {
         File file = File.createTempFile("test", suffix);
         try (OutputStream out = new FileOutputStream(file)) {
             // finally call the ArchiveCommand to write out using the various supported formats
-            new Git(repository).archive()
-                    .setTree(repository.resolve("master"))
-                    .setFormat(format)
-                    .setOutputStream(out)
-                    .call();
+            try (Git git = new Git(repository)) {
+                git.archive()
+                        .setTree(repository.resolve("master"))
+                        .setFormat(format)
+                        .setOutputStream(out)
+                        .call();
+            }
         }
 
         System.out.println("Wrote " + file.length() + " bytes to " + file);
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
index e51f824..3344d2f 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
@@ -85,11 +85,13 @@ public class CreateCustomFormatArchive {
                 // this is the file that we write the archive to
                 try (OutputStream out = new FileOutputStream(file)) {
                     // finally call the ArchiveCommand to write out using the given format
-                    new Git(repository).archive()
-                            .setTree(repository.resolve("master"))
-                            .setFormat("myzip")
-                            .setOutputStream(out)
-                            .call();
+                    try (Git git = new Git(repository)) {
+                        git.archive()
+                                .setTree(repository.resolve("master"))
+                                .setFormat("myzip")
+                                .setOutputStream(out)
+                                .call();
+                    }
                 }
             } finally {
                 ArchiveCommand.unregisterFormat("myzip");
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java b/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
index afb1333..24eff81 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
@@ -39,57 +39,56 @@ public class CreateListApplyAndDropStash {
 
     public static void main(String[] args) throws IOException, GitAPIException {
         // prepare a new test-repository
-        Repository repository = CookbookHelper.createNewRepository();
-        Git git = new Git(repository);
-
-        // create a file
-        File file1 = new File(repository.getDirectory().getParent(), "testfile");
-        FileUtils.writeStringToFile(file1, "some text");
-        File file2 = new File(repository.getDirectory().getParent(), "testfile2");
-        FileUtils.writeStringToFile(file2, "some text");
-
-        // add and commit the file
-        git.add()
-                .addFilepattern("testfile")
-                .call();
-        git.add()
-                .addFilepattern("testfile2")
-                .call();
-        git.commit()
-                .setMessage("Added testfiles")
-                .call();
-
-        // then modify the file
-        FileUtils.writeStringToFile(file1, "some more text", true);
-
-        // push the changes to a new stash
-        RevCommit stash = git.stashCreate()
-                .call();
-
-        System.out.println("Created stash " + stash);
-
-        // then modify the 2nd file
-        FileUtils.writeStringToFile(file2, "some more text", true);
-
-        // push the changes to a new stash
-        stash = git.stashCreate()
-                .call();
-
-        System.out.println("Created stash " + stash);
-
-        // list the stashes
-        Collection<RevCommit> stashes = git.stashList().call();
-        for(RevCommit rev : stashes) {
-            System.out.println("Found stash: " + rev + ": " + rev.getFullMessage());
+        try (Repository repository = CookbookHelper.createNewRepository()) {
+            try (Git git = new Git(repository)) {
+                // create a file
+                File file1 = new File(repository.getDirectory().getParent(), "testfile");
+                FileUtils.writeStringToFile(file1, "some text");
+                File file2 = new File(repository.getDirectory().getParent(), "testfile2");
+                FileUtils.writeStringToFile(file2, "some text");
+        
+                // add and commit the file
+                git.add()
+                        .addFilepattern("testfile")
+                        .call();
+                git.add()
+                        .addFilepattern("testfile2")
+                        .call();
+                git.commit()
+                        .setMessage("Added testfiles")
+                        .call();
+        
+                // then modify the file
+                FileUtils.writeStringToFile(file1, "some more text", true);
+        
+                // push the changes to a new stash
+                RevCommit stash = git.stashCreate()
+                        .call();
+        
+                System.out.println("Created stash " + stash);
+        
+                // then modify the 2nd file
+                FileUtils.writeStringToFile(file2, "some more text", true);
+        
+                // push the changes to a new stash
+                stash = git.stashCreate()
+                        .call();
+        
+                System.out.println("Created stash " + stash);
+        
+                // list the stashes
+                Collection<RevCommit> stashes = git.stashList().call();
+                for(RevCommit rev : stashes) {
+                    System.out.println("Found stash: " + rev + ": " + rev.getFullMessage());
+                }
+        
+                // drop the 1st stash without applying it
+                ObjectId call = git.stashDrop().setStashRef(0).call();
+                System.out.println("StashDrop returned: " + call);
+        
+                ObjectId applied = git.stashApply().setStashRef(stash.getName()).call();
+                System.out.println("Applied 2nd stash as: " + applied);
+            }
         }
-
-        // drop the 1st stash without applying it
-        ObjectId call = git.stashDrop().setStashRef(0).call();
-        System.out.println("StashDrop returned: " + call);
-
-        ObjectId applied = git.stashApply().setStashRef(stash.getName()).call();
-        System.out.println("Applied 2nd stash as: " + applied);
-
-        repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
index e090fc1..4594574 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
@@ -42,10 +42,8 @@ public class InitRepository {
                 .setDirectory(dir)
                 .call();
 
-        Repository repository = FileRepositoryBuilder.create(new File(dir.getAbsolutePath(), ".git"));
-
-        System.out.println("Created a new repository at " + repository.getDirectory());
-
-        repository.close();
+        try (Repository repository = FileRepositoryBuilder.create(new File(dir.getAbsolutePath(), ".git"))) {
+            System.out.println("Created a new repository at " + repository.getDirectory());
+        }
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
index eb8b370..4dfc1de 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
@@ -36,20 +36,20 @@ import org.eclipse.jgit.lib.Repository;
 public class ListBranches {
 
     public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        System.out.println("Listing local branches:");
-        List<Ref> call = new Git(repository).branchList().call();
-        for (Ref ref : call) {
-            System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-        }
-
-        System.out.println("Now including remote branches:");
-        call = new Git(repository).branchList().setListMode(ListMode.ALL).call();
-        for (Ref ref : call) {
-            System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-        }
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            System.out.println("Listing local branches:");
+            try (Git git = new Git(repository)) {
+                List<Ref> call = git.branchList().call();
+                for (Ref ref : call) {
+                    System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+                }
         
-        repository.close();
+                System.out.println("Now including remote branches:");
+                call = git.branchList().setListMode(ListMode.ALL).call();
+                for (Ref ref : call) {
+                    System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+                }
+            }
+        }        
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java b/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
index a4788dd..dc7cda7 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
@@ -36,18 +36,18 @@ import org.eclipse.jgit.notes.Note;
 public class ListNotes {
 
     public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        List<Note> call = new Git(repository).notesList().call();
-        System.out.println("Listing " + call.size() + " notes");
-        for (Note note : call) {
-            System.out.println("Note: " + note + " " + note.getName() + " " + note.getData().getName() + "\nContent: ");
-
-            // displaying the contents of the note is done via a simple blob-read
-            ObjectLoader loader = repository.open(note.getData());
-            loader.copyTo(System.out);
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (Git git = new Git(repository)) {
+                List<Note> call = git.notesList().call();
+                System.out.println("Listing " + call.size() + " notes");
+                for (Note note : call) {
+                    System.out.println("Note: " + note + " " + note.getName() + " " + note.getData().getName() + "\nContent: ");
+        
+                    // displaying the contents of the note is done via a simple blob-read
+                    ObjectLoader loader = repository.open(note.getData());
+                    loader.copyTo(System.out);
+                }
+            }
         }
-
-        repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java b/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java
index 1b8ff78..dd0218a 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java
@@ -33,26 +33,26 @@ import org.eclipse.jgit.lib.Repository;
 public class ListRemotes {
 
     public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // all refs
-        Collection<Ref> refs = new Git(repository).lsRemote().call();
-        for (Ref ref : refs) {
-            System.out.println("Ref: " + ref);
-        }
-
-        // heads only
-        refs = new Git(repository).lsRemote().setHeads(true).call();
-        for (Ref ref : refs) {
-            System.out.println("Head: " + ref);
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // all refs
+            try (Git git = new Git(repository)) {
+                Collection<Ref> refs = git.lsRemote().call();
+                for (Ref ref : refs) {
+                    System.out.println("Ref: " + ref);
+                }
+        
+                // heads only
+                refs = git.lsRemote().setHeads(true).call();
+                for (Ref ref : refs) {
+                    System.out.println("Head: " + ref);
+                }
+        
+                // tags only
+                refs = git.lsRemote().setTags(true).call();
+                for (Ref ref : refs) {
+                    System.out.println("Remote tag: " + ref);
+                }
+            }
         }
-
-        // tags only
-        refs = new Git(repository).lsRemote().setTags(true).call();
-        for (Ref ref : refs) {
-            System.out.println("Remote tag: " + ref);
-        }
-
-        repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
index 3949403..0d673fc 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
@@ -37,28 +37,28 @@ import org.eclipse.jgit.revwalk.RevCommit;
 public class ListTags {
 
     public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        List<Ref> call = new Git(repository).tagList().call();
-        for (Ref ref : call) {
-            System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-
-            // fetch all commits for this tag
-            LogCommand log = new Git(repository).log();
-
-            Ref peeledRef = repository.peel(ref);
-            if(peeledRef.getPeeledObjectId() != null) {
-            	log.add(peeledRef.getPeeledObjectId());
-            } else {
-            	log.add(ref.getObjectId());
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (Git git = new Git(repository)) {
+                List<Ref> call = git.tagList().call();
+                for (Ref ref : call) {
+                    System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        
+                    // fetch all commits for this tag
+                    LogCommand log = git.log();
+        
+                    Ref peeledRef = repository.peel(ref);
+                    if(peeledRef.getPeeledObjectId() != null) {
+                    	log.add(peeledRef.getPeeledObjectId());
+                    } else {
+                    	log.add(ref.getObjectId());
+                    }
+        
+        			Iterable<RevCommit> logs = log.call();
+        			for (RevCommit rev : logs) {
+        				System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+        			}
+                }
             }
-
-			Iterable<RevCommit> logs = log.call();
-			for (RevCommit rev : logs) {
-				System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
-			}
         }
-
-        repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
index aefd982..0c4bb0b 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
@@ -46,50 +46,50 @@ public class ShowBlame {
 
     public static void main(String[] args) throws IOException, GitAPIException {
         // prepare a new test-repository
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        BlameCommand blamer = new BlameCommand(repository);
-        ObjectId commitID = repository.resolve("HEAD");
-        blamer.setStartCommit(commitID);
-        blamer.setFilePath("README.md");
-        BlameResult blame = blamer.call();
-
-        // read the number of lines from the commit to not look at changes in the working copy
-        int lines = countFiles(repository, commitID, "README.md");
-        for (int i = 0; i < lines; i++) {
-            RevCommit commit = blame.getSourceCommit(i);
-            System.out.println("Line: " + i + ": " + commit);
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            BlameCommand blamer = new BlameCommand(repository);
+            ObjectId commitID = repository.resolve("HEAD");
+            blamer.setStartCommit(commitID);
+            blamer.setFilePath("README.md");
+            BlameResult blame = blamer.call();
+    
+            // read the number of lines from the commit to not look at changes in the working copy
+            int lines = countFiles(repository, commitID, "README.md");
+            for (int i = 0; i < lines; i++) {
+                RevCommit commit = blame.getSourceCommit(i);
+                System.out.println("Line: " + i + ": " + commit);
+            }
+    
+            System.out.println("Displayed commits responsible for " + lines + " lines of README.md");
         }
-
-        System.out.println("Displayed commits responsible for " + lines + " lines of README.md");
-
-        repository.close();
     }
 
     private static int countFiles(Repository repository, ObjectId commitID, String name) throws IOException {
-        RevWalk revWalk = new RevWalk(repository);
-        RevCommit commit = revWalk.parseCommit(commitID);
-        RevTree tree = commit.getTree();
-        System.out.println("Having tree: " + tree);
-
-        // now try to find a specific file
-        TreeWalk treeWalk = new TreeWalk(repository);
-        treeWalk.addTree(tree);
-        treeWalk.setRecursive(true);
-        treeWalk.setFilter(PathFilter.create(name));
-        if (!treeWalk.next()) {
-            throw new IllegalStateException("Did not find expected file 'README.md'");
+        try (RevWalk revWalk = new RevWalk(repository)) {
+            RevCommit commit = revWalk.parseCommit(commitID);
+            RevTree tree = commit.getTree();
+            System.out.println("Having tree: " + tree);
+    
+            // now try to find a specific file
+            try (TreeWalk treeWalk = new TreeWalk(repository)) {
+                treeWalk.addTree(tree);
+                treeWalk.setRecursive(true);
+                treeWalk.setFilter(PathFilter.create(name));
+                if (!treeWalk.next()) {
+                    throw new IllegalStateException("Did not find expected file 'README.md'");
+                }
+        
+                ObjectId objectId = treeWalk.getObjectId(0);
+                ObjectLoader loader = repository.open(objectId);
+        
+                ByteArrayOutputStream stream = new ByteArrayOutputStream();
+                // and then one can the loader to read the file
+                loader.copyTo(stream);
+                
+                revWalk.dispose();
+                
+                return IOUtils.readLines(new ByteArrayInputStream(stream.toByteArray())).size();
+            }
         }
-
-        ObjectId objectId = treeWalk.getObjectId(0);
-        ObjectLoader loader = repository.open(objectId);
-
-        ByteArrayOutputStream stream = new ByteArrayOutputStream();
-        // and then one can the loader to read the file
-        loader.copyTo(stream);
-
-        revWalk.dispose();
-
-        return IOUtils.readLines(new ByteArrayInputStream(stream.toByteArray())).size();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java b/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java
index db8db05..64f2288 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java
@@ -38,34 +38,36 @@ import org.eclipse.jgit.treewalk.CanonicalTreeParser;
 public class ShowChangedFilesBetweenCommits {
 
     public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // The {tree} will return the underlying tree-id instead of the commit-id itself!
-        // For a description of what the carets do see e.g. http://www.paulboxley.com/blog/2011/06/git-caret-and-tilde
-        // This means we are selecting the parent of the parent of the parent of the parent of current HEAD and
-        // take the tree-ish of it
-        ObjectId oldHead = repository.resolve("HEAD^^^^{tree}");
-        ObjectId head = repository.resolve("HEAD^{tree}");
-
-        System.out.println("Printing diff between tree: " + oldHead + " and " + head);
-
-        // prepare the two iterators to compute the diff between
-		ObjectReader reader = repository.newObjectReader();
-		CanonicalTreeParser oldTreeIter = new CanonicalTreeParser();
-		oldTreeIter.reset(reader, oldHead);
-		CanonicalTreeParser newTreeIter = new CanonicalTreeParser();
-		newTreeIter.reset(reader, head);
-
-		// finally get the list of changed files
-		List<DiffEntry> diffs= new Git(repository).diff()
-		                    .setNewTree(newTreeIter)
-		                    .setOldTree(oldTreeIter)
-		                    .call();
-        for (DiffEntry entry : diffs) {
-            System.out.println("Entry: " + entry);
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // The {tree} will return the underlying tree-id instead of the commit-id itself!
+            // For a description of what the carets do see e.g. http://www.paulboxley.com/blog/2011/06/git-caret-and-tilde
+            // This means we are selecting the parent of the parent of the parent of the parent of current HEAD and
+            // take the tree-ish of it
+            ObjectId oldHead = repository.resolve("HEAD^^^^{tree}");
+            ObjectId head = repository.resolve("HEAD^{tree}");
+    
+            System.out.println("Printing diff between tree: " + oldHead + " and " + head);
+    
+            // prepare the two iterators to compute the diff between
+    		try (ObjectReader reader = repository.newObjectReader()) {
+        		CanonicalTreeParser oldTreeIter = new CanonicalTreeParser();
+        		oldTreeIter.reset(reader, oldHead);
+        		CanonicalTreeParser newTreeIter = new CanonicalTreeParser();
+        		newTreeIter.reset(reader, head);
+        
+        		// finally get the list of changed files
+        		try (Git git = new Git(repository)) {
+                    List<DiffEntry> diffs= git.diff()
+            		                    .setNewTree(newTreeIter)
+            		                    .setOldTree(oldTreeIter)
+            		                    .call();
+                    for (DiffEntry entry : diffs) {
+                        System.out.println("Entry: " + entry);
+                    }
+        		}
+    		}
         }
+    	
         System.out.println("Done");
-
-        repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
index 400ccf6..f41f42d 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
@@ -46,43 +46,45 @@ import org.eclipse.jgit.treewalk.filter.PathFilter;
 public class ShowFileDiff {
 
     public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // the diff works on TreeIterators, we prepare two for the two branches
-        AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "09c65401f3730eb3e619c33bf31e2376fb393727");
-        AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "aa31703b65774e4a06010824601e56375a70078c");
-
-        // then the procelain diff-command returns a list of diff entries
-        List<DiffEntry> diff = new Git(repository).diff().
-                setOldTree(oldTreeParser).
-                setNewTree(newTreeParser).
-                setPathFilter(PathFilter.create("README.md")).
-                call();
-        for (DiffEntry entry : diff) {
-            System.out.println("Entry: " + entry + ", from: " + entry.getOldId() + ", to: " + entry.getNewId());
-            DiffFormatter formatter = new DiffFormatter(System.out);
-            formatter.setRepository(repository);
-            formatter.format(entry);
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // the diff works on TreeIterators, we prepare two for the two branches
+            AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "09c65401f3730eb3e619c33bf31e2376fb393727");
+            AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "aa31703b65774e4a06010824601e56375a70078c");
+    
+            // then the procelain diff-command returns a list of diff entries
+            try (Git git = new Git(repository)) {
+                List<DiffEntry> diff = git.diff().
+                        setOldTree(oldTreeParser).
+                        setNewTree(newTreeParser).
+                        setPathFilter(PathFilter.create("README.md")).
+                        call();
+                for (DiffEntry entry : diff) {
+                    System.out.println("Entry: " + entry + ", from: " + entry.getOldId() + ", to: " + entry.getNewId());
+                    try (DiffFormatter formatter = new DiffFormatter(System.out)) {
+                        formatter.setRepository(repository);
+                        formatter.format(entry);
+                    }
+                }
+            }
         }
-
-        repository.close();
     }
 
     private static AbstractTreeIterator prepareTreeParser(Repository repository, String objectId) throws IOException,
             MissingObjectException,
             IncorrectObjectTypeException {
         // from the commit we can build the tree which allows us to construct the TreeParser
-        RevWalk walk = new RevWalk(repository);
-        RevCommit commit = walk.parseCommit(ObjectId.fromString(objectId));
-        RevTree tree = walk.parseTree(commit.getTree().getId());
-
-        CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
-        try (ObjectReader oldReader = repository.newObjectReader()) {
-            oldTreeParser.reset(oldReader, tree.getId());
+        try (RevWalk walk = new RevWalk(repository)) {
+            RevCommit commit = walk.parseCommit(ObjectId.fromString(objectId));
+            RevTree tree = walk.parseTree(commit.getTree().getId());
+    
+            CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
+            try (ObjectReader oldReader = repository.newObjectReader()) {
+                oldTreeParser.reset(oldReader, tree.getId());
+            }
+            
+            walk.dispose();
+    
+            return oldTreeParser;
         }
-        
-        walk.dispose();
-
-        return oldTreeParser;
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
index 8dc582d..dfb7ccf 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
@@ -35,59 +35,59 @@ public class ShowLog {
 
     @SuppressWarnings("unused")
     public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Iterable<RevCommit> logs = new Git(repository).log()
-                .call();
-        int count = 0;
-        for (RevCommit rev : logs) {
-            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
-            count++;
-        }
-        System.out.println("Had " + count + " commits overall on current branch");
-
-        logs = new Git(repository).log()
-                .add(repository.resolve("remotes/origin/testbranch"))
-                .call();
-        count = 0;
-        for (RevCommit rev : logs) {
-            System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
-            count++;
-        }
-        System.out.println("Had " + count + " commits overall on test-branch");
-
-        logs = new Git(repository).log()
-                .all()
-                .call();
-        count = 0;
-        for (RevCommit rev : logs) {
-            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
-            count++;
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (Git git = new Git(repository)) {
+                Iterable<RevCommit> logs = git.log()
+                        .call();
+                int count = 0;
+                for (RevCommit rev : logs) {
+                    //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+                    count++;
+                }
+                System.out.println("Had " + count + " commits overall on current branch");
+        
+                logs = git.log()
+                        .add(repository.resolve("remotes/origin/testbranch"))
+                        .call();
+                count = 0;
+                for (RevCommit rev : logs) {
+                    System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+                    count++;
+                }
+                System.out.println("Had " + count + " commits overall on test-branch");
+        
+                logs = git.log()
+                        .all()
+                        .call();
+                count = 0;
+                for (RevCommit rev : logs) {
+                    //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+                    count++;
+                }
+                System.out.println("Had " + count + " commits overall in repository");
+        
+                logs = git.log()
+                        // for all log.all()
+                        .addPath("README.md")
+                        .call();
+                count = 0;
+                for (RevCommit rev : logs) {
+                    //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+                    count++;
+                }
+                System.out.println("Had " + count + " commits on README.md");
+        
+                logs = git.log()
+                        // for all log.all()
+                        .addPath("pom.xml")
+                        .call();
+                count = 0;
+                for (RevCommit rev : logs) {
+                    //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+                    count++;
+                }
+                System.out.println("Had " + count + " commits on pom.xml");
+            }
         }
-        System.out.println("Had " + count + " commits overall in repository");
-
-        logs = new Git(repository).log()
-                // for all log.all()
-                .addPath("README.md")
-                .call();
-        count = 0;
-        for (RevCommit rev : logs) {
-            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
-            count++;
-        }
-        System.out.println("Had " + count + " commits on README.md");
-
-        logs = new Git(repository).log()
-                // for all log.all()
-                .addPath("pom.xml")
-                .call();
-        count = 0;
-        for (RevCommit rev : logs) {
-            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
-            count++;
-        }
-        System.out.println("Had " + count + " commits on pom.xml");
-
-        repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java b/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
index aa2735c..595d9a9 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
@@ -35,20 +35,20 @@ import org.eclipse.jgit.lib.Repository;
 public class ShowStatus {
 
     public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Status status = new Git(repository).status().call();
-        System.out.println("Added: " + status.getAdded());
-        System.out.println("Changed: " + status.getChanged());
-        System.out.println("Conflicting: " + status.getConflicting());
-        System.out.println("ConflictingStageState: " + status.getConflictingStageState());
-        System.out.println("IgnoredNotInIndex: " + status.getIgnoredNotInIndex());
-        System.out.println("Missing: " + status.getMissing());
-        System.out.println("Modified: " + status.getModified());
-        System.out.println("Removed: " + status.getRemoved());
-        System.out.println("Untracked: " + status.getUntracked());
-        System.out.println("UntrackedFolders: " + status.getUntrackedFolders());
-
-        repository.close();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (Git git = new Git(repository)) {
+                Status status = git.status().call();
+                System.out.println("Added: " + status.getAdded());
+                System.out.println("Changed: " + status.getChanged());
+                System.out.println("Conflicting: " + status.getConflicting());
+                System.out.println("ConflictingStageState: " + status.getConflictingStageState());
+                System.out.println("IgnoredNotInIndex: " + status.getIgnoredNotInIndex());
+                System.out.println("Missing: " + status.getMissing());
+                System.out.println("Modified: " + status.getModified());
+                System.out.println("Removed: " + status.getRemoved());
+                System.out.println("Untracked: " + status.getUntracked());
+                System.out.println("UntrackedFolders: " + status.getUntrackedFolders());
+            }
+        }
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java b/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
index be06a4a..07aa4f2 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
@@ -34,17 +34,16 @@ import org.eclipse.jgit.revwalk.RevCommit;
 public class WalkAllCommits {
 
     public static void main(String[] args) throws IOException, InvalidRefNameException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Git git = new Git(repository);
-        Iterable<RevCommit> commits = git.log().all().call();
-        int count = 0;
-        for (RevCommit commit : commits) {
-            System.out.println("LogCommit: " + commit);
-            count++;
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (Git git = new Git(repository)) {
+                Iterable<RevCommit> commits = git.log().all().call();
+                int count = 0;
+                for (RevCommit commit : commits) {
+                    System.out.println("LogCommit: " + commit);
+                    count++;
+                }
+                System.out.println(count);
+            }
         }
-        System.out.println(count);
-
-        repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java b/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
index be58653..4d30b08 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
@@ -34,26 +34,26 @@ import org.eclipse.jgit.treewalk.TreeWalk;
 public class BrowseTree {
 
     public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        ObjectId revId = repository.resolve(Constants.HEAD);
-        TreeWalk treeWalk = new TreeWalk(repository);
-
-        treeWalk.addTree(new RevWalk(repository).parseTree(revId));
-
-        while (treeWalk.next())
-        {
-            System.out.println("---------------------------");
-            System.out.append("name: ").println(treeWalk.getNameString());
-            System.out.append("path: ").println(treeWalk.getPathString());
-
-            ObjectLoader loader = repository.open(treeWalk.getObjectId(0));
-
-            System.out.append("directory: ").println(loader.getType()
-                    == Constants.OBJ_TREE);
-            System.out.append("size: ").println(loader.getSize());
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            ObjectId revId = repository.resolve(Constants.HEAD);
+            try (TreeWalk treeWalk = new TreeWalk(repository)) {
+                try (RevWalk revWalk = new RevWalk(repository)) {
+                    treeWalk.addTree(revWalk.parseTree(revId));
+            
+                    while (treeWalk.next())
+                    {
+                        System.out.println("---------------------------");
+                        System.out.append("name: ").println(treeWalk.getNameString());
+                        System.out.append("path: ").println(treeWalk.getPathString());
+            
+                        ObjectLoader loader = repository.open(treeWalk.getObjectId(0));
+            
+                        System.out.append("directory: ").println(loader.getType()
+                                == Constants.OBJ_TREE);
+                        System.out.append("size: ").println(loader.getSize());
+                    }
+                }
+            }
         }
-
-        repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
index 577890b..d86f793 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
@@ -34,24 +34,23 @@ import org.eclipse.jgit.revwalk.RevCommit;
 public class ListChildrenOfCommit {
 
     public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        PlotWalk revWalk = new PlotWalk(repository);
-        ObjectId rootId = repository.resolve("refs/heads/master");
-        RevCommit root = revWalk.parseCommit(rootId);
-        revWalk.markStart(root);
-        PlotCommitList<PlotLane> plotCommitList = new PlotCommitList<>();
-        plotCommitList.source(revWalk);
-        plotCommitList.fillTo(Integer.MAX_VALUE);
-
-        System.out.println("Printing children of commit " + root);
-        for (RevCommit com : revWalk) {
-            System.out.println("Child: " + com);
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (PlotWalk revWalk = new PlotWalk(repository)) {
+                ObjectId rootId = repository.resolve("refs/heads/master");
+                RevCommit root = revWalk.parseCommit(rootId);
+                revWalk.markStart(root);
+                PlotCommitList<PlotLane> plotCommitList = new PlotCommitList<>();
+                plotCommitList.source(revWalk);
+                plotCommitList.fillTo(Integer.MAX_VALUE);
+        
+                System.out.println("Printing children of commit " + root);
+                for (RevCommit com : revWalk) {
+                    System.out.println("Child: " + com);
+                }
+        
+                System.out.println("Printing with next()");
+                System.out.println("next: " + revWalk.next());
+            }
         }
-
-        System.out.println("Printing with next()");
-        System.out.println("next: " + revWalk.next());
-
-        repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java b/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
index a5c39fb..f5cfb76 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
@@ -31,25 +31,23 @@ import org.eclipse.jgit.lib.Repository;
 public class ListIndex {
 
     public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // DirCache contains all files of the repository
-        DirCache index = DirCache.read(repository);
-        System.out.println("DirCache has " + index.getEntryCount() + " items");
-        for (int i = 0; i < index.getEntryCount(); i++) {
-            // the number after the AnyObjectId is the "stage", see the constants in DirCacheEntry
-            System.out.println("Item " + i + ": " + index.getEntry(i));
-        }
-
-        //
-        System.out.println("Now printing staged items...");
-        for (int i = 0; i < index.getEntryCount(); i++) {
-            DirCacheEntry entry = index.getEntry(i);
-            if (entry.getStage() != DirCacheEntry.STAGE_0) {
-                System.out.println("Item " + i + ": " + entry);
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // DirCache contains all files of the repository
+            DirCache index = DirCache.read(repository);
+            System.out.println("DirCache has " + index.getEntryCount() + " items");
+            for (int i = 0; i < index.getEntryCount(); i++) {
+                // the number after the AnyObjectId is the "stage", see the constants in DirCacheEntry
+                System.out.println("Item " + i + ": " + index.getEntry(i));
+            }
+    
+            //
+            System.out.println("Now printing staged items...");
+            for (int i = 0; i < index.getEntryCount(); i++) {
+                DirCacheEntry entry = index.getEntry(i);
+                if (entry.getStage() != DirCacheEntry.STAGE_0) {
+                    System.out.println("Item " + i + ": " + entry);
+                }
             }
         }
-
-        repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
index c451d61..f24236a 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
@@ -39,23 +39,23 @@ import org.eclipse.jgit.lib.Repository;
 public class ListRefLog {
 
     public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        List<Ref> refs = new Git(repository).branchList().call();
-        for (Ref ref : refs) {
-            System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-
-            listReflog(repository, ref);
-        }
-
-        List<Ref> call = new Git(repository).tagList().call();
-        for (Ref ref : call) {
-            System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-
-            listReflog(repository, ref);
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (Git git = new Git(repository)) {
+                List<Ref> refs = git.branchList().call();
+                for (Ref ref : refs) {
+                    System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        
+                    listReflog(repository, ref);
+                }
+        
+                List<Ref> call = git.tagList().call();
+                for (Ref ref : call) {
+                    System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        
+                    listReflog(repository, ref);
+                }
+            }
         }
-
-        repository.close();
     }
 
     private static void listReflog(Repository repository, Ref ref) throws GitAPIException, InvalidRefNameException {
@@ -65,11 +65,13 @@ public class ListRefLog {
          * RevCommit commit = walk.parseCommit(head.getObjectId());
          */
 
-        Collection<ReflogEntry> call = new Git(repository).reflog().setRef(ref.getName()).call();
-        Iterator<ReflogEntry> it = call.iterator();
-        while (it.hasNext()) {
-            ReflogEntry reflog = it.next();
-            System.out.println("Reflog: " + reflog);
+        try (Git git = new Git(repository)) {
+            Collection<ReflogEntry> call = git.reflog().setRef(ref.getName()).call();
+            Iterator<ReflogEntry> it = call.iterator();
+            while (it.hasNext()) {
+                ReflogEntry reflog = it.next();
+                System.out.println("Reflog: " + reflog);
+            }
         }
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
index 35669be..feb6ead 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
@@ -39,20 +39,20 @@ public class PullRemoteRepository {
     private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
 
     public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-        Repository repository = cloneRepository();
-
-        System.out.println("Having repository: " + repository.getDirectory() + " with head: " +
-                repository.getRef(Constants.HEAD) + "/" + repository.resolve("HEAD") + "/" +
-                repository.resolve("refs/heads/master"));
-
-        // TODO: why do we get null here for HEAD?!? See also
-// http://stackoverflow.com/questions/17979660/jgit-pull-noheadexception
-
-        PullResult call = new Git(repository).pull().call();
-
-        System.out.println("Pulled from the remote repository: " + call);
-
-        repository.close();
+        try (Repository repository = cloneRepository()) {
+            System.out.println("Having repository: " + repository.getDirectory() + " with head: " +
+                    repository.getRef(Constants.HEAD) + "/" + repository.resolve("HEAD") + "/" +
+                    repository.resolve("refs/heads/master"));
+    
+            // TODO: why do we get null here for HEAD?!? See also
+    // http://stackoverflow.com/questions/17979660/jgit-pull-noheadexception
+    
+            try (Git git = new Git(repository)) {
+                PullResult call = git.pull().call();
+        
+                System.out.println("Pulled from the remote repository: " + call);
+            }
+        }
     }
 
     private static Repository cloneRepository() throws IOException, GitAPIException, InvalidRemoteException, TransportException {
@@ -62,12 +62,12 @@ public class PullRemoteRepository {
 
         // then clone
         System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
-        Git result = Git.cloneRepository()
+        try (Git result = Git.cloneRepository()
                 .setURI(REMOTE_URL)
                 .setDirectory(localPath)
-                .call();
-
-        // Note: the call() returns an opened repository already which needs to be closed to avoid file handle leaks!
-        return result.getRepository();
+                .call()) {
+            // Note: the call() returns an opened repository already which needs to be closed to avoid file handle leaks!
+            return result.getRepository();
+        }
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
index 39e644c..c45ed29 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
@@ -44,38 +44,34 @@ public class PushToRemoteRepository {
 
         // then clone
         System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
-        Git result = Git.cloneRepository()
+        try (Git result = Git.cloneRepository()
                 .setURI(REMOTE_URL)
                 .setDirectory(localPath)
-                .call();
-
-        // prepare a second folder for the 2nd clone
-        File localPath2 = File.createTempFile("TestGitRepository", "");
-        localPath2.delete();
-
-        // then clone again
-        System.out.println("Cloning from file://" + localPath + " to " + localPath2);
-        Git result2 = Git.cloneRepository()
-                .setURI("file://" + localPath)
-                .setDirectory(localPath2)
-                .call();
-
-        // now open the created repository
-        FileRepositoryBuilder builder = new FileRepositoryBuilder();
-        Repository repository = builder.setGitDir(localPath2)
-                .readEnvironment() // scan environment GIT_* variables
-                .findGitDir() // scan up the file system tree
-                .build();
-
-        Git git = new Git(repository);
-        git.push()
-                .call();
-
-        System.out.println("Pushed from repository: " + repository.getDirectory() + " to remote repository at " + REMOTE_URL);
-
-        repository.close();
-
-        result.close();
-        result2.close();
+                .call()) {
+            // prepare a second folder for the 2nd clone
+            File localPath2 = File.createTempFile("TestGitRepository", "");
+            localPath2.delete();
+    
+            // then clone again
+            System.out.println("Cloning from file://" + localPath + " to " + localPath2);
+            try (Git result2 = Git.cloneRepository()
+                    .setURI("file://" + localPath)
+                    .setDirectory(localPath2)
+                    .call()) {
+                // now open the created repository
+                FileRepositoryBuilder builder = new FileRepositoryBuilder();
+                try (Repository repository = builder.setGitDir(localPath2)
+                        .readEnvironment() // scan environment GIT_* variables
+                        .findGitDir() // scan up the file system tree
+                        .build()) {
+                    try (Git git = new Git(repository)) {
+                        git.push()
+                                .call();
+                    }
+            
+                    System.out.println("Pushed from repository: " + repository.getDirectory() + " to remote repository at " + REMOTE_URL);
+                }
+            }
+        }
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/TestSubmodules.java b/src/main/java/org/dstadler/jgit/unfinished/TestSubmodules.java
index 4646745..337db85 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/TestSubmodules.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/TestSubmodules.java
@@ -36,19 +36,19 @@ public class TestSubmodules {
     public static void main(String[] args) throws IOException, GitAPIException {
         File mainRepoDir = createRepository();
         
-        Repository mainRepo = openMainRepo(mainRepoDir);
-        
-        addSubmodule(mainRepo);
-        
-        FileRepositoryBuilder builder = new FileRepositoryBuilder();
-
-        Repository subRepo = builder.setGitDir(new File("testrepo/.git"))
-          .readEnvironment() // scan environment GIT_* variables
-          .findGitDir() // scan up the file system tree
-          .build();
-
-        if(subRepo.isBare()) {
-            throw new IllegalStateException("Repository at " + subRepo.getDirectory() + " should not be bare");
+        try (Repository mainRepo = openMainRepo(mainRepoDir)) {
+            addSubmodule(mainRepo);
+            
+            FileRepositoryBuilder builder = new FileRepositoryBuilder();
+    
+            try (Repository subRepo = builder.setGitDir(new File("testrepo/.git"))
+              .readEnvironment() // scan environment GIT_* variables
+              .findGitDir() // scan up the file system tree
+              .build()) {
+                if(subRepo.isBare()) {
+                    throw new IllegalStateException("Repository at " + subRepo.getDirectory() + " should not be bare");
+                }
+            }
         }
 
         System.out.println("All done!");
@@ -56,12 +56,15 @@ public class TestSubmodules {
 
     private static void addSubmodule(Repository mainRepo) throws GitAPIException {
         System.out.println("Adding submodule");
-        Repository subRepoInit = new Git(mainRepo).submoduleAdd().
-                setURI("https://github.com/github/testrepo.git").
-                setPath("testrepo").
-                call();
-        if(subRepoInit.isBare()) {
-            throw new IllegalStateException("Repository at " + subRepoInit.getDirectory() + " should not be bare");
+        try (Git git = new Git(mainRepo)) {
+            try (Repository subRepoInit = git.submoduleAdd().
+                    setURI("https://github.com/github/testrepo.git").
+                    setPath("testrepo").
+                    call()) {
+                if(subRepoInit.isBare()) {
+                    throw new IllegalStateException("Repository at " + subRepoInit.getDirectory() + " should not be bare");
+                }
+            }
         }
     }
 
@@ -87,11 +90,9 @@ public class TestSubmodules {
                 .setDirectory(dir)
                 .call();
 
-        Repository repository = FileRepositoryBuilder.create(new File(dir.getAbsolutePath(), ".git"));
-
-        System.out.println("Created a new repository at " + repository.getDirectory());
-
-        repository.close();
+        try (Repository repository = FileRepositoryBuilder.create(new File(dir.getAbsolutePath(), ".git"))) {
+            System.out.println("Created a new repository at " + repository.getDirectory());
+        }
         
         return dir;
     }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
index 8a61cea..eb54c3f 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
@@ -44,32 +44,28 @@ public class TrackMaster {
 
         // then clone
         System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
-        Git result = Git.cloneRepository()
+        try (Git result = Git.cloneRepository()
                 .setURI(REMOTE_URL)
                 .setDirectory(localPath)
-                .call();
-
-        // now open the created repository
-        FileRepositoryBuilder builder = new FileRepositoryBuilder();
-        Repository repository = builder.setGitDir(localPath)
-                .readEnvironment() // scan environment GIT_* variables
-                .findGitDir() // scan up the file system tree
-                .build();
-
-        Git git = new Git(repository);
-
-        git.branchCreate()
-                .setName("master")
-                // ?!? .setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM)
-                .setStartPoint("origin/master")
-                .setForce(true)
-                .call();
-
-        System.out.println("Now tracking master in repository at " + repository.getDirectory() + " from origin/master at " +
-                REMOTE_URL);
-
-        repository.close();
-
-        result.close();
+                .call()) {
+            // now open the created repository
+            FileRepositoryBuilder builder = new FileRepositoryBuilder();
+            try (Repository repository = builder.setGitDir(localPath)
+                    .readEnvironment() // scan environment GIT_* variables
+                    .findGitDir() // scan up the file system tree
+                    .build()) {
+                try (Git git = new Git(repository)) {
+                    git.branchCreate()
+                            .setName("master")
+                            // ?!? .setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM)
+                            .setStartPoint("origin/master")
+                            .setForce(true)
+                            .call();
+                }
+        
+                System.out.println("Now tracking master in repository at " + repository.getDirectory() + " from origin/master at " +
+                        REMOTE_URL);
+            }
+        }
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java b/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java
index c9b259e..0a84826 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java
@@ -39,25 +39,23 @@ import org.eclipse.jgit.lib.Repository;
 public class UpdateIndex {
 
 	public static void main(String[] args) throws IOException, GitAPIException {
-		final Repository repo = CookbookHelper.openJGitCookbookRepository();
-		final Git git = new Git(repo);
-		final String testFile = "README.md";
-		
-		try {
-			// Modify the file
-			FileUtils.write(new File(testFile), new Date().toString());			
-			System.out.println("Modified files: " + getModifiedFiles(git));
-			
-			new AssumeChangedCommand(repo, testFile, true).call();
-			System.out.println("Modified files after assume-changed: " + getModifiedFiles(git));
-
-			new AssumeChangedCommand(repo, testFile, false).call();
-			System.out.println("Modified files after no-assume-changed: " + getModifiedFiles(git));
-
-			git.checkout().addPath(testFile).call();
-			System.out.println("Modified files after reset: " + getModifiedFiles(git));
-		} finally {
-			repo.close();
+		try (final Repository repo = CookbookHelper.openJGitCookbookRepository()) {
+    		try (final Git git = new Git(repo)) {
+    		    final String testFile = "README.md";
+    		
+    			// Modify the file
+    			FileUtils.write(new File(testFile), new Date().toString());			
+    			System.out.println("Modified files: " + getModifiedFiles(git));
+    			
+    			new AssumeChangedCommand(repo, testFile, true).call();
+    			System.out.println("Modified files after assume-changed: " + getModifiedFiles(git));
+    
+    			new AssumeChangedCommand(repo, testFile, false).call();
+    			System.out.println("Modified files after no-assume-changed: " + getModifiedFiles(git));
+    
+    			git.checkout().addPath(testFile).call();
+    			System.out.println("Modified files after reset: " + getModifiedFiles(git));
+    		}
 		}
 	}
 
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
index d6854f5..4941260 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
@@ -34,28 +34,25 @@ import org.eclipse.jgit.treewalk.TreeWalk;
 public class WalkTreeNonRecursive {
 
     public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Ref head = repository.getRef("HEAD");
-
-        // a RevWalk allows to walk over commits based on some filtering that is defined
-        RevWalk walk = new RevWalk(repository);
-
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        RevTree tree = commit.getTree();
-        System.out.println("Having tree: " + tree);
-
-        // now use a TreeWalk to iterate over all files in the Tree recursively
-        // you can set Filters to narrow down the results if needed
-        TreeWalk treeWalk = new TreeWalk(repository);
-        treeWalk.addTree(tree);
-        treeWalk.setRecursive(false);
-        while (treeWalk.next()) {
-            System.out.println("found: " + treeWalk.getPathString());
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            Ref head = repository.getRef("HEAD");
+    
+            // a RevWalk allows to walk over commits based on some filtering that is defined
+            try (RevWalk walk = new RevWalk(repository)) {
+                RevCommit commit = walk.parseCommit(head.getObjectId());
+                RevTree tree = commit.getTree();
+                System.out.println("Having tree: " + tree);
+        
+                // now use a TreeWalk to iterate over all files in the Tree recursively
+                // you can set Filters to narrow down the results if needed
+                try (TreeWalk treeWalk = new TreeWalk(repository)) {
+                    treeWalk.addTree(tree);
+                    treeWalk.setRecursive(false);
+                    while (treeWalk.next()) {
+                        System.out.println("found: " + treeWalk.getPathString());
+                    }
+                }
+            }
         }
-
-
-
-        repository.close();
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
index 2c1dbf0..d240f4c 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
@@ -34,26 +34,25 @@ import org.eclipse.jgit.treewalk.TreeWalk;
 public class WalkTreeRecursive {
 
     public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Ref head = repository.getRef("HEAD");
-
-        // a RevWalk allows to walk over commits based on some filtering that is defined
-        RevWalk walk = new RevWalk(repository);
-
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        RevTree tree = commit.getTree();
-        System.out.println("Having tree: " + tree);
-
-        // now use a TreeWalk to iterate over all files in the Tree recursively
-        // you can set Filters to narrow down the results if needed
-        TreeWalk treeWalk = new TreeWalk(repository);
-        treeWalk.addTree(tree);
-        treeWalk.setRecursive(true);
-        while (treeWalk.next()) {
-            System.out.println("found: " + treeWalk.getPathString());
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            Ref head = repository.getRef("HEAD");
+    
+            // a RevWalk allows to walk over commits based on some filtering that is defined
+            try (RevWalk walk = new RevWalk(repository)) {
+                RevCommit commit = walk.parseCommit(head.getObjectId());
+                RevTree tree = commit.getTree();
+                System.out.println("Having tree: " + tree);
+        
+                // now use a TreeWalk to iterate over all files in the Tree recursively
+                // you can set Filters to narrow down the results if needed
+                try (TreeWalk treeWalk = new TreeWalk(repository)) {
+                    treeWalk.addTree(tree);
+                    treeWalk.setRecursive(true);
+                    while (treeWalk.next()) {
+                        System.out.println("found: " + treeWalk.getPathString());
+                    }
+                }
+            }
         }
-
-        repository.close();
     }
 }

§§--§§
commit f37549b02d33486714d81c753a0bf2142eddba16 be8850c9e379359f5c9133f23e1f361155aeba8b
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Sat Oct 10 17:33:16 2015 +0200 
Message: Update javadoc link
---§

diff --git a/README.md b/README.md
index a56ee15..f06d02d 100644
--- a/README.md
+++ b/README.md
@@ -1,6 +1,6 @@
 jgit-cookbook
 =============
-[![Build Status](https://buildhive.cloudbees.com/job/centic9/job/jgit-cookbook/badge/icon)](https://buildhive.cloudbees.com/job/centic9/job/jgit-cookbook/)
+[![Build Status](https://buildhive.cloudbees.com/job/centic9/job/jgit-cookbook/badge/icon)](https://buildhive.cloudbees.com/job/centic9/job/jgit-cookbook/) [![Gradle Status](https://gradleupdate.appspot.com/centic9/jgit-cookbook/status.svg?branch=master)](https://gradleupdate.appspot.com/centic9/jgit-cookbook/status)
 
 Provides examples and code snippets for the [JGit](https://eclipse.org/jgit/) Java Git implementation. 
 
@@ -105,9 +105,9 @@ This project tries to provide a collection of ready-to-run snippets which try to
 
 #### Sources
 
-The following sources were used to build the snippets
+The following sources were used to build the snippets:
 
-* [JGit JavaDoc](http://download.eclipse.org/jgit/site/3.7.1.201504261725-r/apidocs/)
+* [JGit JavaDoc](http://download.eclipse.org/jgit/site/4.1.0.201509280440-r/apidocs/)
 * [JGit User Guide](http://wiki.eclipse.org/JGit/User_Guide)
 * [JGit related questions on Stackoverflow](http://stackoverflow.com/questions/tagged/jgit)
 * [AlBlue's Blog: Embedding JGit](http://alblue.bandlem.com/2013/11/embedding-jgit.html)

§§--§§
commit dc965736a1a31bad5655546dc22091457af8c484 f37549b02d33486714d81c753a0bf2142eddba16
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Wed Oct 14 10:32:37 2015 +0200 
Message: Print out some more in some snippets
---§

diff --git a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
index eb9c509..c5de3c7 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
@@ -31,7 +31,7 @@ public class GetRefFromName {
         try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
             // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
             Ref head = repository.getRef("refs/heads/master");
-            System.out.println("Ref of refs/heads/master: " + head);
+            System.out.println("Ref of refs/heads/master: " + head + ": " + head.getName() + " - " + head.getObjectId().getName());
         }
     }
 }
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
index 118b1a9..bf4b835 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
@@ -34,16 +34,17 @@ public class GetRevTreeFromObjectId {
         try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
             // See e.g. GetRevCommitFromObjectId for how to use a SHA-1 directly
             Ref head = repository.getRef("HEAD");
-    
+            System.out.println("Ref of HEAD: " + head + ": " + head.getName() + " - " + head.getObjectId().getName());
+
             // a RevWalk allows to walk over commits based on some filtering that is defined
             try (RevWalk walk = new RevWalk(repository)) {
                 RevCommit commit = walk.parseCommit(head.getObjectId());
                 System.out.println("Commit: " + commit);
-        
+
                 // a commit points to a tree
                 RevTree tree = walk.parseTree(commit.getTree().getId());
                 System.out.println("Found Tree: " + tree);
-        
+
                 walk.dispose();
             }
         }

§§--§§
commit 216afe993cc8c493a8d0e67f1fb1ee41c0a16741 dc965736a1a31bad5655546dc22091457af8c484
Author: Gradle Update <gradleupdate@users.noreply.github.com>
Date: Tue Oct 20 13:18:20 2015 +0900 
Message: Gradle 2.8
---§

diff --git a/build.gradle b/build.gradle
index 081f52a..6c6f334 100644
--- a/build.gradle
+++ b/build.gradle
@@ -35,5 +35,5 @@ eclipseJdt.finalizedBy adjustEclipseSettingsFile
 eclipseJdt.finalizedBy sortEclipseSettingsFile
 
 task wrapper(type: Wrapper) {
-	gradleVersion = '2.7'
+	gradleVersion = '2.8'
 }
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index e8c6bf7..05ef575 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 8126aa4..8ed5010 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Sun Sep 20 14:44:43 CEST 2015
+#Tue Oct 20 04:13:37 UTC 2015
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.7-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.8-bin.zip
diff --git a/gradlew b/gradlew
index 97fac78..9d82f78 100755
--- a/gradlew
+++ b/gradlew
@@ -56,9 +56,9 @@ while [ -h "$PRG" ] ; do
     fi
 done
 SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >&-
+cd "`dirname \"$PRG\"`/" >/dev/null
 APP_HOME="`pwd -P`"
-cd "$SAVED" >&-
+cd "$SAVED" >/dev/null
 
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
diff --git a/gradlew.bat b/gradlew.bat
old mode 100755
new mode 100644

§§--§§
commit 4bc05abb10b4496f671994067826901aa6325f57 dc965736a1a31bad5655546dc22091457af8c484 216afe993cc8c493a8d0e67f1fb1ee41c0a16741
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Tue Oct 20 18:06:07 2015 +0200 
Message: Merge pull request #14 from gradleupdate/gradle-2.8
---§

§§--§§
commit bce6e5917b0066a5839766eab914d4a4a19975f5 4bc05abb10b4496f671994067826901aa6325f57
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Fri Oct 23 09:13:20 2015 +0200 
Message: Also ignore the Gralde build folder
---§

diff --git a/.gitignore b/.gitignore
index fd46575..33b28f5 100644
--- a/.gitignore
+++ b/.gitignore
@@ -4,3 +4,4 @@ target
 .project
 .gradle
 /bin/
+/build/

§§--§§
commit 25d6cfa03c85a48f6e1d617006c6613528ee7ebe bce6e5917b0066a5839766eab914d4a4a19975f5
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Fri Oct 23 09:13:23 2015 +0200 
Message: Add snippet which shows how to list uncommitted changes
---§

diff --git a/README.md b/README.md
index f06d02d..4bf2eb8 100644
--- a/README.md
+++ b/README.md
@@ -47,6 +47,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [List all tags in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListTags.java)
 * [List all branches in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java)
 * [List all commits in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java)
+* [List uncommitted changes of a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListUncommittedChanges.java)
 * [Create and delete branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java)
 * [Create and delete tags](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java)
 * [Return diff between two branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListUncommittedChanges.java b/src/main/java/org/dstadler/jgit/porcelain/ListUncommittedChanges.java
new file mode 100644
index 0000000..b1bd832
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListUncommittedChanges.java
@@ -0,0 +1,97 @@
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.Map;
+import java.util.Set;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.Status;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.IndexDiff.StageState;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to list various types of uncommitted changes
+ * of a Git repository
+ *
+ * @author dominik.stadler at gmx.at
+ */
+public class ListUncommittedChanges {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            System.out.println("Listing uncommitted changes:");
+            try (Git git = new Git(repository)) {
+                Status status = git.status().call();
+                Set<String> conflicting = status.getConflicting();
+                for(String conflict : conflicting) {
+                    System.out.println("Conflicting: " + conflict);
+                }
+
+                Set<String> added = status.getAdded();
+                for(String add : added) {
+                    System.out.println("Added: " + add);
+                }
+
+                Set<String> changed = status.getChanged();
+                for(String change : changed) {
+                    System.out.println("Change: " + change);
+                }
+
+                Set<String> missing = status.getMissing();
+                for(String miss : missing) {
+                    System.out.println("Missing: " + miss);
+                }
+
+                Set<String> modified = status.getModified();
+                for(String modify : modified) {
+                    System.out.println("Modification: " + modify);
+                }
+
+                Set<String> removed = status.getRemoved();
+                for(String remove : removed) {
+                    System.out.println("Removed: " + remove);
+                }
+
+                Set<String> uncommittedChanges = status.getUncommittedChanges();
+                for(String uncommitted : uncommittedChanges) {
+                    System.out.println("Uncommitted: " + uncommitted);
+                }
+
+                Set<String> untracked = status.getUntracked();
+                for(String untrack : untracked) {
+                    System.out.println("Untracked: " + untrack);
+                }
+
+                Set<String> untrackedFolders = status.getUntrackedFolders();
+                for(String untrack : untrackedFolders) {
+                    System.out.println("Untracked Folder: " + untrack);
+                }
+
+                Map<String, StageState> conflictingStageState = status.getConflictingStageState();
+                for(Map.Entry<String, StageState> entry : conflictingStageState.entrySet()) {
+                    System.out.println("ConflictingState: " + entry);
+                }
+            }
+        }
+    }
+}
diff --git a/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java b/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
index 609d21f..6df9bbc 100644
--- a/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
+++ b/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
@@ -35,5 +35,6 @@ public class PorcelainTest {
         ShowLog.main(null);
         ShowStatus.main(null);
         WalkAllCommits.main(null);
+        ListUncommittedChanges.main(null);
     }
 }

§§--§§
commit 4d56c753233f64534b83a7adbefeb2afa98fc6fa 25d6cfa03c85a48f6e1d617006c6613528ee7ebe
Author: Dominik Stadler <dominik.stadler@gmx.at>
Date: Fri Oct 23 11:03:29 2015 +0200 
Message: Add snippet for rebasing
---§

diff --git a/README.md b/README.md
index 4bf2eb8..cbf9caa 100644
--- a/README.md
+++ b/README.md
@@ -71,6 +71,7 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * [List remote heads/tags without a local clone](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java)
 * [Fetch from remote repositories](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommits.java)
 * [Clone a remote reppository via SSH protocol and username/password credentials](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java)
+* [Rebase onto an upstream branch](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/RebaseToOriginMaster.java)
 
 ##### Low-level API
 
@@ -101,7 +102,6 @@ This project tries to provide a collection of ready-to-run snippets which try to
 * Git repo on Amazon S3: http://stackoverflow.com/questions/8744611/git-repository-on-s3-as-origin-not-as-backup http://stackoverflow.com/questions/7031729/publish-to-s3-using-git http://www.fancybeans.com/blog/2012/08/24/how-to-use-s3-as-a-private-git-repository/
 * Doing stuff without local storage: Using org.eclipse.jgit.storage.dfs.InMemoryRepository to clone a Git repo in-memory and work from there
 * CherryPick
-* Rebase - http://stackoverflow.com/questions/22945257/jgit-how-to-squash-commits
 * Submodules - http://www.codeaffine.com/2014/04/16/how-to-manage-git-submodules-with-jgit/
 
 #### Sources
diff --git a/src/main/java/org/dstadler/jgit/porcelain/RebaseToOriginMaster.java b/src/main/java/org/dstadler/jgit/porcelain/RebaseToOriginMaster.java
new file mode 100644
index 0000000..9c2d488
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/RebaseToOriginMaster.java
@@ -0,0 +1,67 @@
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.RebaseCommand.InteractiveHandler;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.errors.IllegalTodoFileModification;
+import org.eclipse.jgit.lib.RebaseTodoLine;
+import org.eclipse.jgit.lib.RebaseTodoLine.Action;
+import org.eclipse.jgit.lib.Repository;
+
+/**
+ * Snippet which shows how to rebase local changes onto a remote branch.
+ *
+ * See also http://stackoverflow.com/questions/22945257/jgit-how-to-squash-commits
+ *
+ * @author dominik.stadler at gmx.at
+ */
+public class RebaseToOriginMaster {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // all refs
+            try (Git git = new Git(repository)) {
+                InteractiveHandler handler = new InteractiveHandler() {
+                    @Override
+                    public void prepareSteps(List<RebaseTodoLine> steps) {
+                        for(RebaseTodoLine step : steps) {
+                            try {
+                                step.setAction(Action.EDIT);
+                            } catch (IllegalTodoFileModification e) {
+                                throw new IllegalStateException(e);
+                            }
+                        }
+                    }
+
+                    @Override
+                    public String modifyCommitMessage(String oldMessage) {
+                        return oldMessage;
+                    }
+                };
+
+                git.rebase().setUpstream("origin/master").runInteractively(handler).call();
+                System.out.println("Rebased..");
+            }
+        }
+    }
+}
